{
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "BeforeTokenTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toBalance",
          "type": "uint256"
        }
      ],
      "name": "TokensReceivedCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toBalance",
          "type": "uint256"
        }
      ],
      "name": "TokensToSendCalled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC777",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "recipientFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "registerRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "registerSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC777",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "senderFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "shouldRevert",
          "type": "bool"
        }
      ],
      "name": "setShouldRevertReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "shouldRevert",
          "type": "bool"
        }
      ],
      "name": "setShouldRevertSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensToSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "115": "contracts/openzeppelin-contracts/contracts/token/ERC777/IERC777.sol",
    "116": "contracts/openzeppelin-contracts/contracts/token/ERC777/IERC777Recipient.sol",
    "117": "contracts/openzeppelin-contracts/contracts/token/ERC777/IERC777Sender.sol",
    "121": "contracts/openzeppelin-contracts/contracts/utils/Context.sol",
    "134": "contracts/openzeppelin-contracts/contracts/utils/introspection/ERC1820Implementer.sol",
    "136": "contracts/openzeppelin-contracts/contracts/utils/introspection/IERC1820Implementer.sol",
    "137": "contracts/openzeppelin-contracts/contracts/utils/introspection/IERC1820Registry.sol",
    "49": "contracts/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol",
    "exportedSymbols": {
      "Context": [
        15014
      ],
      "ERC1820Implementer": [
        16386
      ],
      "ERC777SenderRecipientMock": [
        4891
      ],
      "IERC1820Implementer": [
        16412
      ],
      "IERC1820Registry": [
        16502
      ],
      "IERC777": [
        14535
      ],
      "IERC777Recipient": [
        14555
      ],
      "IERC777Sender": [
        14575
      ]
    },
    "id": 4892,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4547,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:49"
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/token/ERC777/IERC777.sol",
        "file": "../token/ERC777/IERC777.sol",
        "id": 4548,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4892,
        "sourceUnit": 14536,
        "src": "58:37:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/token/ERC777/IERC777Sender.sol",
        "file": "../token/ERC777/IERC777Sender.sol",
        "id": 4549,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4892,
        "sourceUnit": 14576,
        "src": "96:43:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/token/ERC777/IERC777Recipient.sol",
        "file": "../token/ERC777/IERC777Recipient.sol",
        "id": 4550,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4892,
        "sourceUnit": 14556,
        "src": "140:46:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/utils/Context.sol",
        "file": "../utils/Context.sol",
        "id": 4551,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4892,
        "sourceUnit": 15015,
        "src": "187:30:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/utils/introspection/IERC1820Registry.sol",
        "file": "../utils/introspection/IERC1820Registry.sol",
        "id": 4552,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4892,
        "sourceUnit": 16503,
        "src": "218:53:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/utils/introspection/ERC1820Implementer.sol",
        "file": "../utils/introspection/ERC1820Implementer.sol",
        "id": 4553,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4892,
        "sourceUnit": 16387,
        "src": "272:55:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4554,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 15014,
              "src": "367:7:49"
            },
            "id": 4555,
            "nodeType": "InheritanceSpecifier",
            "src": "367:7:49"
          },
          {
            "baseName": {
              "id": 4556,
              "name": "IERC777Sender",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 14575,
              "src": "376:13:49"
            },
            "id": 4557,
            "nodeType": "InheritanceSpecifier",
            "src": "376:13:49"
          },
          {
            "baseName": {
              "id": 4558,
              "name": "IERC777Recipient",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 14555,
              "src": "391:16:49"
            },
            "id": 4559,
            "nodeType": "InheritanceSpecifier",
            "src": "391:16:49"
          },
          {
            "baseName": {
              "id": 4560,
              "name": "ERC1820Implementer",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 16386,
              "src": "409:18:49"
            },
            "id": 4561,
            "nodeType": "InheritanceSpecifier",
            "src": "409:18:49"
          }
        ],
        "contractDependencies": [
          14555,
          14575,
          15014,
          16386,
          16412
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 4891,
        "linearizedBaseContracts": [
          4891,
          16386,
          16412,
          14555,
          14575,
          15014
        ],
        "name": "ERC777SenderRecipientMock",
        "nameLocation": "338:25:49",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "id": 4581,
            "name": "TokensToSendCalled",
            "nameLocation": "440:18:49",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4580,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4563,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "476:8:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4581,
                  "src": "468:16:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4562,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "468:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4565,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "502:4:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4581,
                  "src": "494:12:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4564,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "494:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4567,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "524:2:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4581,
                  "src": "516:10:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4566,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "516:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4569,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "544:6:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4581,
                  "src": "536:14:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4568,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "536:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4571,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "566:4:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4581,
                  "src": "560:10:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4570,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "560:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4573,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nameLocation": "586:12:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4581,
                  "src": "580:18:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4572,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "580:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4575,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "616:5:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4581,
                  "src": "608:13:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4574,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "608:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4577,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "fromBalance",
                  "nameLocation": "639:11:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4581,
                  "src": "631:19:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4576,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "631:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4579,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "toBalance",
                  "nameLocation": "668:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4581,
                  "src": "660:17:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4578,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "660:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "458:225:49"
            },
            "src": "434:250:49"
          },
          {
            "anonymous": false,
            "id": 4601,
            "name": "TokensReceivedCalled",
            "nameLocation": "696:20:49",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4600,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4583,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "734:8:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4601,
                  "src": "726:16:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4582,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "726:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4585,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "760:4:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4601,
                  "src": "752:12:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4584,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "752:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4587,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "782:2:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4601,
                  "src": "774:10:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4586,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "774:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4589,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "802:6:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4601,
                  "src": "794:14:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4588,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "794:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4591,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "824:4:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4601,
                  "src": "818:10:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4590,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "818:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4593,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nameLocation": "844:12:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4601,
                  "src": "838:18:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4592,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "838:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4595,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "874:5:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4601,
                  "src": "866:13:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4594,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "866:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4597,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "fromBalance",
                  "nameLocation": "897:11:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4601,
                  "src": "889:19:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4596,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "889:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4599,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "toBalance",
                  "nameLocation": "926:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4601,
                  "src": "918:17:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4598,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "918:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "716:225:49"
            },
            "src": "690:252:49"
          },
          {
            "anonymous": false,
            "id": 4603,
            "name": "BeforeTokenTransfer",
            "nameLocation": "1009:19:49",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4602,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1028:2:49"
            },
            "src": "1003:28:49"
          },
          {
            "constant": false,
            "id": 4605,
            "mutability": "mutable",
            "name": "_shouldRevertSend",
            "nameLocation": "1050:17:49",
            "nodeType": "VariableDeclaration",
            "scope": 4891,
            "src": "1037:30:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 4604,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1037:4:49",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4607,
            "mutability": "mutable",
            "name": "_shouldRevertReceive",
            "nameLocation": "1086:20:49",
            "nodeType": "VariableDeclaration",
            "scope": 4891,
            "src": "1073:33:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 4606,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1073:4:49",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4613,
            "mutability": "mutable",
            "name": "_erc1820",
            "nameLocation": "1138:8:49",
            "nodeType": "VariableDeclaration",
            "scope": 4891,
            "src": "1113:96:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IERC1820Registry_$16502",
              "typeString": "contract IERC1820Registry"
            },
            "typeName": {
              "id": 4609,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4608,
                "name": "IERC1820Registry",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 16502,
                "src": "1113:16:49"
              },
              "referencedDeclaration": 16502,
              "src": "1113:16:49",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1820Registry_$16502",
                "typeString": "contract IERC1820Registry"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "307831383230613442373631384264453731446365386364633733614142364339353930356661443234",
                  "id": 4611,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1166:42:49",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "value": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 4610,
                "name": "IERC1820Registry",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 16502,
                "src": "1149:16:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_contract$_IERC1820Registry_$16502_$",
                  "typeString": "type(contract IERC1820Registry)"
                }
              },
              "id": 4612,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1149:60:49",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1820Registry_$16502",
                "typeString": "contract IERC1820Registry"
              }
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 4618,
            "mutability": "constant",
            "name": "_TOKENS_SENDER_INTERFACE_HASH",
            "nameLocation": "1241:29:49",
            "nodeType": "VariableDeclaration",
            "scope": 4891,
            "src": "1216:88:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 4614,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1216:7:49",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "455243373737546f6b656e7353656e646572",
                  "id": 4616,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1283:20:49",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895",
                    "typeString": "literal_string \"ERC777TokensSender\""
                  },
                  "value": "ERC777TokensSender"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895",
                    "typeString": "literal_string \"ERC777TokensSender\""
                  }
                ],
                "id": 4615,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "1273:9:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 4617,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1273:31:49",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 4623,
            "mutability": "constant",
            "name": "_TOKENS_RECIPIENT_INTERFACE_HASH",
            "nameLocation": "1335:32:49",
            "nodeType": "VariableDeclaration",
            "scope": 4891,
            "src": "1310:94:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 4619,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1310:7:49",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "455243373737546f6b656e73526563697069656e74",
                  "id": 4621,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1380:23:49",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_b281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
                    "typeString": "literal_string \"ERC777TokensRecipient\""
                  },
                  "value": "ERC777TokensRecipient"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_b281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
                    "typeString": "literal_string \"ERC777TokensRecipient\""
                  }
                ],
                "id": 4620,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "1370:9:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 4622,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1370:34:49",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "private"
          },
          {
            "baseFunctions": [
              14574
            ],
            "body": {
              "id": 4682,
              "nodeType": "Block",
              "src": "1619:563:49",
              "statements": [
                {
                  "condition": {
                    "id": 4639,
                    "name": "_shouldRevertSend",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4605,
                    "src": "1633:17:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4644,
                  "nodeType": "IfStatement",
                  "src": "1629:56:49",
                  "trueBody": {
                    "id": 4643,
                    "nodeType": "Block",
                    "src": "1652:33:49",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 4640,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "1666:6:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 4641,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1666:8:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4642,
                        "nodeType": "ExpressionStatement",
                        "src": "1666:8:49"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    4647
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4647,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "1703:5:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 4682,
                      "src": "1695:13:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC777_$14535",
                        "typeString": "contract IERC777"
                      },
                      "typeName": {
                        "id": 4646,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4645,
                          "name": "IERC777",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 14535,
                          "src": "1695:7:49"
                        },
                        "referencedDeclaration": 14535,
                        "src": "1695:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$14535",
                          "typeString": "contract IERC777"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4652,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 4649,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15002,
                          "src": "1719:10:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 4650,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1719:12:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4648,
                      "name": "IERC777",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14535,
                      "src": "1711:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC777_$14535_$",
                        "typeString": "type(contract IERC777)"
                      }
                    },
                    "id": 4651,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1711:21:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC777_$14535",
                      "typeString": "contract IERC777"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1695:37:49"
                },
                {
                  "assignments": [
                    4654
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4654,
                      "mutability": "mutable",
                      "name": "fromBalance",
                      "nameLocation": "1751:11:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 4682,
                      "src": "1743:19:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4653,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1743:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4659,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4657,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4627,
                        "src": "1781:4:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 4655,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4647,
                        "src": "1765:5:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$14535",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 4656,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 14411,
                      "src": "1765:15:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 4658,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1765:21:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1743:43:49"
                },
                {
                  "assignments": [
                    4661
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4661,
                      "mutability": "mutable",
                      "name": "toBalance",
                      "nameLocation": "1900:9:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 4682,
                      "src": "1892:17:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4660,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1892:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4666,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4664,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4629,
                        "src": "1928:2:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 4662,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4647,
                        "src": "1912:5:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$14535",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 4663,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 14411,
                      "src": "1912:15:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 4665,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1912:19:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1892:39:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4668,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4625,
                        "src": "1979:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4669,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4627,
                        "src": "2001:4:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4670,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4629,
                        "src": "2019:2:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4671,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4631,
                        "src": "2035:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4672,
                        "name": "userData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4633,
                        "src": "2055:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 4673,
                        "name": "operatorData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4635,
                        "src": "2077:12:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 4676,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4647,
                            "src": "2111:5:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC777_$14535",
                              "typeString": "contract IERC777"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IERC777_$14535",
                              "typeString": "contract IERC777"
                            }
                          ],
                          "id": 4675,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2103:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4674,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2103:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4677,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2103:14:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4678,
                        "name": "fromBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4654,
                        "src": "2131:11:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4679,
                        "name": "toBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4661,
                        "src": "2156:9:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4667,
                      "name": "TokensToSendCalled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4581,
                      "src": "1947:18:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,address,uint256,bytes memory,bytes memory,address,uint256,uint256)"
                      }
                    },
                    "id": 4680,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1947:228:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4681,
                  "nodeType": "EmitStatement",
                  "src": "1942:233:49"
                }
              ]
            },
            "functionSelector": "75ab9782",
            "id": 4683,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokensToSend",
            "nameLocation": "1420:12:49",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4637,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1610:8:49"
            },
            "parameters": {
              "id": 4636,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4625,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "1450:8:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4683,
                  "src": "1442:16:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4624,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1442:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4627,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "1476:4:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4683,
                  "src": "1468:12:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4626,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1468:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4629,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "1498:2:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4683,
                  "src": "1490:10:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4628,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1490:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4631,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1518:6:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4683,
                  "src": "1510:14:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4630,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1510:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4633,
                  "mutability": "mutable",
                  "name": "userData",
                  "nameLocation": "1549:8:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4683,
                  "src": "1534:23:49",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4632,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1534:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4635,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nameLocation": "1582:12:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4683,
                  "src": "1567:27:49",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4634,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1567:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1432:168:49"
            },
            "returnParameters": {
              "id": 4638,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1619:0:49"
            },
            "scope": 4891,
            "src": "1411:771:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              14554
            ],
            "body": {
              "id": 4742,
              "nodeType": "Block",
              "src": "2398:568:49",
              "statements": [
                {
                  "condition": {
                    "id": 4699,
                    "name": "_shouldRevertReceive",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4607,
                    "src": "2412:20:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4704,
                  "nodeType": "IfStatement",
                  "src": "2408:59:49",
                  "trueBody": {
                    "id": 4703,
                    "nodeType": "Block",
                    "src": "2434:33:49",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 4700,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "2448:6:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 4701,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2448:8:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4702,
                        "nodeType": "ExpressionStatement",
                        "src": "2448:8:49"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    4707
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4707,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "2485:5:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 4742,
                      "src": "2477:13:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC777_$14535",
                        "typeString": "contract IERC777"
                      },
                      "typeName": {
                        "id": 4706,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4705,
                          "name": "IERC777",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 14535,
                          "src": "2477:7:49"
                        },
                        "referencedDeclaration": 14535,
                        "src": "2477:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$14535",
                          "typeString": "contract IERC777"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4712,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 4709,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15002,
                          "src": "2501:10:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 4710,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2501:12:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4708,
                      "name": "IERC777",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14535,
                      "src": "2493:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC777_$14535_$",
                        "typeString": "type(contract IERC777)"
                      }
                    },
                    "id": 4711,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2493:21:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC777_$14535",
                      "typeString": "contract IERC777"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2477:37:49"
                },
                {
                  "assignments": [
                    4714
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4714,
                      "mutability": "mutable",
                      "name": "fromBalance",
                      "nameLocation": "2533:11:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 4742,
                      "src": "2525:19:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4713,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2525:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4719,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4717,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4687,
                        "src": "2563:4:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 4715,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4707,
                        "src": "2547:5:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$14535",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 4716,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 14411,
                      "src": "2547:15:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 4718,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2547:21:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2525:43:49"
                },
                {
                  "assignments": [
                    4721
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4721,
                      "mutability": "mutable",
                      "name": "toBalance",
                      "nameLocation": "2682:9:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 4742,
                      "src": "2674:17:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4720,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2674:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4726,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4724,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4689,
                        "src": "2710:2:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 4722,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4707,
                        "src": "2694:5:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$14535",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 4723,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 14411,
                      "src": "2694:15:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 4725,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2694:19:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2674:39:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4728,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4685,
                        "src": "2763:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4729,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4687,
                        "src": "2785:4:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4730,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4689,
                        "src": "2803:2:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4731,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4691,
                        "src": "2819:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4732,
                        "name": "userData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4693,
                        "src": "2839:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 4733,
                        "name": "operatorData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4695,
                        "src": "2861:12:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 4736,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4707,
                            "src": "2895:5:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC777_$14535",
                              "typeString": "contract IERC777"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IERC777_$14535",
                              "typeString": "contract IERC777"
                            }
                          ],
                          "id": 4735,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2887:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4734,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2887:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4737,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2887:14:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4738,
                        "name": "fromBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4714,
                        "src": "2915:11:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4739,
                        "name": "toBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4721,
                        "src": "2940:9:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4727,
                      "name": "TokensReceivedCalled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4601,
                      "src": "2729:20:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,address,uint256,bytes memory,bytes memory,address,uint256,uint256)"
                      }
                    },
                    "id": 4740,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2729:230:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4741,
                  "nodeType": "EmitStatement",
                  "src": "2724:235:49"
                }
              ]
            },
            "functionSelector": "0023de29",
            "id": 4743,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokensReceived",
            "nameLocation": "2197:14:49",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 4697,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2389:8:49"
            },
            "parameters": {
              "id": 4696,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4685,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "2229:8:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4743,
                  "src": "2221:16:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4684,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2221:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4687,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "2255:4:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4743,
                  "src": "2247:12:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4686,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2247:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4689,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "2277:2:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4743,
                  "src": "2269:10:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4688,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2269:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4691,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2297:6:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4743,
                  "src": "2289:14:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4690,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2289:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4693,
                  "mutability": "mutable",
                  "name": "userData",
                  "nameLocation": "2328:8:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4743,
                  "src": "2313:23:49",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4692,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2313:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4695,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nameLocation": "2361:12:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4743,
                  "src": "2346:27:49",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4694,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2346:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2211:168:49"
            },
            "returnParameters": {
              "id": 4698,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2398:0:49"
            },
            "scope": 4891,
            "src": "2188:778:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4769,
              "nodeType": "Block",
              "src": "3015:199:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4749,
                        "name": "_TOKENS_SENDER_INTERFACE_HASH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4618,
                        "src": "3054:29:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 4750,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4745,
                        "src": "3085:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4748,
                      "name": "_registerInterfaceForAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 16385,
                      "src": "3025:28:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 4751,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3025:68:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4752,
                  "nodeType": "ExpressionStatement",
                  "src": "3025:68:49"
                },
                {
                  "assignments": [
                    4754
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4754,
                      "mutability": "mutable",
                      "name": "self",
                      "nameLocation": "3112:4:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 4769,
                      "src": "3104:12:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4753,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3104:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4759,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4757,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "3127:4:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$4891",
                          "typeString": "contract ERC777SenderRecipientMock"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$4891",
                          "typeString": "contract ERC777SenderRecipientMock"
                        }
                      ],
                      "id": 4756,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3119:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 4755,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3119:7:49",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 4758,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3119:13:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3104:28:49"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4762,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4760,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4745,
                      "src": "3146:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 4761,
                      "name": "self",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4754,
                      "src": "3157:4:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3146:15:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4768,
                  "nodeType": "IfStatement",
                  "src": "3142:66:49",
                  "trueBody": {
                    "id": 4767,
                    "nodeType": "Block",
                    "src": "3163:45:49",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4764,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4754,
                              "src": "3192:4:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 4763,
                            "name": "registerSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4787,
                            "src": "3177:14:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 4765,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3177:20:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4766,
                        "nodeType": "ExpressionStatement",
                        "src": "3177:20:49"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "d2de6474",
            "id": 4770,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "senderFor",
            "nameLocation": "2981:9:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4746,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4745,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "2999:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4770,
                  "src": "2991:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4744,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2991:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2990:17:49"
            },
            "returnParameters": {
              "id": 4747,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3015:0:49"
            },
            "scope": 4891,
            "src": "2972:242:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4786,
              "nodeType": "Block",
              "src": "3267:103:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4780,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "3318:4:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$4891",
                              "typeString": "contract ERC777SenderRecipientMock"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$4891",
                              "typeString": "contract ERC777SenderRecipientMock"
                            }
                          ],
                          "id": 4779,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3310:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4778,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3310:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4781,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3310:13:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4782,
                        "name": "_TOKENS_SENDER_INTERFACE_HASH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4618,
                        "src": "3325:29:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 4783,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4772,
                        "src": "3356:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 4775,
                        "name": "_erc1820",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4613,
                        "src": "3277:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC1820Registry_$16502",
                          "typeString": "contract IERC1820Registry"
                        }
                      },
                      "id": 4777,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setInterfaceImplementer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16441,
                      "src": "3277:32:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (address,bytes32,address) external"
                      }
                    },
                    "id": 4784,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3277:86:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4785,
                  "nodeType": "ExpressionStatement",
                  "src": "3277:86:49"
                }
              ]
            },
            "functionSelector": "e1ecbd30",
            "id": 4787,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "registerSender",
            "nameLocation": "3229:14:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4773,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4772,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "3252:6:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4787,
                  "src": "3244:14:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4771,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3244:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3243:16:49"
            },
            "returnParameters": {
              "id": 4774,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3267:0:49"
            },
            "scope": 4891,
            "src": "3220:150:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4813,
              "nodeType": "Block",
              "src": "3422:205:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4793,
                        "name": "_TOKENS_RECIPIENT_INTERFACE_HASH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4623,
                        "src": "3461:32:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 4794,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4789,
                        "src": "3495:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4792,
                      "name": "_registerInterfaceForAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 16385,
                      "src": "3432:28:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 4795,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3432:71:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4796,
                  "nodeType": "ExpressionStatement",
                  "src": "3432:71:49"
                },
                {
                  "assignments": [
                    4798
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4798,
                      "mutability": "mutable",
                      "name": "self",
                      "nameLocation": "3522:4:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 4813,
                      "src": "3514:12:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4797,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3514:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4803,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4801,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "3537:4:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$4891",
                          "typeString": "contract ERC777SenderRecipientMock"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$4891",
                          "typeString": "contract ERC777SenderRecipientMock"
                        }
                      ],
                      "id": 4800,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3529:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 4799,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3529:7:49",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 4802,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3529:13:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3514:28:49"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4806,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4804,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4789,
                      "src": "3556:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 4805,
                      "name": "self",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4798,
                      "src": "3567:4:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3556:15:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4812,
                  "nodeType": "IfStatement",
                  "src": "3552:69:49",
                  "trueBody": {
                    "id": 4811,
                    "nodeType": "Block",
                    "src": "3573:48:49",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4808,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4798,
                              "src": "3605:4:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 4807,
                            "name": "registerRecipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4831,
                            "src": "3587:17:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 4809,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3587:23:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4810,
                        "nodeType": "ExpressionStatement",
                        "src": "3587:23:49"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "e0eb2180",
            "id": 4814,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "recipientFor",
            "nameLocation": "3385:12:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4790,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4789,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "3406:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4814,
                  "src": "3398:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4788,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3398:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3397:17:49"
            },
            "returnParameters": {
              "id": 4791,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3422:0:49"
            },
            "scope": 4891,
            "src": "3376:251:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4830,
              "nodeType": "Block",
              "src": "3686:109:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4824,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "3737:4:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$4891",
                              "typeString": "contract ERC777SenderRecipientMock"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$4891",
                              "typeString": "contract ERC777SenderRecipientMock"
                            }
                          ],
                          "id": 4823,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3729:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4822,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3729:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4825,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3729:13:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4826,
                        "name": "_TOKENS_RECIPIENT_INTERFACE_HASH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4623,
                        "src": "3744:32:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 4827,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4816,
                        "src": "3778:9:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 4819,
                        "name": "_erc1820",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4613,
                        "src": "3696:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC1820Registry_$16502",
                          "typeString": "contract IERC1820Registry"
                        }
                      },
                      "id": 4821,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setInterfaceImplementer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16441,
                      "src": "3696:32:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (address,bytes32,address) external"
                      }
                    },
                    "id": 4828,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3696:92:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4829,
                  "nodeType": "ExpressionStatement",
                  "src": "3696:92:49"
                }
              ]
            },
            "functionSelector": "a8badaa5",
            "id": 4831,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "registerRecipient",
            "nameLocation": "3642:17:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4817,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4816,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "3668:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4831,
                  "src": "3660:17:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4815,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3660:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3659:19:49"
            },
            "returnParameters": {
              "id": 4818,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3686:0:49"
            },
            "scope": 4891,
            "src": "3633:162:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4840,
              "nodeType": "Block",
              "src": "3856:49:49",
              "statements": [
                {
                  "expression": {
                    "id": 4838,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4836,
                      "name": "_shouldRevertSend",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4605,
                      "src": "3866:17:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4837,
                      "name": "shouldRevert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4833,
                      "src": "3886:12:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3866:32:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4839,
                  "nodeType": "ExpressionStatement",
                  "src": "3866:32:49"
                }
              ]
            },
            "functionSelector": "4e4ae5a5",
            "id": 4841,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setShouldRevertSend",
            "nameLocation": "3810:19:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4834,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4833,
                  "mutability": "mutable",
                  "name": "shouldRevert",
                  "nameLocation": "3835:12:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4841,
                  "src": "3830:17:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4832,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3830:4:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3829:19:49"
            },
            "returnParameters": {
              "id": 4835,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3856:0:49"
            },
            "scope": 4891,
            "src": "3801:104:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4850,
              "nodeType": "Block",
              "src": "3969:52:49",
              "statements": [
                {
                  "expression": {
                    "id": 4848,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4846,
                      "name": "_shouldRevertReceive",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4607,
                      "src": "3979:20:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4847,
                      "name": "shouldRevert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4843,
                      "src": "4002:12:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3979:35:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4849,
                  "nodeType": "ExpressionStatement",
                  "src": "3979:35:49"
                }
              ]
            },
            "functionSelector": "c97e18fc",
            "id": 4851,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setShouldRevertReceive",
            "nameLocation": "3920:22:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4844,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4843,
                  "mutability": "mutable",
                  "name": "shouldRevert",
                  "nameLocation": "3948:12:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4851,
                  "src": "3943:17:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4842,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3943:4:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3942:19:49"
            },
            "returnParameters": {
              "id": 4845,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3969:0:49"
            },
            "scope": 4891,
            "src": "3911:110:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4871,
              "nodeType": "Block",
              "src": "4110:158:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4866,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4856,
                        "src": "4202:2:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4867,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4858,
                        "src": "4206:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4868,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4860,
                        "src": "4214:4:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 4863,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4854,
                        "src": "4191:5:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$14535",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 4865,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "send",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 14421,
                      "src": "4191:10:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,bytes memory) external"
                      }
                    },
                    "id": 4869,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4191:28:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4870,
                  "nodeType": "ExpressionStatement",
                  "src": "4191:28:49"
                }
              ]
            },
            "functionSelector": "3836ef89",
            "id": 4872,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "send",
            "nameLocation": "4036:4:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4854,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "4049:5:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4872,
                  "src": "4041:13:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$14535",
                    "typeString": "contract IERC777"
                  },
                  "typeName": {
                    "id": 4853,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4852,
                      "name": "IERC777",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 14535,
                      "src": "4041:7:49"
                    },
                    "referencedDeclaration": 14535,
                    "src": "4041:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC777_$14535",
                      "typeString": "contract IERC777"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4856,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "4064:2:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4872,
                  "src": "4056:10:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4855,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4056:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4858,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4076:6:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4872,
                  "src": "4068:14:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4857,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4068:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4860,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "4097:4:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4872,
                  "src": "4084:17:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4859,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4084:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4040:62:49"
            },
            "returnParameters": {
              "id": 4862,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4110:0:49"
            },
            "scope": 4891,
            "src": "4027:241:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4889,
              "nodeType": "Block",
              "src": "4345:41:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4885,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4877,
                        "src": "4366:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4886,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4879,
                        "src": "4374:4:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 4882,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4875,
                        "src": "4355:5:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$14535",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 4884,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 14429,
                      "src": "4355:10:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,bytes memory) external"
                      }
                    },
                    "id": 4887,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4355:24:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4888,
                  "nodeType": "ExpressionStatement",
                  "src": "4355:24:49"
                }
              ]
            },
            "functionSelector": "44d17187",
            "id": 4890,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "4283:4:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4880,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4875,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "4296:5:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4890,
                  "src": "4288:13:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$14535",
                    "typeString": "contract IERC777"
                  },
                  "typeName": {
                    "id": 4874,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4873,
                      "name": "IERC777",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 14535,
                      "src": "4288:7:49"
                    },
                    "referencedDeclaration": 14535,
                    "src": "4288:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC777_$14535",
                      "typeString": "contract IERC777"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4877,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4311:6:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4890,
                  "src": "4303:14:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4876,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4303:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4879,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "4332:4:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 4890,
                  "src": "4319:17:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4878,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4319:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4287:50:49"
            },
            "returnParameters": {
              "id": 4881,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4345:0:49"
            },
            "scope": 4891,
            "src": "4274:112:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 4892,
        "src": "329:4059:49"
      }
    ],
    "src": "33:4356:49"
  },
  "bytecode": "60806040526001805462010000600160b01b031916751820a4b7618bde71dce8cdc73aab6c95905fad24000017905534801561003a57600080fd5b50610bb88061004a6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c806375ab97821161007157806375ab97821461012e578063a8badaa514610141578063c97e18fc14610154578063d2de64741461017c578063e0eb21801461018f578063e1ecbd30146101a2576100a8565b806223de29146100ad578063249cb3fa146100c25780633836ef89146100e757806344d17187146100fa5780634e4ae5a51461010d575b600080fd5b6100c06100bb366004610841565b6101b5565b005b6100d56100d036600461090f565b610325565b60405190815260200160405180910390f35b6100c06100f536600461093e565b61037d565b6100c06101083660046109a8565b6103e5565b6100c061011b3660046108ef565b6001805460ff1916911515919091179055565b6100c061013c366004610841565b61044a565b6100c061014f366004610825565b6105a0565b6100c06101623660046108ef565b600180549115156101000261ff0019909216919091179055565b6100c061018a366004610825565b610636565b6100c061019d366004610825565b61067f565b6100c06101b0366004610825565b6106c4565b600154610100900460ff16156101ca57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a082319060240160206040518083038186803b15801561021457600080fd5b505afa158015610228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024c91906109ff565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a082319060240160206040518083038186803b15801561029357600080fd5b505afa1580156102a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cb91906109ff565b90507f47e915878c47f3ec4d7ff646a2becb229f64fd2abe4d2b5e2bb4275b0cf50d4e8b8b8b8b8b8b8b8b8b8b8b6040516103109b9a99989796959493929190610a8c565b60405180910390a15050505050505050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610354576000610376565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b604051634decdde360e11b81526001600160a01b03851690639bd9bbc6906103ad90869086908690600401610b03565b600060405180830381600087803b1580156103c757600080fd5b505af11580156103db573d6000803e3d6000fd5b5050505050505050565b60405163fe9d930360e01b81526001600160a01b0384169063fe9d9303906104139085908590600401610b33565b600060405180830381600087803b15801561042d57600080fd5b505af1158015610441573d6000803e3d6000fd5b50505050505050565b60015460ff161561045a57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a082319060240160206040518083038186803b1580156104a457600080fd5b505afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc91906109ff565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a082319060240160206040518083038186803b15801561052357600080fd5b505afa158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b91906109ff565b90507faa3e88aca472e90221daf7d3d601abafb62b120319089d7a2c2f63588da855298b8b8b8b8b8b8b8b8b8b8b6040516103109b9a99989796959493929190610a8c565b6001546040516329965a1d60e01b81523060048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064015b600060405180830381600087803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b5050505050565b6106607f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89582610729565b306001600160a01b03821681141561067b5761067b816106c4565b5050565b6106a97fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b82610729565b306001600160a01b03821681141561067b5761067b816105a0565b6001546040516329965a1d60e01b81523060048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201526001600160a01b03838116604483015262010000909204909116906329965a1d90606401610601565b6000918252602082815260408084206001600160a01b0390931684529190529020805460ff19166001179055565b60008083601f840112610768578182fd5b50813567ffffffffffffffff81111561077f578182fd5b60208301915083602082850101111561079757600080fd5b9250929050565b600082601f8301126107ae578081fd5b813567ffffffffffffffff808211156107c9576107c9610b54565b604051601f8301601f19908116603f011681019082821181831017156107f1576107f1610b54565b81604052838152866020858801011115610809578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610836578081fd5b813561037681610b6a565b60008060008060008060008060c0898b03121561085c578384fd5b883561086781610b6a565b9750602089013561087781610b6a565b9650604089013561088781610b6a565b955060608901359450608089013567ffffffffffffffff808211156108aa578586fd5b6108b68c838d01610757565b909650945060a08b01359150808211156108ce578384fd5b506108db8b828c01610757565b999c989b5096995094979396929594505050565b600060208284031215610900578081fd5b81358015158114610376578182fd5b60008060408385031215610921578182fd5b82359150602083013561093381610b6a565b809150509250929050565b60008060008060808587031215610953578384fd5b843561095e81610b6a565b9350602085013561096e81610b6a565b925060408501359150606085013567ffffffffffffffff811115610990578182fd5b61099c8782880161079e565b91505092959194509250565b6000806000606084860312156109bc578283fd5b83356109c781610b6a565b925060208401359150604084013567ffffffffffffffff8111156109e9578182fd5b6109f58682870161079e565b9150509250925092565b600060208284031215610a10578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452815b81811015610a6657602081850181015186830182015201610a4a565b81811115610a775782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038c811682528b811660208301528a81166040830152606082018a905261012060808301819052600091610aca8483018b8d610a17565b915083820360a0850152610adf82898b610a17565b961660c0840152505060e08101929092526101009091015298975050505050505050565b600060018060a01b038516825283602083015260606040830152610b2a6060830184610a41565b95945050505050565b600083825260406020830152610b4c6040830184610a41565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b7f57600080fd5b5056fea2646970667358221220732c1f970a27dd8999c4035da4e7bd7b45b115bbeea3198023bae52e86b4275864736f6c63430008030033",
  "bytecodeSha1": "17e6b8b55e73cc263efc07b1e49e2c3261e05be9",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.3+commit.8d00100c"
  },
  "contractName": "ERC777SenderRecipientMock",
  "coverageMap": {
    "branches": {
      "115": {},
      "116": {},
      "117": {},
      "121": {},
      "134": {
        "ERC1820Implementer.canImplementInterfaceForAddress": {
          "21": [
            857,
            901,
            true
          ]
        }
      },
      "136": {},
      "137": {},
      "49": {
        "ERC777SenderRecipientMock.recipientFor": {
          "20": [
            3556,
            3571,
            false
          ]
        },
        "ERC777SenderRecipientMock.senderFor": {
          "19": [
            3146,
            3161,
            false
          ]
        },
        "ERC777SenderRecipientMock.tokensReceived": {
          "17": [
            2412,
            2432,
            false
          ]
        },
        "ERC777SenderRecipientMock.tokensToSend": {
          "18": [
            1633,
            1650,
            false
          ]
        }
      }
    },
    "statements": {
      "115": {},
      "116": {},
      "117": {},
      "121": {
        "Context._msgSender": {
          "3": [
            658,
            675
          ]
        }
      },
      "134": {
        "ERC1820Implementer._registerInterfaceForAddress": {
          "16": [
            1288,
            1339
          ]
        },
        "ERC1820Implementer.canImplementInterfaceForAddress": {
          "5": [
            850,
            941
          ]
        }
      },
      "136": {},
      "137": {},
      "49": {
        "ERC777SenderRecipientMock.burn": {
          "7": [
            4355,
            4379
          ]
        },
        "ERC777SenderRecipientMock.recipientFor": {
          "13": [
            3432,
            3503
          ],
          "14": [
            3587,
            3610
          ]
        },
        "ERC777SenderRecipientMock.registerRecipient": {
          "10": [
            3696,
            3788
          ]
        },
        "ERC777SenderRecipientMock.registerSender": {
          "15": [
            3277,
            3363
          ]
        },
        "ERC777SenderRecipientMock.send": {
          "6": [
            4191,
            4219
          ]
        },
        "ERC777SenderRecipientMock.senderFor": {
          "11": [
            3025,
            3093
          ],
          "12": [
            3177,
            3197
          ]
        },
        "ERC777SenderRecipientMock.setShouldRevertReceive": {
          "1": [
            3979,
            4014
          ]
        },
        "ERC777SenderRecipientMock.setShouldRevertSend": {
          "0": [
            3866,
            3898
          ]
        },
        "ERC777SenderRecipientMock.tokensReceived": {
          "2": [
            2448,
            2456
          ],
          "4": [
            2724,
            2959
          ]
        },
        "ERC777SenderRecipientMock.tokensToSend": {
          "8": [
            1666,
            1674
          ],
          "9": [
            1942,
            2175
          ]
        }
      }
    }
  },
  "dependencies": [
    "Context",
    "ERC1820Implementer",
    "IERC1820Implementer",
    "IERC1820Registry",
    "IERC777",
    "IERC777Recipient",
    "IERC777Sender"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a85760003560e01c806375ab97821161007157806375ab97821461012e578063a8badaa514610141578063c97e18fc14610154578063d2de64741461017c578063e0eb21801461018f578063e1ecbd30146101a2576100a8565b806223de29146100ad578063249cb3fa146100c25780633836ef89146100e757806344d17187146100fa5780634e4ae5a51461010d575b600080fd5b6100c06100bb366004610841565b6101b5565b005b6100d56100d036600461090f565b610325565b60405190815260200160405180910390f35b6100c06100f536600461093e565b61037d565b6100c06101083660046109a8565b6103e5565b6100c061011b3660046108ef565b6001805460ff1916911515919091179055565b6100c061013c366004610841565b61044a565b6100c061014f366004610825565b6105a0565b6100c06101623660046108ef565b600180549115156101000261ff0019909216919091179055565b6100c061018a366004610825565b610636565b6100c061019d366004610825565b61067f565b6100c06101b0366004610825565b6106c4565b600154610100900460ff16156101ca57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a082319060240160206040518083038186803b15801561021457600080fd5b505afa158015610228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024c91906109ff565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a082319060240160206040518083038186803b15801561029357600080fd5b505afa1580156102a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cb91906109ff565b90507f47e915878c47f3ec4d7ff646a2becb229f64fd2abe4d2b5e2bb4275b0cf50d4e8b8b8b8b8b8b8b8b8b8b8b6040516103109b9a99989796959493929190610a8c565b60405180910390a15050505050505050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610354576000610376565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b604051634decdde360e11b81526001600160a01b03851690639bd9bbc6906103ad90869086908690600401610b03565b600060405180830381600087803b1580156103c757600080fd5b505af11580156103db573d6000803e3d6000fd5b5050505050505050565b60405163fe9d930360e01b81526001600160a01b0384169063fe9d9303906104139085908590600401610b33565b600060405180830381600087803b15801561042d57600080fd5b505af1158015610441573d6000803e3d6000fd5b50505050505050565b60015460ff161561045a57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a082319060240160206040518083038186803b1580156104a457600080fd5b505afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc91906109ff565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a082319060240160206040518083038186803b15801561052357600080fd5b505afa158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b91906109ff565b90507faa3e88aca472e90221daf7d3d601abafb62b120319089d7a2c2f63588da855298b8b8b8b8b8b8b8b8b8b8b6040516103109b9a99989796959493929190610a8c565b6001546040516329965a1d60e01b81523060048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064015b600060405180830381600087803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b5050505050565b6106607f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89582610729565b306001600160a01b03821681141561067b5761067b816106c4565b5050565b6106a97fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b82610729565b306001600160a01b03821681141561067b5761067b816105a0565b6001546040516329965a1d60e01b81523060048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201526001600160a01b03838116604483015262010000909204909116906329965a1d90606401610601565b6000918252602082815260408084206001600160a01b0390931684529190529020805460ff19166001179055565b60008083601f840112610768578182fd5b50813567ffffffffffffffff81111561077f578182fd5b60208301915083602082850101111561079757600080fd5b9250929050565b600082601f8301126107ae578081fd5b813567ffffffffffffffff808211156107c9576107c9610b54565b604051601f8301601f19908116603f011681019082821181831017156107f1576107f1610b54565b81604052838152866020858801011115610809578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610836578081fd5b813561037681610b6a565b60008060008060008060008060c0898b03121561085c578384fd5b883561086781610b6a565b9750602089013561087781610b6a565b9650604089013561088781610b6a565b955060608901359450608089013567ffffffffffffffff808211156108aa578586fd5b6108b68c838d01610757565b909650945060a08b01359150808211156108ce578384fd5b506108db8b828c01610757565b999c989b5096995094979396929594505050565b600060208284031215610900578081fd5b81358015158114610376578182fd5b60008060408385031215610921578182fd5b82359150602083013561093381610b6a565b809150509250929050565b60008060008060808587031215610953578384fd5b843561095e81610b6a565b9350602085013561096e81610b6a565b925060408501359150606085013567ffffffffffffffff811115610990578182fd5b61099c8782880161079e565b91505092959194509250565b6000806000606084860312156109bc578283fd5b83356109c781610b6a565b925060208401359150604084013567ffffffffffffffff8111156109e9578182fd5b6109f58682870161079e565b9150509250925092565b600060208284031215610a10578081fd5b5051919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452815b81811015610a6657602081850181015186830182015201610a4a565b81811115610a775782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038c811682528b811660208301528a81166040830152606082018a905261012060808301819052600091610aca8483018b8d610a17565b915083820360a0850152610adf82898b610a17565b961660c0840152505060e08101929092526101009091015298975050505050505050565b600060018060a01b038516825283602083015260606040830152610b2a6060830184610a41565b95945050505050565b600083825260406020830152610b4c6040830184610a41565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b7f57600080fd5b5056fea2646970667358221220732c1f970a27dd8999c4035da4e7bd7b45b115bbeea3198023bae52e86b4275864736f6c63430008030033",
  "deployedSourceMap": "329:4059:49:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2188:778;;;;;;:::i;:::-;;:::i;:::-;;712:236:134;;;;;;:::i;:::-;;:::i;:::-;;;7651:25:144;;;7639:2;7624:18;712:236:134;;;;;;;4027:241:49;;;;;;:::i;:::-;;:::i;4274:112::-;;;;;;:::i;:::-;;:::i;3801:104::-;;;;;;:::i;:::-;3866:17;:32;;-1:-1:-1;;3866:32:49;;;;;;;;;;3801:104;1411:771;;;;;;:::i;:::-;;:::i;3633:162::-;;;;;;:::i;:::-;;:::i;3911:110::-;;;;;;:::i;:::-;3979:20;:35;;;;;;;-1:-1:-1;;3979:35:49;;;;;;;;;3911:110;2972:242;;;;;;:::i;:::-;;:::i;3376:251::-;;;;;;:::i;:::-;;:::i;3220:150::-;;;;;;:::i;:::-;;:::i;2188:778::-;2412:20;;;;;;;2408:59;;;2448:8;;;2408:59;2477:13;665:10:121;2547:21:49;;-1:-1:-1;;;2547:21:49;;-1:-1:-1;;;;;5655:32:144;;;2547:21:49;;;5637:51:144;2477:37:49;;-1:-1:-1;2525:19:49;;2547:15;;;;;5610:18:144;;2547:21:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2694:19;;-1:-1:-1;;;2694:19:49;;-1:-1:-1;;;;;5655:32:144;;;2694:19:49;;;5637:51:144;2525:43:49;;-1:-1:-1;2674:17:49;;2694:15;;;;;5610:18:144;;2694:19:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2674:39;;2729:230;2763:8;2785:4;2803:2;2819:6;2839:8;;2861:12;;2895:5;2915:11;2940:9;2729:230;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2188:778;;;;;;;;;;;:::o;712:236:134:-;831:7;857:35;;;;;;;;;;;-1:-1:-1;;;;;857:44:134;;;;;;;;;;;;:84;;936:4;857:84;;;510:33;857:84;850:91;712:236;-1:-1:-1;;;712:236:134:o;4027:241:49:-;4191:28;;-1:-1:-1;;;4191:28:49;;-1:-1:-1;;;;;4191:10:49;;;;;:28;;4202:2;;4206:6;;4214:4;;4191:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4027:241;;;;:::o;4274:112::-;4355:24;;-1:-1:-1;;;4355:24:49;;-1:-1:-1;;;;;4355:10:49;;;;;:24;;4366:6;;4374:4;;4355:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4274:112;;;:::o;1411:771::-;1633:17;;;;1629:56;;;1666:8;;;1629:56;1695:13;665:10:121;1765:21:49;;-1:-1:-1;;;1765:21:49;;-1:-1:-1;;;;;5655:32:144;;;1765:21:49;;;5637:51:144;1695:37:49;;-1:-1:-1;1743:19:49;;1765:15;;;;;5610:18:144;;1765:21:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1912:19;;-1:-1:-1;;;1912:19:49;;-1:-1:-1;;;;;5655:32:144;;;1912:19:49;;;5637:51:144;1743:43:49;;-1:-1:-1;1892:17:49;;1912:15;;;;;5610:18:144;;1912:19:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1892:39;;1947:228;1979:8;2001:4;2019:2;2035:6;2055:8;;2077:12;;2111:5;2131:11;2156:9;1947:228;;;;;;;;;;;;;;;;:::i;3633:162::-;3696:8;;:92;;-1:-1:-1;;;3696:92:49;;3737:4;3696:92;;;6975:34:144;1370::49;7025:18:144;;;7018:34;-1:-1:-1;;;;;7088:15:144;;;7068:18;;;7061:43;3696:8:49;;;;;;;;:32;;6910:18:144;;3696:92:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3633:162;:::o;2972:242::-;3025:68;1273:31;3085:7;3025:28;:68::i;:::-;3127:4;-1:-1:-1;;;;;3146:15:49;;;;3142:66;;;3177:20;3192:4;3177:14;:20::i;:::-;2972:242;;:::o;3376:251::-;3432:71;1370:34;3495:7;3432:28;:71::i;:::-;3537:4;-1:-1:-1;;;;;3556:15:49;;;;3552:69;;;3587:23;3605:4;3587:17;:23::i;3220:150::-;3277:8;;:86;;-1:-1:-1;;;3277:86:49;;3318:4;3277:86;;;6975:34:144;1273:31:49;7025:18:144;;;7018:34;-1:-1:-1;;;;;7088:15:144;;;7068:18;;;7061:43;3277:8:49;;;;;;;;:32;;6910:18:144;;3277:86:49;6892:218:144;1183:163:134;1288:20;:35;;;;;;;;;;;-1:-1:-1;;;;;1288:44:134;;;;;;;;;;:51;;-1:-1:-1;;1288:51:134;1335:4;1288:51;;;1183:163::o;14:375:144:-;;;129:3;122:4;114:6;110:17;106:27;96:2;;154:8;144;137:26;96:2;-1:-1:-1;184:20:144;;227:18;216:30;;213:2;;;266:8;256;249:26;213:2;310:4;302:6;298:17;286:29;;362:3;355:4;346:6;338;334:19;330:30;327:39;324:2;;;379:1;376;369:12;324:2;86:303;;;;;:::o;394:738::-;;489:3;482:4;474:6;470:17;466:27;456:2;;511:5;504;497:20;456:2;551:6;538:20;577:18;614:2;610;607:10;604:2;;;620:18;;:::i;:::-;695:2;689:9;663:2;749:13;;-1:-1:-1;;745:22:144;;;769:2;741:31;737:40;725:53;;;793:18;;;813:22;;;790:46;787:2;;;839:18;;:::i;:::-;879:10;875:2;868:22;914:2;906:6;899:18;960:3;953:4;948:2;940:6;936:15;932:26;929:35;926:2;;;981:5;974;967:20;926:2;1049;1042:4;1034:6;1030:17;1023:4;1015:6;1011:17;998:54;1072:15;;;1089:4;1068:26;1061:41;;;;-1:-1:-1;1076:6:144;446:686;-1:-1:-1;;;446:686:144:o;1137:257::-;;1249:2;1237:9;1228:7;1224:23;1220:32;1217:2;;;1270:6;1262;1255:22;1217:2;1314:9;1301:23;1333:31;1358:5;1333:31;:::i;1399:1235::-;;;;;;;;;1634:3;1622:9;1613:7;1609:23;1605:33;1602:2;;;1656:6;1648;1641:22;1602:2;1700:9;1687:23;1719:31;1744:5;1719:31;:::i;:::-;1769:5;-1:-1:-1;1826:2:144;1811:18;;1798:32;1839:33;1798:32;1839:33;:::i;:::-;1891:7;-1:-1:-1;1950:2:144;1935:18;;1922:32;1963:33;1922:32;1963:33;:::i;:::-;2015:7;-1:-1:-1;2069:2:144;2054:18;;2041:32;;-1:-1:-1;2124:3:144;2109:19;;2096:33;2148:18;2178:14;;;2175:2;;;2210:6;2202;2195:22;2175:2;2254:58;2304:7;2295:6;2284:9;2280:22;2254:58;:::i;:::-;2331:8;;-1:-1:-1;2228:84:144;-1:-1:-1;2419:3:144;2404:19;;2391:33;;-1:-1:-1;2436:16:144;;;2433:2;;;2470:6;2462;2455:22;2433:2;;2514:60;2566:7;2555:8;2544:9;2540:24;2514:60;:::i;:::-;1592:1042;;;;-1:-1:-1;1592:1042:144;;-1:-1:-1;1592:1042:144;;;;;;2593:8;-1:-1:-1;;;1592:1042:144:o;2639:293::-;;2748:2;2736:9;2727:7;2723:23;2719:32;2716:2;;;2769:6;2761;2754:22;2716:2;2813:9;2800:23;2866:5;2859:13;2852:21;2845:5;2842:32;2832:2;;2893:6;2885;2878:22;2937:325;;;3066:2;3054:9;3045:7;3041:23;3037:32;3034:2;;;3087:6;3079;3072:22;3034:2;3128:9;3115:23;3105:33;;3188:2;3177:9;3173:18;3160:32;3201:31;3226:5;3201:31;:::i;:::-;3251:5;3241:15;;;3024:238;;;;;:::o;3267:702::-;;;;;3456:3;3444:9;3435:7;3431:23;3427:33;3424:2;;;3478:6;3470;3463:22;3424:2;3522:9;3509:23;3541:31;3566:5;3541:31;:::i;:::-;3591:5;-1:-1:-1;3648:2:144;3633:18;;3620:32;3661:33;3620:32;3661:33;:::i;:::-;3713:7;-1:-1:-1;3767:2:144;3752:18;;3739:32;;-1:-1:-1;3822:2:144;3807:18;;3794:32;3849:18;3838:30;;3835:2;;;3886:6;3878;3871:22;3835:2;3914:49;3955:7;3946:6;3935:9;3931:22;3914:49;:::i;:::-;3904:59;;;3414:555;;;;;;;:::o;3974:560::-;;;;4146:2;4134:9;4125:7;4121:23;4117:32;4114:2;;;4167:6;4159;4152:22;4114:2;4211:9;4198:23;4230:31;4255:5;4230:31;:::i;:::-;4280:5;-1:-1:-1;4332:2:144;4317:18;;4304:32;;-1:-1:-1;4387:2:144;4372:18;;4359:32;4414:18;4403:30;;4400:2;;;4451:6;4443;4436:22;4400:2;4479:49;4520:7;4511:6;4500:9;4496:22;4479:49;:::i;:::-;4469:59;;;4104:430;;;;;:::o;4539:194::-;;4662:2;4650:9;4641:7;4637:23;4633:32;4630:2;;;4683:6;4675;4668:22;4630:2;-1:-1:-1;4711:16:144;;4620:113;-1:-1:-1;4620:113:144:o;4738:268::-;;4826:6;4821:3;4814:19;4878:6;4871:5;4864:4;4859:3;4855:14;4842:43;4930:3;4923:4;4914:6;4909:3;4905:16;4901:27;4894:40;4995:4;4988:2;4984:7;4979:2;4971:6;4967:15;4963:29;4958:3;4954:39;4950:50;4943:57;;4804:202;;;;;:::o;5011:475::-;;5090:5;5084:12;5117:6;5112:3;5105:19;5142:3;5154:162;5168:6;5165:1;5162:13;5154:162;;;5230:4;5286:13;;;5282:22;;5276:29;5258:11;;;5254:20;;5247:59;5183:12;5154:162;;;5334:6;5331:1;5328:13;5325:2;;;5400:3;5393:4;5384:6;5379:3;5375:16;5371:27;5364:40;5325:2;-1:-1:-1;5468:2:144;5447:15;-1:-1:-1;;5443:29:144;5434:39;;;;5475:4;5430:50;;5060:426;-1:-1:-1;;5060:426:144:o;5699:1031::-;-1:-1:-1;;;;;6169:15:144;;;6151:34;;6221:15;;;6216:2;6201:18;;6194:43;6273:15;;;6268:2;6253:18;;6246:43;6320:2;6305:18;;6298:34;;;6101:3;6363;6348:19;;6341:31;;;5699:1031;;6395:61;6437:18;;;6429:6;6421;6395:61;:::i;:::-;6381:75;;6505:9;6497:6;6493:22;6487:3;6476:9;6472:19;6465:51;6533:49;6575:6;6567;6559;6533:49;:::i;:::-;6619:15;;6613:3;6598:19;;6591:44;-1:-1:-1;;6666:3:144;6651:19;;6644:35;;;;6710:3;6695:19;;;6688:36;6525:57;6081:649;-1:-1:-1;;;;;;;;6081:649:144:o;7115:385::-;;7347:1;7343;7338:3;7334:11;7330:19;7322:6;7318:32;7307:9;7300:51;7387:6;7382:2;7371:9;7367:18;7360:34;7430:2;7425;7414:9;7410:18;7403:30;7450:44;7490:2;7479:9;7475:18;7467:6;7450:44;:::i;:::-;7442:52;7290:210;-1:-1:-1;;;;;7290:210:144:o;7687:288::-;;7862:6;7851:9;7844:25;7905:2;7900;7889:9;7885:18;7878:30;7925:44;7965:2;7954:9;7950:18;7942:6;7925:44;:::i;:::-;7917:52;7834:141;-1:-1:-1;;;;7834:141:144:o;7980:127::-;8041:10;8036:3;8032:20;8029:1;8022:31;8072:4;8069:1;8062:15;8096:4;8093:1;8086:15;8112:131;-1:-1:-1;;;;;8187:31:144;;8177:42;;8167:2;;8233:1;8230;8223:12;8167:2;8157:86;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "canImplementInterfaceForAddress(bytes32,address)": {
        "notice": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "details": "Called by an {IERC777} token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed."
      },
      "tokensToSend(address,address,address,uint256,bytes,bytes)": {
        "details": "Called by an {IERC777} token contract whenever a registered holder's (`from`) tokens are about to be moved or destroyed. The type of operation is conveyed by `to` being the zero address or not. This call occurs _before_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the pre-operation state. This function may revert to prevent the operation from being executed."
      }
    },
    "version": 1
  },
  "offset": [
    329,
    4388
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75AB9782 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x75AB9782 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0xA8BADAA5 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0xC97E18FC EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xD2DE6474 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xE0EB2180 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0xE1ECBD30 EQ PUSH2 0x1A2 JUMPI PUSH2 0xA8 JUMP JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x249CB3FA EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0x3836EF89 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x44D17187 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x4E4AE5A5 EQ PUSH2 0x10D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC0 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD5 PUSH2 0xD0 CALLDATASIZE PUSH1 0x4 PUSH2 0x90F JUMP JUMPDEST PUSH2 0x325 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC0 PUSH2 0xF5 CALLDATASIZE PUSH1 0x4 PUSH2 0x93E JUMP JUMPDEST PUSH2 0x37D JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x8EF JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x44A JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0x825 JUMP JUMPDEST PUSH2 0x5A0 JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x8EF JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH2 0x100 MUL PUSH2 0xFF00 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x825 JUMP JUMPDEST PUSH2 0x636 JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x825 JUMP JUMPDEST PUSH2 0x67F JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x825 JUMP JUMPDEST PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x228 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x9FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x9FF JUMP JUMPDEST SWAP1 POP PUSH32 0x47E915878C47F3EC4D7FF646A2BECB229F64FD2ABE4D2B5E2BB4275B0CF50D4E DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0x310 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x354 JUMPI PUSH1 0x0 PUSH2 0x376 JUMP JUMPDEST PUSH32 0xA2EF4600D742022D532D4747CB3547474667D6F13804902513B2EC01C848F4B4 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4DECDDE3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x9BD9BBC6 SWAP1 PUSH2 0x3AD SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xB03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFE9D9303 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xFE9D9303 SWAP1 PUSH2 0x413 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xB33 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x441 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DC SWAP2 SWAP1 PUSH2 0x9FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x537 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x55B SWAP2 SWAP1 PUSH2 0x9FF JUMP JUMPDEST SWAP1 POP PUSH32 0xAA3E88ACA472E90221DAF7D3D601ABAFB62B120319089D7A2C2F63588DA85529 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0x310 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA8C JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x29965A1D PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0xB281FC8C12954D22544DB45DE3159A39272895B169A852B314F9CC762E44C53B PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH3 0x10000 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x29965A1D SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x61B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x62F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x660 PUSH32 0x29DDB589B1FB5FC7CF394961C1ADF5F8C6454761ADF795E67FE149F658ABE895 DUP3 PUSH2 0x729 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP2 EQ ISZERO PUSH2 0x67B JUMPI PUSH2 0x67B DUP2 PUSH2 0x6C4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6A9 PUSH32 0xB281FC8C12954D22544DB45DE3159A39272895B169A852B314F9CC762E44C53B DUP3 PUSH2 0x729 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP2 EQ ISZERO PUSH2 0x67B JUMPI PUSH2 0x67B DUP2 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x29965A1D PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x29DDB589B1FB5FC7CF394961C1ADF5F8C6454761ADF795E67FE149F658ABE895 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH3 0x10000 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x29965A1D SWAP1 PUSH1 0x64 ADD PUSH2 0x601 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x768 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x77F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7AE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7C9 JUMPI PUSH2 0x7C9 PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x7F1 JUMPI PUSH2 0x7F1 PUSH2 0xB54 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x809 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP3 DUP4 ADD PUSH1 0x20 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x836 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x376 DUP2 PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x85C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x867 DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x877 DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x887 DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x8AA JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x8B6 DUP13 DUP4 DUP14 ADD PUSH2 0x757 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8CE JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x8DB DUP12 DUP3 DUP13 ADD PUSH2 0x757 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x900 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x376 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x921 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x933 DUP2 PUSH2 0xB6A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x953 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x95E DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x96E DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x990 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x99C DUP8 DUP3 DUP9 ADD PUSH2 0x79E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9BC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9C7 DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9E9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9F5 DUP7 DUP3 DUP8 ADD PUSH2 0x79E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA10 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA66 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xA4A JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA77 JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND DUP3 MSTORE DUP12 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP11 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP11 SWAP1 MSTORE PUSH2 0x120 PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH2 0xACA DUP5 DUP4 ADD DUP12 DUP14 PUSH2 0xA17 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0xADF DUP3 DUP10 DUP12 PUSH2 0xA17 JUMP JUMPDEST SWAP7 AND PUSH1 0xC0 DUP5 ADD MSTORE POP POP PUSH1 0xE0 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x100 SWAP1 SWAP2 ADD MSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB2A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xA41 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xB4C PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xA41 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x2C1F970A27DD8999C4035DA4E7BD7B45B115BBEE LOG3 NOT DUP1 0x23 0xBA 0xE5 0x2E DUP7 0xB4 0x27 PC PUSH5 0x736F6C6343 STOP ADDMOD SUB STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        329,
        4388
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "5": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "CALLVALUE",
      "path": "49"
    },
    "6": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "7": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "8": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "12": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "REVERT",
      "path": "49"
    },
    "16": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "17": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "POP",
      "path": "49"
    },
    "18": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "21": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "LT",
      "path": "49"
    },
    "22": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xA8"
    },
    "25": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "26": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "CALLDATALOAD",
      "path": "49"
    },
    "29": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "SHR",
      "path": "49"
    },
    "32": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "33": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x75AB9782"
    },
    "38": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "GT",
      "path": "49"
    },
    "39": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "43": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "44": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x75AB9782"
    },
    "49": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "50": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x12E"
    },
    "53": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "54": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "55": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xA8BADAA5"
    },
    "60": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "61": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x141"
    },
    "64": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "65": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "66": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xC97E18FC"
    },
    "71": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "72": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x154"
    },
    "75": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "76": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "77": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xD2DE6474"
    },
    "82": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "83": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x17C"
    },
    "86": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "87": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "88": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xE0EB2180"
    },
    "93": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "94": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x18F"
    },
    "97": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "98": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "99": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xE1ECBD30"
    },
    "104": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "105": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x1A2"
    },
    "108": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "109": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xA8"
    },
    "112": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMP",
      "path": "49"
    },
    "113": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "114": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "115": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x23DE29"
    },
    "119": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "120": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xAD"
    },
    "123": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "124": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "125": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x249CB3FA"
    },
    "130": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "131": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC2"
    },
    "134": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "135": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "136": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x3836EF89"
    },
    "141": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "142": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xE7"
    },
    "145": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "146": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "147": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x44D17187"
    },
    "152": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "153": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xFA"
    },
    "156": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "157": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "158": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x4E4AE5A5"
    },
    "163": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "EQ",
      "path": "49"
    },
    "164": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x10D"
    },
    "167": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "168": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "169": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "171": {
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "DUP1",
      "path": "49"
    },
    "172": {
      "first_revert": true,
      "fn": null,
      "offset": [
        329,
        4388
      ],
      "op": "REVERT",
      "path": "49"
    },
    "173": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "174": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC0"
    },
    "177": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xBB"
    },
    "180": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "181": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "183": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x841"
    },
    "186": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "i",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMP",
      "path": "49"
    },
    "187": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "188": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x1B5"
    },
    "191": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "i",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMP",
      "path": "49"
    },
    "192": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "193": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "STOP",
      "path": "49"
    },
    "194": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "JUMPDEST",
      "path": "134"
    },
    "195": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "PUSH2",
      "path": "134",
      "value": "0xD5"
    },
    "198": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "PUSH2",
      "path": "134",
      "value": "0xD0"
    },
    "201": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "CALLDATASIZE",
      "path": "134"
    },
    "202": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0x4"
    },
    "204": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "PUSH2",
      "path": "134",
      "value": "0x90F"
    },
    "207": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "jump": "i",
      "offset": [
        712,
        948
      ],
      "op": "JUMP",
      "path": "134"
    },
    "208": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "JUMPDEST",
      "path": "134"
    },
    "209": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "PUSH2",
      "path": "134",
      "value": "0x325"
    },
    "212": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "jump": "i",
      "offset": [
        712,
        948
      ],
      "op": "JUMP",
      "path": "134"
    },
    "213": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "JUMPDEST",
      "path": "134"
    },
    "214": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0x40"
    },
    "216": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "MLOAD",
      "path": "134"
    },
    "217": {
      "op": "SWAP1"
    },
    "218": {
      "op": "DUP2"
    },
    "219": {
      "op": "MSTORE"
    },
    "220": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "222": {
      "op": "ADD"
    },
    "223": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0x40"
    },
    "225": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "MLOAD",
      "path": "134"
    },
    "226": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "DUP1",
      "path": "134"
    },
    "227": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "SWAP2",
      "path": "134"
    },
    "228": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "SUB",
      "path": "134"
    },
    "229": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "SWAP1",
      "path": "134"
    },
    "230": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "RETURN",
      "path": "134"
    },
    "231": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "232": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC0"
    },
    "235": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xF5"
    },
    "238": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "239": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "241": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x93E"
    },
    "244": {
      "fn": "ERC777SenderRecipientMock.send",
      "jump": "i",
      "offset": [
        4027,
        4268
      ],
      "op": "JUMP",
      "path": "49"
    },
    "245": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "246": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x37D"
    },
    "249": {
      "fn": "ERC777SenderRecipientMock.send",
      "jump": "i",
      "offset": [
        4027,
        4268
      ],
      "op": "JUMP",
      "path": "49"
    },
    "250": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "251": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC0"
    },
    "254": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x108"
    },
    "257": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "258": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "260": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x9A8"
    },
    "263": {
      "fn": "ERC777SenderRecipientMock.burn",
      "jump": "i",
      "offset": [
        4274,
        4386
      ],
      "op": "JUMP",
      "path": "49"
    },
    "264": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "265": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x3E5"
    },
    "268": {
      "fn": "ERC777SenderRecipientMock.burn",
      "jump": "i",
      "offset": [
        4274,
        4386
      ],
      "op": "JUMP",
      "path": "49"
    },
    "269": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "270": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC0"
    },
    "273": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x11B"
    },
    "276": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "277": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "279": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x8EF"
    },
    "282": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "jump": "i",
      "offset": [
        3801,
        3905
      ],
      "op": "JUMP",
      "path": "49"
    },
    "283": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "284": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3883
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 0,
      "value": "0x1"
    },
    "286": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "DUP1",
      "path": "49"
    },
    "287": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "288": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "290": {
      "op": "NOT"
    },
    "291": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "AND",
      "path": "49"
    },
    "292": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "293": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "294": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "295": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "296": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "297": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "298": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "OR",
      "path": "49"
    },
    "299": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "300": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "301": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "JUMP",
      "path": "49"
    },
    "302": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "303": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC0"
    },
    "306": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x13C"
    },
    "309": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "310": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "312": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x841"
    },
    "315": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "jump": "i",
      "offset": [
        1411,
        2182
      ],
      "op": "JUMP",
      "path": "49"
    },
    "316": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "317": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x44A"
    },
    "320": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "jump": "i",
      "offset": [
        1411,
        2182
      ],
      "op": "JUMP",
      "path": "49"
    },
    "321": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "322": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC0"
    },
    "325": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x14F"
    },
    "328": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "329": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "331": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x825"
    },
    "334": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "jump": "i",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMP",
      "path": "49"
    },
    "335": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "336": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x5A0"
    },
    "339": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "jump": "i",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMP",
      "path": "49"
    },
    "340": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "341": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC0"
    },
    "344": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x162"
    },
    "347": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "348": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "350": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x8EF"
    },
    "353": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "jump": "i",
      "offset": [
        3911,
        4021
      ],
      "op": "JUMP",
      "path": "49"
    },
    "354": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "355": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        3999
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 1,
      "value": "0x1"
    },
    "357": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "DUP1",
      "path": "49"
    },
    "358": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "359": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "360": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "361": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "362": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x100"
    },
    "365": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "MUL",
      "path": "49"
    },
    "366": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "369": {
      "op": "NOT"
    },
    "370": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "371": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "372": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "AND",
      "path": "49"
    },
    "373": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "374": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "375": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "376": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "OR",
      "path": "49"
    },
    "377": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "378": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "379": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "JUMP",
      "path": "49"
    },
    "380": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "381": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC0"
    },
    "384": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x18A"
    },
    "387": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "388": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "390": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x825"
    },
    "393": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "jump": "i",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMP",
      "path": "49"
    },
    "394": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "395": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x636"
    },
    "398": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "jump": "i",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMP",
      "path": "49"
    },
    "399": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "400": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC0"
    },
    "403": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x19D"
    },
    "406": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "407": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "409": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x825"
    },
    "412": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "jump": "i",
      "offset": [
        3376,
        3627
      ],
      "op": "JUMP",
      "path": "49"
    },
    "413": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "414": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x67F"
    },
    "417": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "jump": "i",
      "offset": [
        3376,
        3627
      ],
      "op": "JUMP",
      "path": "49"
    },
    "418": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "419": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xC0"
    },
    "422": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x1B0"
    },
    "425": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "426": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "428": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x825"
    },
    "431": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "jump": "i",
      "offset": [
        3220,
        3370
      ],
      "op": "JUMP",
      "path": "49"
    },
    "432": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "433": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x6C4"
    },
    "436": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "jump": "i",
      "offset": [
        3220,
        3370
      ],
      "op": "JUMP",
      "path": "49"
    },
    "437": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "438": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1"
    },
    "440": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "441": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x100"
    },
    "444": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "445": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "DIV",
      "path": "49"
    },
    "446": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0xFF"
    },
    "448": {
      "branch": 17,
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "AND",
      "path": "49"
    },
    "449": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2408,
        2467
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "450": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2408,
        2467
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x1CA"
    },
    "453": {
      "branch": 17,
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2408,
        2467
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "454": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2448,
        2456
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 2,
      "value": "0x0"
    },
    "456": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2448,
        2456
      ],
      "op": "DUP1",
      "path": "49"
    },
    "457": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2448,
        2456
      ],
      "op": "REVERT",
      "path": "49"
    },
    "458": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2408,
        2467
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "459": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2477,
        2490
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "461": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "121",
      "statement": 3
    },
    "462": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "464": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "465": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "470": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "472": {
      "op": "SHL"
    },
    "473": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP2",
      "path": "49"
    },
    "474": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "475": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "477": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "479": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "481": {
      "op": "SHL"
    },
    "482": {
      "op": "SUB"
    },
    "483": {
      "op": "DUP11"
    },
    "484": {
      "op": "DUP2"
    },
    "485": {
      "op": "AND"
    },
    "486": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "488": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP4",
      "path": "49"
    },
    "489": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ADD",
      "path": "49"
    },
    "490": {
      "op": "MSTORE"
    },
    "491": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2477,
        2514
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "492": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2477,
        2514
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "493": {
      "op": "POP"
    },
    "494": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2525,
        2544
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "496": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2525,
        2544
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "497": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2562
      ],
      "op": "DUP4",
      "path": "49"
    },
    "498": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2562
      ],
      "op": "AND",
      "path": "49"
    },
    "499": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2562
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "500": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2562
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x70A08231"
    },
    "505": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2562
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "506": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "508": {
      "op": "ADD"
    },
    "509": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "511": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "513": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "514": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "49"
    },
    "515": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP4",
      "path": "49"
    },
    "516": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "SUB",
      "path": "49"
    },
    "517": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP2",
      "path": "49"
    },
    "518": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP7",
      "path": "49"
    },
    "519": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "49"
    },
    "520": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "EXTCODESIZE",
      "path": "49"
    },
    "521": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "522": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "49"
    },
    "523": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "524": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x214"
    },
    "527": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "528": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "530": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "49"
    },
    "531": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "REVERT",
      "path": "49"
    },
    "532": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "533": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "49"
    },
    "534": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "GAS",
      "path": "49"
    },
    "535": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "STATICCALL",
      "path": "49"
    },
    "536": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "537": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "49"
    },
    "538": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "539": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x228"
    },
    "542": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "543": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "544": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "546": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "49"
    },
    "547": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "548": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "549": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "551": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "REVERT",
      "path": "49"
    },
    "552": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "553": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "49"
    },
    "554": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "49"
    },
    "555": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "49"
    },
    "556": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "49"
    },
    "557": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "559": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "560": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "561": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "563": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "NOT",
      "path": "49"
    },
    "564": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "566": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP3",
      "path": "49"
    },
    "567": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ADD",
      "path": "49"
    },
    "568": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "AND",
      "path": "49"
    },
    "569": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP3",
      "path": "49"
    },
    "570": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ADD",
      "path": "49"
    },
    "571": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "49"
    },
    "572": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "574": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "575": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "49"
    },
    "576": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP2",
      "path": "49"
    },
    "577": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ADD",
      "path": "49"
    },
    "578": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "579": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x24C"
    },
    "582": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "583": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "584": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x9FF"
    },
    "587": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "i",
      "offset": [
        2547,
        2568
      ],
      "op": "JUMP",
      "path": "49"
    },
    "588": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "589": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "591": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "592": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "597": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "599": {
      "op": "SHL"
    },
    "600": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP2",
      "path": "49"
    },
    "601": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "602": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "604": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "606": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "608": {
      "op": "SHL"
    },
    "609": {
      "op": "SUB"
    },
    "610": {
      "op": "DUP11"
    },
    "611": {
      "op": "DUP2"
    },
    "612": {
      "op": "AND"
    },
    "613": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "615": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP4",
      "path": "49"
    },
    "616": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ADD",
      "path": "49"
    },
    "617": {
      "op": "MSTORE"
    },
    "618": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2525,
        2568
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "619": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2525,
        2568
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "620": {
      "op": "POP"
    },
    "621": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2674,
        2691
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "623": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2674,
        2691
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "624": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2709
      ],
      "op": "DUP5",
      "path": "49"
    },
    "625": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2709
      ],
      "op": "AND",
      "path": "49"
    },
    "626": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2709
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "627": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2709
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x70A08231"
    },
    "632": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2709
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "633": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "635": {
      "op": "ADD"
    },
    "636": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "638": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "640": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "641": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "49"
    },
    "642": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP4",
      "path": "49"
    },
    "643": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "SUB",
      "path": "49"
    },
    "644": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP2",
      "path": "49"
    },
    "645": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP7",
      "path": "49"
    },
    "646": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "49"
    },
    "647": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "EXTCODESIZE",
      "path": "49"
    },
    "648": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "649": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "49"
    },
    "650": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "651": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x293"
    },
    "654": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "655": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "657": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "49"
    },
    "658": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "REVERT",
      "path": "49"
    },
    "659": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "660": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "49"
    },
    "661": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "GAS",
      "path": "49"
    },
    "662": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "STATICCALL",
      "path": "49"
    },
    "663": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "664": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "49"
    },
    "665": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "666": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x2A7"
    },
    "669": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "670": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "671": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "673": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "49"
    },
    "674": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "675": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "676": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "678": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "REVERT",
      "path": "49"
    },
    "679": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "680": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "49"
    },
    "681": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "49"
    },
    "682": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "49"
    },
    "683": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "49"
    },
    "684": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "686": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "687": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "688": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "690": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "NOT",
      "path": "49"
    },
    "691": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "693": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP3",
      "path": "49"
    },
    "694": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ADD",
      "path": "49"
    },
    "695": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "AND",
      "path": "49"
    },
    "696": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP3",
      "path": "49"
    },
    "697": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ADD",
      "path": "49"
    },
    "698": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "49"
    },
    "699": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "701": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "702": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "49"
    },
    "703": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP2",
      "path": "49"
    },
    "704": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ADD",
      "path": "49"
    },
    "705": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "706": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x2CB"
    },
    "709": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "710": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "711": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x9FF"
    },
    "714": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "i",
      "offset": [
        2694,
        2713
      ],
      "op": "JUMP",
      "path": "49"
    },
    "715": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "716": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2674,
        2713
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "717": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2674,
        2713
      ],
      "op": "POP",
      "path": "49"
    },
    "718": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "PUSH32",
      "path": "49",
      "statement": 4,
      "value": "0x47E915878C47F3EC4D7FF646A2BECB229F64FD2ABE4D2B5E2BB4275B0CF50D4E"
    },
    "751": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2763,
        2771
      ],
      "op": "DUP12",
      "path": "49"
    },
    "752": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2785,
        2789
      ],
      "op": "DUP12",
      "path": "49"
    },
    "753": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2803,
        2805
      ],
      "op": "DUP12",
      "path": "49"
    },
    "754": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2819,
        2825
      ],
      "op": "DUP12",
      "path": "49"
    },
    "755": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2839,
        2847
      ],
      "op": "DUP12",
      "path": "49"
    },
    "756": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2839,
        2847
      ],
      "op": "DUP12",
      "path": "49"
    },
    "757": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2861,
        2873
      ],
      "op": "DUP12",
      "path": "49"
    },
    "758": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2861,
        2873
      ],
      "op": "DUP12",
      "path": "49"
    },
    "759": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2895,
        2900
      ],
      "op": "DUP12",
      "path": "49"
    },
    "760": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2915,
        2926
      ],
      "op": "DUP12",
      "path": "49"
    },
    "761": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2940,
        2949
      ],
      "op": "DUP12",
      "path": "49"
    },
    "762": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "764": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "765": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x310"
    },
    "768": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP12",
      "path": "49"
    },
    "769": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP11",
      "path": "49"
    },
    "770": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP10",
      "path": "49"
    },
    "771": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP9",
      "path": "49"
    },
    "772": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP8",
      "path": "49"
    },
    "773": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP7",
      "path": "49"
    },
    "774": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP6",
      "path": "49"
    },
    "775": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP5",
      "path": "49"
    },
    "776": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "777": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "778": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "779": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "780": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xA8C"
    },
    "783": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "i",
      "offset": [
        2729,
        2959
      ],
      "op": "JUMP",
      "path": "49"
    },
    "784": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "785": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "787": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "788": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "DUP1",
      "path": "49"
    },
    "789": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "790": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SUB",
      "path": "49"
    },
    "791": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "792": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "LOG1",
      "path": "49"
    },
    "793": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "794": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "795": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "796": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "797": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "798": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "799": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "800": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "801": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "802": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "803": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "49"
    },
    "804": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "o",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMP",
      "path": "49"
    },
    "805": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "JUMPDEST",
      "path": "134"
    },
    "806": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        831,
        838
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0x0"
    },
    "808": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "DUP3",
      "path": "134",
      "statement": 5
    },
    "809": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "DUP2",
      "path": "134"
    },
    "810": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "MSTORE",
      "path": "134"
    },
    "811": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0x20"
    },
    "813": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "DUP2",
      "path": "134"
    },
    "814": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "DUP2",
      "path": "134"
    },
    "815": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "MSTORE",
      "path": "134"
    },
    "816": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0x40"
    },
    "818": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "DUP1",
      "path": "134"
    },
    "819": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "DUP4",
      "path": "134"
    },
    "820": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        892
      ],
      "op": "KECCAK256",
      "path": "134"
    },
    "821": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "823": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "825": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "827": {
      "op": "SHL"
    },
    "828": {
      "op": "SUB"
    },
    "829": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "DUP6",
      "path": "134"
    },
    "830": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "AND",
      "path": "134"
    },
    "831": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "DUP5",
      "path": "134"
    },
    "832": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "MSTORE",
      "path": "134"
    },
    "833": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "SWAP1",
      "path": "134"
    },
    "834": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "SWAP2",
      "path": "134"
    },
    "835": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "MSTORE",
      "path": "134"
    },
    "836": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "DUP2",
      "path": "134"
    },
    "837": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "KECCAK256",
      "path": "134"
    },
    "838": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "SLOAD",
      "path": "134"
    },
    "839": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0xFF"
    },
    "841": {
      "branch": 21,
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        901
      ],
      "op": "AND",
      "path": "134"
    },
    "842": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        941
      ],
      "op": "PUSH2",
      "path": "134",
      "value": "0x354"
    },
    "845": {
      "branch": 21,
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        941
      ],
      "op": "JUMPI",
      "path": "134"
    },
    "846": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        936,
        940
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0x0"
    },
    "848": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        941
      ],
      "op": "PUSH2",
      "path": "134",
      "value": "0x376"
    },
    "851": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        941
      ],
      "op": "JUMP",
      "path": "134"
    },
    "852": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        941
      ],
      "op": "JUMPDEST",
      "path": "134"
    },
    "853": {
      "offset": [
        510,
        543
      ],
      "op": "PUSH32",
      "path": "134",
      "value": "0xA2EF4600D742022D532D4747CB3547474667D6F13804902513B2EC01C848F4B4"
    },
    "886": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        857,
        941
      ],
      "op": "JUMPDEST",
      "path": "134"
    },
    "887": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        850,
        941
      ],
      "op": "SWAP4",
      "path": "134"
    },
    "888": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        712,
        948
      ],
      "op": "SWAP3",
      "path": "134"
    },
    "889": {
      "op": "POP"
    },
    "890": {
      "op": "POP"
    },
    "891": {
      "op": "POP"
    },
    "892": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "jump": "o",
      "offset": [
        712,
        948
      ],
      "op": "JUMP",
      "path": "134"
    },
    "893": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "894": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 6,
      "value": "0x40"
    },
    "896": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "897": {
      "op": "PUSH4",
      "value": "0x4DECDDE3"
    },
    "902": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "904": {
      "op": "SHL"
    },
    "905": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "DUP2",
      "path": "49"
    },
    "906": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "907": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "909": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "911": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "913": {
      "op": "SHL"
    },
    "914": {
      "op": "SUB"
    },
    "915": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4201
      ],
      "op": "DUP6",
      "path": "49"
    },
    "916": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4201
      ],
      "op": "AND",
      "path": "49"
    },
    "917": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4201
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "918": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4201
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x9BD9BBC6"
    },
    "923": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4201
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "924": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x3AD"
    },
    "927": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "928": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4202,
        4204
      ],
      "op": "DUP7",
      "path": "49"
    },
    "929": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4202,
        4204
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "930": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4206,
        4212
      ],
      "op": "DUP7",
      "path": "49"
    },
    "931": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4206,
        4212
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "932": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4214,
        4218
      ],
      "op": "DUP7",
      "path": "49"
    },
    "933": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4214,
        4218
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "934": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "936": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "ADD",
      "path": "49"
    },
    "937": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xB03"
    },
    "940": {
      "fn": "ERC777SenderRecipientMock.send",
      "jump": "i",
      "offset": [
        4191,
        4219
      ],
      "op": "JUMP",
      "path": "49"
    },
    "941": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "942": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "944": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "946": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "947": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "DUP1",
      "path": "49"
    },
    "948": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "DUP4",
      "path": "49"
    },
    "949": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "SUB",
      "path": "49"
    },
    "950": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "DUP2",
      "path": "49"
    },
    "951": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "953": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "DUP8",
      "path": "49"
    },
    "954": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "DUP1",
      "path": "49"
    },
    "955": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "EXTCODESIZE",
      "path": "49"
    },
    "956": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "957": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "DUP1",
      "path": "49"
    },
    "958": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "959": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x3C7"
    },
    "962": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "963": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "965": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "DUP1",
      "path": "49"
    },
    "966": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "REVERT",
      "path": "49"
    },
    "967": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "968": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "POP",
      "path": "49"
    },
    "969": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "GAS",
      "path": "49"
    },
    "970": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "CALL",
      "path": "49"
    },
    "971": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "972": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "DUP1",
      "path": "49"
    },
    "973": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "974": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x3DB"
    },
    "977": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "978": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "979": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "981": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "DUP1",
      "path": "49"
    },
    "982": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "983": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "984": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "986": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "REVERT",
      "path": "49"
    },
    "987": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "988": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "POP",
      "path": "49"
    },
    "989": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "POP",
      "path": "49"
    },
    "990": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "POP",
      "path": "49"
    },
    "991": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4191,
        4219
      ],
      "op": "POP",
      "path": "49"
    },
    "992": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "POP",
      "path": "49"
    },
    "993": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "POP",
      "path": "49"
    },
    "994": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "POP",
      "path": "49"
    },
    "995": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4268
      ],
      "op": "POP",
      "path": "49"
    },
    "996": {
      "fn": "ERC777SenderRecipientMock.send",
      "jump": "o",
      "offset": [
        4027,
        4268
      ],
      "op": "JUMP",
      "path": "49"
    },
    "997": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "998": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 7,
      "value": "0x40"
    },
    "1000": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1001": {
      "op": "PUSH4",
      "value": "0xFE9D9303"
    },
    "1006": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1008": {
      "op": "SHL"
    },
    "1009": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1010": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1011": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1013": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1015": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1017": {
      "op": "SHL"
    },
    "1018": {
      "op": "SUB"
    },
    "1019": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4365
      ],
      "op": "DUP5",
      "path": "49"
    },
    "1020": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4365
      ],
      "op": "AND",
      "path": "49"
    },
    "1021": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4365
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1022": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4365
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xFE9D9303"
    },
    "1027": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4365
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1028": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x413"
    },
    "1031": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1032": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4366,
        4372
      ],
      "op": "DUP6",
      "path": "49"
    },
    "1033": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4366,
        4372
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1034": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4374,
        4378
      ],
      "op": "DUP6",
      "path": "49"
    },
    "1035": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4374,
        4378
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1036": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "1038": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "ADD",
      "path": "49"
    },
    "1039": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xB33"
    },
    "1042": {
      "fn": "ERC777SenderRecipientMock.burn",
      "jump": "i",
      "offset": [
        4355,
        4379
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1043": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1044": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1046": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1048": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1049": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1050": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1051": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "SUB",
      "path": "49"
    },
    "1052": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1053": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1055": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "DUP8",
      "path": "49"
    },
    "1056": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1057": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "EXTCODESIZE",
      "path": "49"
    },
    "1058": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1059": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1060": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1061": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x42D"
    },
    "1064": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1065": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1067": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1068": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1069": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1070": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "POP",
      "path": "49"
    },
    "1071": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "GAS",
      "path": "49"
    },
    "1072": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "CALL",
      "path": "49"
    },
    "1073": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1074": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1075": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1076": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x441"
    },
    "1079": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1080": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1081": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1083": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1084": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "1085": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1086": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1088": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1089": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1090": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "POP",
      "path": "49"
    },
    "1091": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "POP",
      "path": "49"
    },
    "1092": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "POP",
      "path": "49"
    },
    "1093": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4355,
        4379
      ],
      "op": "POP",
      "path": "49"
    },
    "1094": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "POP",
      "path": "49"
    },
    "1095": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "POP",
      "path": "49"
    },
    "1096": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4274,
        4386
      ],
      "op": "POP",
      "path": "49"
    },
    "1097": {
      "fn": "ERC777SenderRecipientMock.burn",
      "jump": "o",
      "offset": [
        4274,
        4386
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1098": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1099": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1633,
        1650
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1"
    },
    "1101": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1633,
        1650
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1102": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1633,
        1650
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0xFF"
    },
    "1104": {
      "branch": 18,
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1633,
        1650
      ],
      "op": "AND",
      "path": "49"
    },
    "1105": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1629,
        1685
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1106": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1629,
        1685
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x45A"
    },
    "1109": {
      "branch": 18,
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1629,
        1685
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1110": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1666,
        1674
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 8,
      "value": "0x0"
    },
    "1112": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1666,
        1674
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1113": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1666,
        1674
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1114": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1629,
        1685
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1115": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1695,
        1708
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1117": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "121"
    },
    "1118": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1120": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1121": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "1126": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1128": {
      "op": "SHL"
    },
    "1129": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1130": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1131": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1133": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1135": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1137": {
      "op": "SHL"
    },
    "1138": {
      "op": "SUB"
    },
    "1139": {
      "op": "DUP11"
    },
    "1140": {
      "op": "DUP2"
    },
    "1141": {
      "op": "AND"
    },
    "1142": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "1144": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1145": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ADD",
      "path": "49"
    },
    "1146": {
      "op": "MSTORE"
    },
    "1147": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1695,
        1732
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1148": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1695,
        1732
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1149": {
      "op": "POP"
    },
    "1150": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1743,
        1762
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1152": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1743,
        1762
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1153": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1780
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1154": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1780
      ],
      "op": "AND",
      "path": "49"
    },
    "1155": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1780
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1156": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1780
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x70A08231"
    },
    "1161": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1780
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1162": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1164": {
      "op": "ADD"
    },
    "1165": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1167": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1169": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1170": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1171": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1172": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "SUB",
      "path": "49"
    },
    "1173": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1174": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP7",
      "path": "49"
    },
    "1175": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1176": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "EXTCODESIZE",
      "path": "49"
    },
    "1177": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1178": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1179": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1180": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x4A4"
    },
    "1183": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1184": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1186": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1187": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1188": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1189": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "49"
    },
    "1190": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "GAS",
      "path": "49"
    },
    "1191": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "STATICCALL",
      "path": "49"
    },
    "1192": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1193": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1194": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1195": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x4B8"
    },
    "1198": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1199": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1200": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1202": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1203": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "1204": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1205": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1207": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1208": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1209": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "49"
    },
    "1210": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "49"
    },
    "1211": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "49"
    },
    "1212": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "49"
    },
    "1213": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1215": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1216": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1217": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "1219": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "NOT",
      "path": "49"
    },
    "1220": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "1222": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1223": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ADD",
      "path": "49"
    },
    "1224": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "AND",
      "path": "49"
    },
    "1225": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1226": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ADD",
      "path": "49"
    },
    "1227": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1228": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1230": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1231": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "49"
    },
    "1232": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1233": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ADD",
      "path": "49"
    },
    "1234": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1235": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x4DC"
    },
    "1238": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1239": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1240": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x9FF"
    },
    "1243": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "jump": "i",
      "offset": [
        1765,
        1786
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1244": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1245": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1247": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1248": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "1253": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1255": {
      "op": "SHL"
    },
    "1256": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1257": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1258": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1260": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1262": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1264": {
      "op": "SHL"
    },
    "1265": {
      "op": "SUB"
    },
    "1266": {
      "op": "DUP11"
    },
    "1267": {
      "op": "DUP2"
    },
    "1268": {
      "op": "AND"
    },
    "1269": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "1271": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1272": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ADD",
      "path": "49"
    },
    "1273": {
      "op": "MSTORE"
    },
    "1274": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1743,
        1786
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1275": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1743,
        1786
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1276": {
      "op": "POP"
    },
    "1277": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1892,
        1909
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1279": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1892,
        1909
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1280": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1927
      ],
      "op": "DUP5",
      "path": "49"
    },
    "1281": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1927
      ],
      "op": "AND",
      "path": "49"
    },
    "1282": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1927
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1283": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1927
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x70A08231"
    },
    "1288": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1927
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1289": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1291": {
      "op": "ADD"
    },
    "1292": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1294": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1296": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1297": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1298": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1299": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "SUB",
      "path": "49"
    },
    "1300": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1301": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP7",
      "path": "49"
    },
    "1302": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1303": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "EXTCODESIZE",
      "path": "49"
    },
    "1304": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1305": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1306": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1307": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x523"
    },
    "1310": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1311": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1313": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1314": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1315": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1316": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "49"
    },
    "1317": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "GAS",
      "path": "49"
    },
    "1318": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "STATICCALL",
      "path": "49"
    },
    "1319": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1320": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1321": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1322": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x537"
    },
    "1325": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1326": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1327": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1329": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1330": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "1331": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1332": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1334": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1335": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1336": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "49"
    },
    "1337": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "49"
    },
    "1338": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "49"
    },
    "1339": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "49"
    },
    "1340": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1342": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1343": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1344": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "1346": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "NOT",
      "path": "49"
    },
    "1347": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "1349": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1350": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ADD",
      "path": "49"
    },
    "1351": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "AND",
      "path": "49"
    },
    "1352": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1353": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ADD",
      "path": "49"
    },
    "1354": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1355": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1357": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1358": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "49"
    },
    "1359": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1360": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ADD",
      "path": "49"
    },
    "1361": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1362": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x55B"
    },
    "1365": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1366": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1367": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x9FF"
    },
    "1370": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "jump": "i",
      "offset": [
        1912,
        1931
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1371": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1372": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1892,
        1931
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1373": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1892,
        1931
      ],
      "op": "POP",
      "path": "49"
    },
    "1374": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "PUSH32",
      "path": "49",
      "statement": 9,
      "value": "0xAA3E88ACA472E90221DAF7D3D601ABAFB62B120319089D7A2C2F63588DA85529"
    },
    "1407": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1979,
        1987
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1408": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2001,
        2005
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1409": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2019,
        2021
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1410": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2035,
        2041
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1411": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2055,
        2063
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1412": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2055,
        2063
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1413": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2077,
        2089
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1414": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2077,
        2089
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1415": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2111,
        2116
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1416": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2131,
        2142
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1417": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2156,
        2165
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1418": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1420": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1421": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x310"
    },
    "1424": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP12",
      "path": "49"
    },
    "1425": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP11",
      "path": "49"
    },
    "1426": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP10",
      "path": "49"
    },
    "1427": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP9",
      "path": "49"
    },
    "1428": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP8",
      "path": "49"
    },
    "1429": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP7",
      "path": "49"
    },
    "1430": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP6",
      "path": "49"
    },
    "1431": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP5",
      "path": "49"
    },
    "1432": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "1433": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1434": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1435": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1436": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0xA8C"
    },
    "1439": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "jump": "i",
      "offset": [
        1947,
        2175
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1440": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1441": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 10,
      "value": "0x1"
    },
    "1443": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1444": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1446": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1447": {
      "op": "PUSH4",
      "value": "0x29965A1D"
    },
    "1452": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1454": {
      "op": "SHL"
    },
    "1455": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1456": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1457": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3737,
        3741
      ],
      "op": "ADDRESS",
      "path": "49"
    },
    "1458": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "1460": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1461": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "ADD",
      "path": "49"
    },
    "1462": {
      "op": "MSTORE"
    },
    "1463": {
      "offset": [
        1370,
        1404
      ],
      "op": "PUSH32",
      "path": "49",
      "value": "0xB281FC8C12954D22544DB45DE3159A39272895B169A852B314F9CC762E44C53B"
    },
    "1496": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1498": {
      "op": "DUP3"
    },
    "1499": {
      "op": "ADD"
    },
    "1500": {
      "op": "MSTORE"
    },
    "1501": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1503": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1505": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1507": {
      "op": "SHL"
    },
    "1508": {
      "op": "SUB"
    },
    "1509": {
      "op": "DUP4"
    },
    "1510": {
      "op": "DUP2"
    },
    "1511": {
      "op": "AND"
    },
    "1512": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1514": {
      "op": "DUP4"
    },
    "1515": {
      "op": "ADD"
    },
    "1516": {
      "op": "MSTORE"
    },
    "1517": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x10000"
    },
    "1521": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1522": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1523": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "DIV",
      "path": "49"
    },
    "1524": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1525": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1526": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "AND",
      "path": "49"
    },
    "1527": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1528": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3728
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x29965A1D"
    },
    "1533": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3728
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1534": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1536": {
      "op": "ADD"
    },
    "1537": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1538": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1540": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1542": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1543": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1544": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1545": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "SUB",
      "path": "49"
    },
    "1546": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1547": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1549": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP8",
      "path": "49"
    },
    "1550": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1551": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "EXTCODESIZE",
      "path": "49"
    },
    "1552": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1553": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1554": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1555": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x61B"
    },
    "1558": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1559": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1561": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1562": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1563": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1564": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "POP",
      "path": "49"
    },
    "1565": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "GAS",
      "path": "49"
    },
    "1566": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "CALL",
      "path": "49"
    },
    "1567": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1568": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1569": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1570": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x62F"
    },
    "1573": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1574": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1575": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1577": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1578": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "1579": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1580": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1582": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1583": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1584": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "POP",
      "path": "49"
    },
    "1585": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "POP",
      "path": "49"
    },
    "1586": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "POP",
      "path": "49"
    },
    "1587": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "POP",
      "path": "49"
    },
    "1588": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "POP",
      "path": "49"
    },
    "1589": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "jump": "o",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1590": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1591": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3025,
        3093
      ],
      "op": "PUSH2",
      "path": "49",
      "statement": 11,
      "value": "0x660"
    },
    "1594": {
      "offset": [
        1273,
        1304
      ],
      "op": "PUSH32",
      "path": "49",
      "value": "0x29DDB589B1FB5FC7CF394961C1ADF5F8C6454761ADF795E67FE149F658ABE895"
    },
    "1627": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3085,
        3092
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1628": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3025,
        3053
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x729"
    },
    "1631": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "jump": "i",
      "offset": [
        3025,
        3093
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1632": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3025,
        3093
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1633": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3127,
        3131
      ],
      "op": "ADDRESS",
      "path": "49"
    },
    "1634": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1636": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1638": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1640": {
      "op": "SHL"
    },
    "1641": {
      "op": "SUB"
    },
    "1642": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3146,
        3161
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1643": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3146,
        3161
      ],
      "op": "AND",
      "path": "49"
    },
    "1644": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3146,
        3161
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1645": {
      "branch": 19,
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3146,
        3161
      ],
      "op": "EQ",
      "path": "49"
    },
    "1646": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3142,
        3208
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1647": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3142,
        3208
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x67B"
    },
    "1650": {
      "branch": 19,
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3142,
        3208
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1651": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3177,
        3197
      ],
      "op": "PUSH2",
      "path": "49",
      "statement": 12,
      "value": "0x67B"
    },
    "1654": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3192,
        3196
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1655": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3177,
        3191
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x6C4"
    },
    "1658": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "jump": "i",
      "offset": [
        3177,
        3197
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1659": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3177,
        3197
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1660": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "POP",
      "path": "49"
    },
    "1661": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "POP",
      "path": "49"
    },
    "1662": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "jump": "o",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1663": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1664": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3432,
        3503
      ],
      "op": "PUSH2",
      "path": "49",
      "statement": 13,
      "value": "0x6A9"
    },
    "1667": {
      "offset": [
        1370,
        1404
      ],
      "op": "PUSH32",
      "path": "49",
      "value": "0xB281FC8C12954D22544DB45DE3159A39272895B169A852B314F9CC762E44C53B"
    },
    "1700": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3495,
        3502
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1701": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3432,
        3460
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x729"
    },
    "1704": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "jump": "i",
      "offset": [
        3432,
        3503
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1705": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3432,
        3503
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1706": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3537,
        3541
      ],
      "op": "ADDRESS",
      "path": "49"
    },
    "1707": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1709": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1711": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1713": {
      "op": "SHL"
    },
    "1714": {
      "op": "SUB"
    },
    "1715": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3556,
        3571
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1716": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3556,
        3571
      ],
      "op": "AND",
      "path": "49"
    },
    "1717": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3556,
        3571
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1718": {
      "branch": 20,
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3556,
        3571
      ],
      "op": "EQ",
      "path": "49"
    },
    "1719": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3552,
        3621
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1720": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3552,
        3621
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x67B"
    },
    "1723": {
      "branch": 20,
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3552,
        3621
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1724": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3587,
        3610
      ],
      "op": "PUSH2",
      "path": "49",
      "statement": 14,
      "value": "0x67B"
    },
    "1727": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3605,
        3609
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1728": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3587,
        3604
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x5A0"
    },
    "1731": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "jump": "i",
      "offset": [
        3587,
        3610
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1732": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1733": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 15,
      "value": "0x1"
    },
    "1735": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1736": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1738": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1739": {
      "op": "PUSH4",
      "value": "0x29965A1D"
    },
    "1744": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1746": {
      "op": "SHL"
    },
    "1747": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1748": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1749": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3318,
        3322
      ],
      "op": "ADDRESS",
      "path": "49"
    },
    "1750": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "1752": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1753": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "ADD",
      "path": "49"
    },
    "1754": {
      "op": "MSTORE"
    },
    "1755": {
      "offset": [
        1273,
        1304
      ],
      "op": "PUSH32",
      "path": "49",
      "value": "0x29DDB589B1FB5FC7CF394961C1ADF5F8C6454761ADF795E67FE149F658ABE895"
    },
    "1788": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1790": {
      "op": "DUP3"
    },
    "1791": {
      "op": "ADD"
    },
    "1792": {
      "op": "MSTORE"
    },
    "1793": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1795": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1797": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1799": {
      "op": "SHL"
    },
    "1800": {
      "op": "SUB"
    },
    "1801": {
      "op": "DUP4"
    },
    "1802": {
      "op": "DUP2"
    },
    "1803": {
      "op": "AND"
    },
    "1804": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1806": {
      "op": "DUP4"
    },
    "1807": {
      "op": "ADD"
    },
    "1808": {
      "op": "MSTORE"
    },
    "1809": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x10000"
    },
    "1813": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1814": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1815": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "DIV",
      "path": "49"
    },
    "1816": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1817": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1818": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "AND",
      "path": "49"
    },
    "1819": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1820": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3309
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x29965A1D"
    },
    "1825": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3309
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1826": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1828": {
      "op": "ADD"
    },
    "1829": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x601"
    },
    "1832": {
      "op": "JUMP"
    },
    "1833": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1183,
        1346
      ],
      "op": "JUMPDEST",
      "path": "134"
    },
    "1834": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1308
      ],
      "op": "PUSH1",
      "path": "134",
      "statement": 16,
      "value": "0x0"
    },
    "1836": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "SWAP2",
      "path": "134"
    },
    "1837": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "DUP3",
      "path": "134"
    },
    "1838": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "MSTORE",
      "path": "134"
    },
    "1839": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0x20"
    },
    "1841": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "DUP3",
      "path": "134"
    },
    "1842": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "DUP2",
      "path": "134"
    },
    "1843": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "MSTORE",
      "path": "134"
    },
    "1844": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0x40"
    },
    "1846": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "DUP1",
      "path": "134"
    },
    "1847": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "DUP5",
      "path": "134"
    },
    "1848": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1323
      ],
      "op": "KECCAK256",
      "path": "134"
    },
    "1849": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1851": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1853": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1855": {
      "op": "SHL"
    },
    "1856": {
      "op": "SUB"
    },
    "1857": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1332
      ],
      "op": "SWAP1",
      "path": "134"
    },
    "1858": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1332
      ],
      "op": "SWAP4",
      "path": "134"
    },
    "1859": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1332
      ],
      "op": "AND",
      "path": "134"
    },
    "1860": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1332
      ],
      "op": "DUP5",
      "path": "134"
    },
    "1861": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1332
      ],
      "op": "MSTORE",
      "path": "134"
    },
    "1862": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1332
      ],
      "op": "SWAP2",
      "path": "134"
    },
    "1863": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1332
      ],
      "op": "SWAP1",
      "path": "134"
    },
    "1864": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1332
      ],
      "op": "MSTORE",
      "path": "134"
    },
    "1865": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1332
      ],
      "op": "SWAP1",
      "path": "134"
    },
    "1866": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1332
      ],
      "op": "KECCAK256",
      "path": "134"
    },
    "1867": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1339
      ],
      "op": "DUP1",
      "path": "134"
    },
    "1868": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1339
      ],
      "op": "SLOAD",
      "path": "134"
    },
    "1869": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1871": {
      "op": "NOT"
    },
    "1872": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1339
      ],
      "op": "AND",
      "path": "134"
    },
    "1873": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1335,
        1339
      ],
      "op": "PUSH1",
      "path": "134",
      "value": "0x1"
    },
    "1875": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1339
      ],
      "op": "OR",
      "path": "134"
    },
    "1876": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1339
      ],
      "op": "SWAP1",
      "path": "134"
    },
    "1877": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1288,
        1339
      ],
      "op": "SSTORE",
      "path": "134"
    },
    "1878": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "jump": "o",
      "offset": [
        1183,
        1346
      ],
      "op": "JUMP",
      "path": "134"
    },
    "1879": {
      "op": "JUMPDEST"
    },
    "1880": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1882": {
      "op": "DUP1"
    },
    "1883": {
      "op": "DUP4"
    },
    "1884": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1886": {
      "op": "DUP5"
    },
    "1887": {
      "op": "ADD"
    },
    "1888": {
      "op": "SLT"
    },
    "1889": {
      "op": "PUSH2",
      "value": "0x768"
    },
    "1892": {
      "op": "JUMPI"
    },
    "1893": {
      "op": "DUP2"
    },
    "1894": {
      "op": "DUP3"
    },
    "1895": {
      "op": "REVERT"
    },
    "1896": {
      "op": "JUMPDEST"
    },
    "1897": {
      "op": "POP"
    },
    "1898": {
      "op": "DUP2"
    },
    "1899": {
      "op": "CALLDATALOAD"
    },
    "1900": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1909": {
      "op": "DUP2"
    },
    "1910": {
      "op": "GT"
    },
    "1911": {
      "op": "ISZERO"
    },
    "1912": {
      "op": "PUSH2",
      "value": "0x77F"
    },
    "1915": {
      "op": "JUMPI"
    },
    "1916": {
      "op": "DUP2"
    },
    "1917": {
      "op": "DUP3"
    },
    "1918": {
      "op": "REVERT"
    },
    "1919": {
      "op": "JUMPDEST"
    },
    "1920": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1922": {
      "op": "DUP4"
    },
    "1923": {
      "op": "ADD"
    },
    "1924": {
      "op": "SWAP2"
    },
    "1925": {
      "op": "POP"
    },
    "1926": {
      "op": "DUP4"
    },
    "1927": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1929": {
      "op": "DUP3"
    },
    "1930": {
      "op": "DUP6"
    },
    "1931": {
      "op": "ADD"
    },
    "1932": {
      "op": "ADD"
    },
    "1933": {
      "op": "GT"
    },
    "1934": {
      "op": "ISZERO"
    },
    "1935": {
      "op": "PUSH2",
      "value": "0x797"
    },
    "1938": {
      "op": "JUMPI"
    },
    "1939": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1941": {
      "op": "DUP1"
    },
    "1942": {
      "op": "REVERT"
    },
    "1943": {
      "op": "JUMPDEST"
    },
    "1944": {
      "op": "SWAP3"
    },
    "1945": {
      "op": "POP"
    },
    "1946": {
      "op": "SWAP3"
    },
    "1947": {
      "op": "SWAP1"
    },
    "1948": {
      "op": "POP"
    },
    "1949": {
      "jump": "o",
      "op": "JUMP"
    },
    "1950": {
      "op": "JUMPDEST"
    },
    "1951": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1953": {
      "op": "DUP3"
    },
    "1954": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1956": {
      "op": "DUP4"
    },
    "1957": {
      "op": "ADD"
    },
    "1958": {
      "op": "SLT"
    },
    "1959": {
      "op": "PUSH2",
      "value": "0x7AE"
    },
    "1962": {
      "op": "JUMPI"
    },
    "1963": {
      "op": "DUP1"
    },
    "1964": {
      "op": "DUP2"
    },
    "1965": {
      "op": "REVERT"
    },
    "1966": {
      "op": "JUMPDEST"
    },
    "1967": {
      "op": "DUP2"
    },
    "1968": {
      "op": "CALLDATALOAD"
    },
    "1969": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1978": {
      "op": "DUP1"
    },
    "1979": {
      "op": "DUP3"
    },
    "1980": {
      "op": "GT"
    },
    "1981": {
      "op": "ISZERO"
    },
    "1982": {
      "op": "PUSH2",
      "value": "0x7C9"
    },
    "1985": {
      "op": "JUMPI"
    },
    "1986": {
      "op": "PUSH2",
      "value": "0x7C9"
    },
    "1989": {
      "op": "PUSH2",
      "value": "0xB54"
    },
    "1992": {
      "jump": "i",
      "op": "JUMP"
    },
    "1993": {
      "op": "JUMPDEST"
    },
    "1994": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1996": {
      "op": "MLOAD"
    },
    "1997": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1999": {
      "op": "DUP4"
    },
    "2000": {
      "op": "ADD"
    },
    "2001": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2003": {
      "op": "NOT"
    },
    "2004": {
      "op": "SWAP1"
    },
    "2005": {
      "op": "DUP2"
    },
    "2006": {
      "op": "AND"
    },
    "2007": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "2009": {
      "op": "ADD"
    },
    "2010": {
      "op": "AND"
    },
    "2011": {
      "op": "DUP2"
    },
    "2012": {
      "op": "ADD"
    },
    "2013": {
      "op": "SWAP1"
    },
    "2014": {
      "op": "DUP3"
    },
    "2015": {
      "op": "DUP3"
    },
    "2016": {
      "op": "GT"
    },
    "2017": {
      "op": "DUP2"
    },
    "2018": {
      "op": "DUP4"
    },
    "2019": {
      "op": "LT"
    },
    "2020": {
      "op": "OR"
    },
    "2021": {
      "op": "ISZERO"
    },
    "2022": {
      "op": "PUSH2",
      "value": "0x7F1"
    },
    "2025": {
      "op": "JUMPI"
    },
    "2026": {
      "op": "PUSH2",
      "value": "0x7F1"
    },
    "2029": {
      "op": "PUSH2",
      "value": "0xB54"
    },
    "2032": {
      "jump": "i",
      "op": "JUMP"
    },
    "2033": {
      "op": "JUMPDEST"
    },
    "2034": {
      "op": "DUP2"
    },
    "2035": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2037": {
      "op": "MSTORE"
    },
    "2038": {
      "op": "DUP4"
    },
    "2039": {
      "op": "DUP2"
    },
    "2040": {
      "op": "MSTORE"
    },
    "2041": {
      "op": "DUP7"
    },
    "2042": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2044": {
      "op": "DUP6"
    },
    "2045": {
      "op": "DUP9"
    },
    "2046": {
      "op": "ADD"
    },
    "2047": {
      "op": "ADD"
    },
    "2048": {
      "op": "GT"
    },
    "2049": {
      "op": "ISZERO"
    },
    "2050": {
      "op": "PUSH2",
      "value": "0x809"
    },
    "2053": {
      "op": "JUMPI"
    },
    "2054": {
      "op": "DUP5"
    },
    "2055": {
      "op": "DUP6"
    },
    "2056": {
      "op": "REVERT"
    },
    "2057": {
      "op": "JUMPDEST"
    },
    "2058": {
      "op": "DUP4"
    },
    "2059": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2061": {
      "op": "DUP8"
    },
    "2062": {
      "op": "ADD"
    },
    "2063": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2065": {
      "op": "DUP4"
    },
    "2066": {
      "op": "ADD"
    },
    "2067": {
      "op": "CALLDATACOPY"
    },
    "2068": {
      "op": "SWAP3"
    },
    "2069": {
      "op": "DUP4"
    },
    "2070": {
      "op": "ADD"
    },
    "2071": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2073": {
      "op": "ADD"
    },
    "2074": {
      "op": "SWAP4"
    },
    "2075": {
      "op": "SWAP1"
    },
    "2076": {
      "op": "SWAP4"
    },
    "2077": {
      "op": "MSTORE"
    },
    "2078": {
      "op": "POP"
    },
    "2079": {
      "op": "SWAP4"
    },
    "2080": {
      "op": "SWAP3"
    },
    "2081": {
      "op": "POP"
    },
    "2082": {
      "op": "POP"
    },
    "2083": {
      "op": "POP"
    },
    "2084": {
      "jump": "o",
      "op": "JUMP"
    },
    "2085": {
      "op": "JUMPDEST"
    },
    "2086": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2088": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2090": {
      "op": "DUP3"
    },
    "2091": {
      "op": "DUP5"
    },
    "2092": {
      "op": "SUB"
    },
    "2093": {
      "op": "SLT"
    },
    "2094": {
      "op": "ISZERO"
    },
    "2095": {
      "op": "PUSH2",
      "value": "0x836"
    },
    "2098": {
      "op": "JUMPI"
    },
    "2099": {
      "op": "DUP1"
    },
    "2100": {
      "op": "DUP2"
    },
    "2101": {
      "op": "REVERT"
    },
    "2102": {
      "op": "JUMPDEST"
    },
    "2103": {
      "op": "DUP2"
    },
    "2104": {
      "op": "CALLDATALOAD"
    },
    "2105": {
      "op": "PUSH2",
      "value": "0x376"
    },
    "2108": {
      "op": "DUP2"
    },
    "2109": {
      "op": "PUSH2",
      "value": "0xB6A"
    },
    "2112": {
      "jump": "i",
      "op": "JUMP"
    },
    "2113": {
      "op": "JUMPDEST"
    },
    "2114": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2116": {
      "op": "DUP1"
    },
    "2117": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2119": {
      "op": "DUP1"
    },
    "2120": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2122": {
      "op": "DUP1"
    },
    "2123": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2125": {
      "op": "DUP1"
    },
    "2126": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2128": {
      "op": "DUP10"
    },
    "2129": {
      "op": "DUP12"
    },
    "2130": {
      "op": "SUB"
    },
    "2131": {
      "op": "SLT"
    },
    "2132": {
      "op": "ISZERO"
    },
    "2133": {
      "op": "PUSH2",
      "value": "0x85C"
    },
    "2136": {
      "op": "JUMPI"
    },
    "2137": {
      "op": "DUP4"
    },
    "2138": {
      "op": "DUP5"
    },
    "2139": {
      "op": "REVERT"
    },
    "2140": {
      "op": "JUMPDEST"
    },
    "2141": {
      "op": "DUP9"
    },
    "2142": {
      "op": "CALLDATALOAD"
    },
    "2143": {
      "op": "PUSH2",
      "value": "0x867"
    },
    "2146": {
      "op": "DUP2"
    },
    "2147": {
      "op": "PUSH2",
      "value": "0xB6A"
    },
    "2150": {
      "jump": "i",
      "op": "JUMP"
    },
    "2151": {
      "op": "JUMPDEST"
    },
    "2152": {
      "op": "SWAP8"
    },
    "2153": {
      "op": "POP"
    },
    "2154": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2156": {
      "op": "DUP10"
    },
    "2157": {
      "op": "ADD"
    },
    "2158": {
      "op": "CALLDATALOAD"
    },
    "2159": {
      "op": "PUSH2",
      "value": "0x877"
    },
    "2162": {
      "op": "DUP2"
    },
    "2163": {
      "op": "PUSH2",
      "value": "0xB6A"
    },
    "2166": {
      "jump": "i",
      "op": "JUMP"
    },
    "2167": {
      "op": "JUMPDEST"
    },
    "2168": {
      "op": "SWAP7"
    },
    "2169": {
      "op": "POP"
    },
    "2170": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2172": {
      "op": "DUP10"
    },
    "2173": {
      "op": "ADD"
    },
    "2174": {
      "op": "CALLDATALOAD"
    },
    "2175": {
      "op": "PUSH2",
      "value": "0x887"
    },
    "2178": {
      "op": "DUP2"
    },
    "2179": {
      "op": "PUSH2",
      "value": "0xB6A"
    },
    "2182": {
      "jump": "i",
      "op": "JUMP"
    },
    "2183": {
      "op": "JUMPDEST"
    },
    "2184": {
      "op": "SWAP6"
    },
    "2185": {
      "op": "POP"
    },
    "2186": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2188": {
      "op": "DUP10"
    },
    "2189": {
      "op": "ADD"
    },
    "2190": {
      "op": "CALLDATALOAD"
    },
    "2191": {
      "op": "SWAP5"
    },
    "2192": {
      "op": "POP"
    },
    "2193": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2195": {
      "op": "DUP10"
    },
    "2196": {
      "op": "ADD"
    },
    "2197": {
      "op": "CALLDATALOAD"
    },
    "2198": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2207": {
      "op": "DUP1"
    },
    "2208": {
      "op": "DUP3"
    },
    "2209": {
      "op": "GT"
    },
    "2210": {
      "op": "ISZERO"
    },
    "2211": {
      "op": "PUSH2",
      "value": "0x8AA"
    },
    "2214": {
      "op": "JUMPI"
    },
    "2215": {
      "op": "DUP6"
    },
    "2216": {
      "op": "DUP7"
    },
    "2217": {
      "op": "REVERT"
    },
    "2218": {
      "op": "JUMPDEST"
    },
    "2219": {
      "op": "PUSH2",
      "value": "0x8B6"
    },
    "2222": {
      "op": "DUP13"
    },
    "2223": {
      "op": "DUP4"
    },
    "2224": {
      "op": "DUP14"
    },
    "2225": {
      "op": "ADD"
    },
    "2226": {
      "op": "PUSH2",
      "value": "0x757"
    },
    "2229": {
      "jump": "i",
      "op": "JUMP"
    },
    "2230": {
      "op": "JUMPDEST"
    },
    "2231": {
      "op": "SWAP1"
    },
    "2232": {
      "op": "SWAP7"
    },
    "2233": {
      "op": "POP"
    },
    "2234": {
      "op": "SWAP5"
    },
    "2235": {
      "op": "POP"
    },
    "2236": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2238": {
      "op": "DUP12"
    },
    "2239": {
      "op": "ADD"
    },
    "2240": {
      "op": "CALLDATALOAD"
    },
    "2241": {
      "op": "SWAP2"
    },
    "2242": {
      "op": "POP"
    },
    "2243": {
      "op": "DUP1"
    },
    "2244": {
      "op": "DUP3"
    },
    "2245": {
      "op": "GT"
    },
    "2246": {
      "op": "ISZERO"
    },
    "2247": {
      "op": "PUSH2",
      "value": "0x8CE"
    },
    "2250": {
      "op": "JUMPI"
    },
    "2251": {
      "op": "DUP4"
    },
    "2252": {
      "op": "DUP5"
    },
    "2253": {
      "op": "REVERT"
    },
    "2254": {
      "op": "JUMPDEST"
    },
    "2255": {
      "op": "POP"
    },
    "2256": {
      "op": "PUSH2",
      "value": "0x8DB"
    },
    "2259": {
      "op": "DUP12"
    },
    "2260": {
      "op": "DUP3"
    },
    "2261": {
      "op": "DUP13"
    },
    "2262": {
      "op": "ADD"
    },
    "2263": {
      "op": "PUSH2",
      "value": "0x757"
    },
    "2266": {
      "jump": "i",
      "op": "JUMP"
    },
    "2267": {
      "op": "JUMPDEST"
    },
    "2268": {
      "op": "SWAP10"
    },
    "2269": {
      "op": "SWAP13"
    },
    "2270": {
      "op": "SWAP9"
    },
    "2271": {
      "op": "SWAP12"
    },
    "2272": {
      "op": "POP"
    },
    "2273": {
      "op": "SWAP7"
    },
    "2274": {
      "op": "SWAP10"
    },
    "2275": {
      "op": "POP"
    },
    "2276": {
      "op": "SWAP5"
    },
    "2277": {
      "op": "SWAP8"
    },
    "2278": {
      "op": "SWAP4"
    },
    "2279": {
      "op": "SWAP7"
    },
    "2280": {
      "op": "SWAP3"
    },
    "2281": {
      "op": "SWAP6"
    },
    "2282": {
      "op": "SWAP5"
    },
    "2283": {
      "op": "POP"
    },
    "2284": {
      "op": "POP"
    },
    "2285": {
      "op": "POP"
    },
    "2286": {
      "jump": "o",
      "op": "JUMP"
    },
    "2287": {
      "op": "JUMPDEST"
    },
    "2288": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2290": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2292": {
      "op": "DUP3"
    },
    "2293": {
      "op": "DUP5"
    },
    "2294": {
      "op": "SUB"
    },
    "2295": {
      "op": "SLT"
    },
    "2296": {
      "op": "ISZERO"
    },
    "2297": {
      "op": "PUSH2",
      "value": "0x900"
    },
    "2300": {
      "op": "JUMPI"
    },
    "2301": {
      "op": "DUP1"
    },
    "2302": {
      "op": "DUP2"
    },
    "2303": {
      "op": "REVERT"
    },
    "2304": {
      "op": "JUMPDEST"
    },
    "2305": {
      "op": "DUP2"
    },
    "2306": {
      "op": "CALLDATALOAD"
    },
    "2307": {
      "op": "DUP1"
    },
    "2308": {
      "op": "ISZERO"
    },
    "2309": {
      "op": "ISZERO"
    },
    "2310": {
      "op": "DUP2"
    },
    "2311": {
      "op": "EQ"
    },
    "2312": {
      "op": "PUSH2",
      "value": "0x376"
    },
    "2315": {
      "op": "JUMPI"
    },
    "2316": {
      "op": "DUP2"
    },
    "2317": {
      "op": "DUP3"
    },
    "2318": {
      "op": "REVERT"
    },
    "2319": {
      "op": "JUMPDEST"
    },
    "2320": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2322": {
      "op": "DUP1"
    },
    "2323": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2325": {
      "op": "DUP4"
    },
    "2326": {
      "op": "DUP6"
    },
    "2327": {
      "op": "SUB"
    },
    "2328": {
      "op": "SLT"
    },
    "2329": {
      "op": "ISZERO"
    },
    "2330": {
      "op": "PUSH2",
      "value": "0x921"
    },
    "2333": {
      "op": "JUMPI"
    },
    "2334": {
      "op": "DUP2"
    },
    "2335": {
      "op": "DUP3"
    },
    "2336": {
      "op": "REVERT"
    },
    "2337": {
      "op": "JUMPDEST"
    },
    "2338": {
      "op": "DUP3"
    },
    "2339": {
      "op": "CALLDATALOAD"
    },
    "2340": {
      "op": "SWAP2"
    },
    "2341": {
      "op": "POP"
    },
    "2342": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2344": {
      "op": "DUP4"
    },
    "2345": {
      "op": "ADD"
    },
    "2346": {
      "op": "CALLDATALOAD"
    },
    "2347": {
      "op": "PUSH2",
      "value": "0x933"
    },
    "2350": {
      "op": "DUP2"
    },
    "2351": {
      "op": "PUSH2",
      "value": "0xB6A"
    },
    "2354": {
      "jump": "i",
      "op": "JUMP"
    },
    "2355": {
      "op": "JUMPDEST"
    },
    "2356": {
      "op": "DUP1"
    },
    "2357": {
      "op": "SWAP2"
    },
    "2358": {
      "op": "POP"
    },
    "2359": {
      "op": "POP"
    },
    "2360": {
      "op": "SWAP3"
    },
    "2361": {
      "op": "POP"
    },
    "2362": {
      "op": "SWAP3"
    },
    "2363": {
      "op": "SWAP1"
    },
    "2364": {
      "op": "POP"
    },
    "2365": {
      "jump": "o",
      "op": "JUMP"
    },
    "2366": {
      "op": "JUMPDEST"
    },
    "2367": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2369": {
      "op": "DUP1"
    },
    "2370": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2372": {
      "op": "DUP1"
    },
    "2373": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2375": {
      "op": "DUP6"
    },
    "2376": {
      "op": "DUP8"
    },
    "2377": {
      "op": "SUB"
    },
    "2378": {
      "op": "SLT"
    },
    "2379": {
      "op": "ISZERO"
    },
    "2380": {
      "op": "PUSH2",
      "value": "0x953"
    },
    "2383": {
      "op": "JUMPI"
    },
    "2384": {
      "op": "DUP4"
    },
    "2385": {
      "op": "DUP5"
    },
    "2386": {
      "op": "REVERT"
    },
    "2387": {
      "op": "JUMPDEST"
    },
    "2388": {
      "op": "DUP5"
    },
    "2389": {
      "op": "CALLDATALOAD"
    },
    "2390": {
      "op": "PUSH2",
      "value": "0x95E"
    },
    "2393": {
      "op": "DUP2"
    },
    "2394": {
      "op": "PUSH2",
      "value": "0xB6A"
    },
    "2397": {
      "jump": "i",
      "op": "JUMP"
    },
    "2398": {
      "op": "JUMPDEST"
    },
    "2399": {
      "op": "SWAP4"
    },
    "2400": {
      "op": "POP"
    },
    "2401": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2403": {
      "op": "DUP6"
    },
    "2404": {
      "op": "ADD"
    },
    "2405": {
      "op": "CALLDATALOAD"
    },
    "2406": {
      "op": "PUSH2",
      "value": "0x96E"
    },
    "2409": {
      "op": "DUP2"
    },
    "2410": {
      "op": "PUSH2",
      "value": "0xB6A"
    },
    "2413": {
      "jump": "i",
      "op": "JUMP"
    },
    "2414": {
      "op": "JUMPDEST"
    },
    "2415": {
      "op": "SWAP3"
    },
    "2416": {
      "op": "POP"
    },
    "2417": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2419": {
      "op": "DUP6"
    },
    "2420": {
      "op": "ADD"
    },
    "2421": {
      "op": "CALLDATALOAD"
    },
    "2422": {
      "op": "SWAP2"
    },
    "2423": {
      "op": "POP"
    },
    "2424": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2426": {
      "op": "DUP6"
    },
    "2427": {
      "op": "ADD"
    },
    "2428": {
      "op": "CALLDATALOAD"
    },
    "2429": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2438": {
      "op": "DUP2"
    },
    "2439": {
      "op": "GT"
    },
    "2440": {
      "op": "ISZERO"
    },
    "2441": {
      "op": "PUSH2",
      "value": "0x990"
    },
    "2444": {
      "op": "JUMPI"
    },
    "2445": {
      "op": "DUP2"
    },
    "2446": {
      "op": "DUP3"
    },
    "2447": {
      "op": "REVERT"
    },
    "2448": {
      "op": "JUMPDEST"
    },
    "2449": {
      "op": "PUSH2",
      "value": "0x99C"
    },
    "2452": {
      "op": "DUP8"
    },
    "2453": {
      "op": "DUP3"
    },
    "2454": {
      "op": "DUP9"
    },
    "2455": {
      "op": "ADD"
    },
    "2456": {
      "op": "PUSH2",
      "value": "0x79E"
    },
    "2459": {
      "jump": "i",
      "op": "JUMP"
    },
    "2460": {
      "op": "JUMPDEST"
    },
    "2461": {
      "op": "SWAP2"
    },
    "2462": {
      "op": "POP"
    },
    "2463": {
      "op": "POP"
    },
    "2464": {
      "op": "SWAP3"
    },
    "2465": {
      "op": "SWAP6"
    },
    "2466": {
      "op": "SWAP2"
    },
    "2467": {
      "op": "SWAP5"
    },
    "2468": {
      "op": "POP"
    },
    "2469": {
      "op": "SWAP3"
    },
    "2470": {
      "op": "POP"
    },
    "2471": {
      "jump": "o",
      "op": "JUMP"
    },
    "2472": {
      "op": "JUMPDEST"
    },
    "2473": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2475": {
      "op": "DUP1"
    },
    "2476": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2478": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2480": {
      "op": "DUP5"
    },
    "2481": {
      "op": "DUP7"
    },
    "2482": {
      "op": "SUB"
    },
    "2483": {
      "op": "SLT"
    },
    "2484": {
      "op": "ISZERO"
    },
    "2485": {
      "op": "PUSH2",
      "value": "0x9BC"
    },
    "2488": {
      "op": "JUMPI"
    },
    "2489": {
      "op": "DUP3"
    },
    "2490": {
      "op": "DUP4"
    },
    "2491": {
      "op": "REVERT"
    },
    "2492": {
      "op": "JUMPDEST"
    },
    "2493": {
      "op": "DUP4"
    },
    "2494": {
      "op": "CALLDATALOAD"
    },
    "2495": {
      "op": "PUSH2",
      "value": "0x9C7"
    },
    "2498": {
      "op": "DUP2"
    },
    "2499": {
      "op": "PUSH2",
      "value": "0xB6A"
    },
    "2502": {
      "jump": "i",
      "op": "JUMP"
    },
    "2503": {
      "op": "JUMPDEST"
    },
    "2504": {
      "op": "SWAP3"
    },
    "2505": {
      "op": "POP"
    },
    "2506": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2508": {
      "op": "DUP5"
    },
    "2509": {
      "op": "ADD"
    },
    "2510": {
      "op": "CALLDATALOAD"
    },
    "2511": {
      "op": "SWAP2"
    },
    "2512": {
      "op": "POP"
    },
    "2513": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2515": {
      "op": "DUP5"
    },
    "2516": {
      "op": "ADD"
    },
    "2517": {
      "op": "CALLDATALOAD"
    },
    "2518": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2527": {
      "op": "DUP2"
    },
    "2528": {
      "op": "GT"
    },
    "2529": {
      "op": "ISZERO"
    },
    "2530": {
      "op": "PUSH2",
      "value": "0x9E9"
    },
    "2533": {
      "op": "JUMPI"
    },
    "2534": {
      "op": "DUP2"
    },
    "2535": {
      "op": "DUP3"
    },
    "2536": {
      "op": "REVERT"
    },
    "2537": {
      "op": "JUMPDEST"
    },
    "2538": {
      "op": "PUSH2",
      "value": "0x9F5"
    },
    "2541": {
      "op": "DUP7"
    },
    "2542": {
      "op": "DUP3"
    },
    "2543": {
      "op": "DUP8"
    },
    "2544": {
      "op": "ADD"
    },
    "2545": {
      "op": "PUSH2",
      "value": "0x79E"
    },
    "2548": {
      "jump": "i",
      "op": "JUMP"
    },
    "2549": {
      "op": "JUMPDEST"
    },
    "2550": {
      "op": "SWAP2"
    },
    "2551": {
      "op": "POP"
    },
    "2552": {
      "op": "POP"
    },
    "2553": {
      "op": "SWAP3"
    },
    "2554": {
      "op": "POP"
    },
    "2555": {
      "op": "SWAP3"
    },
    "2556": {
      "op": "POP"
    },
    "2557": {
      "op": "SWAP3"
    },
    "2558": {
      "jump": "o",
      "op": "JUMP"
    },
    "2559": {
      "op": "JUMPDEST"
    },
    "2560": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2562": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2564": {
      "op": "DUP3"
    },
    "2565": {
      "op": "DUP5"
    },
    "2566": {
      "op": "SUB"
    },
    "2567": {
      "op": "SLT"
    },
    "2568": {
      "op": "ISZERO"
    },
    "2569": {
      "op": "PUSH2",
      "value": "0xA10"
    },
    "2572": {
      "op": "JUMPI"
    },
    "2573": {
      "op": "DUP1"
    },
    "2574": {
      "op": "DUP2"
    },
    "2575": {
      "op": "REVERT"
    },
    "2576": {
      "op": "JUMPDEST"
    },
    "2577": {
      "op": "POP"
    },
    "2578": {
      "op": "MLOAD"
    },
    "2579": {
      "op": "SWAP2"
    },
    "2580": {
      "op": "SWAP1"
    },
    "2581": {
      "op": "POP"
    },
    "2582": {
      "jump": "o",
      "op": "JUMP"
    },
    "2583": {
      "op": "JUMPDEST"
    },
    "2584": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2586": {
      "op": "DUP3"
    },
    "2587": {
      "op": "DUP5"
    },
    "2588": {
      "op": "MSTORE"
    },
    "2589": {
      "op": "DUP3"
    },
    "2590": {
      "op": "DUP3"
    },
    "2591": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2593": {
      "op": "DUP7"
    },
    "2594": {
      "op": "ADD"
    },
    "2595": {
      "op": "CALLDATACOPY"
    },
    "2596": {
      "op": "DUP1"
    },
    "2597": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2599": {
      "op": "DUP5"
    },
    "2600": {
      "op": "DUP7"
    },
    "2601": {
      "op": "ADD"
    },
    "2602": {
      "op": "ADD"
    },
    "2603": {
      "op": "MSTORE"
    },
    "2604": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2606": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2608": {
      "op": "NOT"
    },
    "2609": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2611": {
      "op": "DUP6"
    },
    "2612": {
      "op": "ADD"
    },
    "2613": {
      "op": "AND"
    },
    "2614": {
      "op": "DUP6"
    },
    "2615": {
      "op": "ADD"
    },
    "2616": {
      "op": "ADD"
    },
    "2617": {
      "op": "SWAP1"
    },
    "2618": {
      "op": "POP"
    },
    "2619": {
      "op": "SWAP4"
    },
    "2620": {
      "op": "SWAP3"
    },
    "2621": {
      "op": "POP"
    },
    "2622": {
      "op": "POP"
    },
    "2623": {
      "op": "POP"
    },
    "2624": {
      "jump": "o",
      "op": "JUMP"
    },
    "2625": {
      "op": "JUMPDEST"
    },
    "2626": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2628": {
      "op": "DUP2"
    },
    "2629": {
      "op": "MLOAD"
    },
    "2630": {
      "op": "DUP1"
    },
    "2631": {
      "op": "DUP5"
    },
    "2632": {
      "op": "MSTORE"
    },
    "2633": {
      "op": "DUP2"
    },
    "2634": {
      "op": "JUMPDEST"
    },
    "2635": {
      "op": "DUP2"
    },
    "2636": {
      "op": "DUP2"
    },
    "2637": {
      "op": "LT"
    },
    "2638": {
      "op": "ISZERO"
    },
    "2639": {
      "op": "PUSH2",
      "value": "0xA66"
    },
    "2642": {
      "op": "JUMPI"
    },
    "2643": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2645": {
      "op": "DUP2"
    },
    "2646": {
      "op": "DUP6"
    },
    "2647": {
      "op": "ADD"
    },
    "2648": {
      "op": "DUP2"
    },
    "2649": {
      "op": "ADD"
    },
    "2650": {
      "op": "MLOAD"
    },
    "2651": {
      "op": "DUP7"
    },
    "2652": {
      "op": "DUP4"
    },
    "2653": {
      "op": "ADD"
    },
    "2654": {
      "op": "DUP3"
    },
    "2655": {
      "op": "ADD"
    },
    "2656": {
      "op": "MSTORE"
    },
    "2657": {
      "op": "ADD"
    },
    "2658": {
      "op": "PUSH2",
      "value": "0xA4A"
    },
    "2661": {
      "op": "JUMP"
    },
    "2662": {
      "op": "JUMPDEST"
    },
    "2663": {
      "op": "DUP2"
    },
    "2664": {
      "op": "DUP2"
    },
    "2665": {
      "op": "GT"
    },
    "2666": {
      "op": "ISZERO"
    },
    "2667": {
      "op": "PUSH2",
      "value": "0xA77"
    },
    "2670": {
      "op": "JUMPI"
    },
    "2671": {
      "op": "DUP3"
    },
    "2672": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2674": {
      "op": "DUP4"
    },
    "2675": {
      "op": "DUP8"
    },
    "2676": {
      "op": "ADD"
    },
    "2677": {
      "op": "ADD"
    },
    "2678": {
      "op": "MSTORE"
    },
    "2679": {
      "op": "JUMPDEST"
    },
    "2680": {
      "op": "POP"
    },
    "2681": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2683": {
      "op": "ADD"
    },
    "2684": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2686": {
      "op": "NOT"
    },
    "2687": {
      "op": "AND"
    },
    "2688": {
      "op": "SWAP3"
    },
    "2689": {
      "op": "SWAP1"
    },
    "2690": {
      "op": "SWAP3"
    },
    "2691": {
      "op": "ADD"
    },
    "2692": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2694": {
      "op": "ADD"
    },
    "2695": {
      "op": "SWAP3"
    },
    "2696": {
      "op": "SWAP2"
    },
    "2697": {
      "op": "POP"
    },
    "2698": {
      "op": "POP"
    },
    "2699": {
      "jump": "o",
      "op": "JUMP"
    },
    "2700": {
      "op": "JUMPDEST"
    },
    "2701": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2703": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2705": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2707": {
      "op": "SHL"
    },
    "2708": {
      "op": "SUB"
    },
    "2709": {
      "op": "DUP13"
    },
    "2710": {
      "op": "DUP2"
    },
    "2711": {
      "op": "AND"
    },
    "2712": {
      "op": "DUP3"
    },
    "2713": {
      "op": "MSTORE"
    },
    "2714": {
      "op": "DUP12"
    },
    "2715": {
      "op": "DUP2"
    },
    "2716": {
      "op": "AND"
    },
    "2717": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2719": {
      "op": "DUP4"
    },
    "2720": {
      "op": "ADD"
    },
    "2721": {
      "op": "MSTORE"
    },
    "2722": {
      "op": "DUP11"
    },
    "2723": {
      "op": "DUP2"
    },
    "2724": {
      "op": "AND"
    },
    "2725": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2727": {
      "op": "DUP4"
    },
    "2728": {
      "op": "ADD"
    },
    "2729": {
      "op": "MSTORE"
    },
    "2730": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2732": {
      "op": "DUP3"
    },
    "2733": {
      "op": "ADD"
    },
    "2734": {
      "op": "DUP11"
    },
    "2735": {
      "op": "SWAP1"
    },
    "2736": {
      "op": "MSTORE"
    },
    "2737": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "2740": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2742": {
      "op": "DUP4"
    },
    "2743": {
      "op": "ADD"
    },
    "2744": {
      "op": "DUP2"
    },
    "2745": {
      "op": "SWAP1"
    },
    "2746": {
      "op": "MSTORE"
    },
    "2747": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2749": {
      "op": "SWAP2"
    },
    "2750": {
      "op": "PUSH2",
      "value": "0xACA"
    },
    "2753": {
      "op": "DUP5"
    },
    "2754": {
      "op": "DUP4"
    },
    "2755": {
      "op": "ADD"
    },
    "2756": {
      "op": "DUP12"
    },
    "2757": {
      "op": "DUP14"
    },
    "2758": {
      "op": "PUSH2",
      "value": "0xA17"
    },
    "2761": {
      "jump": "i",
      "op": "JUMP"
    },
    "2762": {
      "op": "JUMPDEST"
    },
    "2763": {
      "op": "SWAP2"
    },
    "2764": {
      "op": "POP"
    },
    "2765": {
      "op": "DUP4"
    },
    "2766": {
      "op": "DUP3"
    },
    "2767": {
      "op": "SUB"
    },
    "2768": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2770": {
      "op": "DUP6"
    },
    "2771": {
      "op": "ADD"
    },
    "2772": {
      "op": "MSTORE"
    },
    "2773": {
      "op": "PUSH2",
      "value": "0xADF"
    },
    "2776": {
      "op": "DUP3"
    },
    "2777": {
      "op": "DUP10"
    },
    "2778": {
      "op": "DUP12"
    },
    "2779": {
      "op": "PUSH2",
      "value": "0xA17"
    },
    "2782": {
      "jump": "i",
      "op": "JUMP"
    },
    "2783": {
      "op": "JUMPDEST"
    },
    "2784": {
      "op": "SWAP7"
    },
    "2785": {
      "op": "AND"
    },
    "2786": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2788": {
      "op": "DUP5"
    },
    "2789": {
      "op": "ADD"
    },
    "2790": {
      "op": "MSTORE"
    },
    "2791": {
      "op": "POP"
    },
    "2792": {
      "op": "POP"
    },
    "2793": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2795": {
      "op": "DUP2"
    },
    "2796": {
      "op": "ADD"
    },
    "2797": {
      "op": "SWAP3"
    },
    "2798": {
      "op": "SWAP1"
    },
    "2799": {
      "op": "SWAP3"
    },
    "2800": {
      "op": "MSTORE"
    },
    "2801": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "2804": {
      "op": "SWAP1"
    },
    "2805": {
      "op": "SWAP2"
    },
    "2806": {
      "op": "ADD"
    },
    "2807": {
      "op": "MSTORE"
    },
    "2808": {
      "op": "SWAP9"
    },
    "2809": {
      "op": "SWAP8"
    },
    "2810": {
      "op": "POP"
    },
    "2811": {
      "op": "POP"
    },
    "2812": {
      "op": "POP"
    },
    "2813": {
      "op": "POP"
    },
    "2814": {
      "op": "POP"
    },
    "2815": {
      "op": "POP"
    },
    "2816": {
      "op": "POP"
    },
    "2817": {
      "op": "POP"
    },
    "2818": {
      "jump": "o",
      "op": "JUMP"
    },
    "2819": {
      "op": "JUMPDEST"
    },
    "2820": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2822": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2824": {
      "op": "DUP1"
    },
    "2825": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2827": {
      "op": "SHL"
    },
    "2828": {
      "op": "SUB"
    },
    "2829": {
      "op": "DUP6"
    },
    "2830": {
      "op": "AND"
    },
    "2831": {
      "op": "DUP3"
    },
    "2832": {
      "op": "MSTORE"
    },
    "2833": {
      "op": "DUP4"
    },
    "2834": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2836": {
      "op": "DUP4"
    },
    "2837": {
      "op": "ADD"
    },
    "2838": {
      "op": "MSTORE"
    },
    "2839": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2841": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2843": {
      "op": "DUP4"
    },
    "2844": {
      "op": "ADD"
    },
    "2845": {
      "op": "MSTORE"
    },
    "2846": {
      "op": "PUSH2",
      "value": "0xB2A"
    },
    "2849": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2851": {
      "op": "DUP4"
    },
    "2852": {
      "op": "ADD"
    },
    "2853": {
      "op": "DUP5"
    },
    "2854": {
      "op": "PUSH2",
      "value": "0xA41"
    },
    "2857": {
      "jump": "i",
      "op": "JUMP"
    },
    "2858": {
      "op": "JUMPDEST"
    },
    "2859": {
      "op": "SWAP6"
    },
    "2860": {
      "op": "SWAP5"
    },
    "2861": {
      "op": "POP"
    },
    "2862": {
      "op": "POP"
    },
    "2863": {
      "op": "POP"
    },
    "2864": {
      "op": "POP"
    },
    "2865": {
      "op": "POP"
    },
    "2866": {
      "jump": "o",
      "op": "JUMP"
    },
    "2867": {
      "op": "JUMPDEST"
    },
    "2868": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2870": {
      "op": "DUP4"
    },
    "2871": {
      "op": "DUP3"
    },
    "2872": {
      "op": "MSTORE"
    },
    "2873": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2875": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2877": {
      "op": "DUP4"
    },
    "2878": {
      "op": "ADD"
    },
    "2879": {
      "op": "MSTORE"
    },
    "2880": {
      "op": "PUSH2",
      "value": "0xB4C"
    },
    "2883": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2885": {
      "op": "DUP4"
    },
    "2886": {
      "op": "ADD"
    },
    "2887": {
      "op": "DUP5"
    },
    "2888": {
      "op": "PUSH2",
      "value": "0xA41"
    },
    "2891": {
      "jump": "i",
      "op": "JUMP"
    },
    "2892": {
      "op": "JUMPDEST"
    },
    "2893": {
      "op": "SWAP5"
    },
    "2894": {
      "op": "SWAP4"
    },
    "2895": {
      "op": "POP"
    },
    "2896": {
      "op": "POP"
    },
    "2897": {
      "op": "POP"
    },
    "2898": {
      "op": "POP"
    },
    "2899": {
      "jump": "o",
      "op": "JUMP"
    },
    "2900": {
      "op": "JUMPDEST"
    },
    "2901": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2906": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2908": {
      "op": "SHL"
    },
    "2909": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2911": {
      "op": "MSTORE"
    },
    "2912": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "2914": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2916": {
      "op": "MSTORE"
    },
    "2917": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2919": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2921": {
      "op": "REVERT"
    },
    "2922": {
      "op": "JUMPDEST"
    },
    "2923": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2925": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2927": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2929": {
      "op": "SHL"
    },
    "2930": {
      "op": "SUB"
    },
    "2931": {
      "op": "DUP2"
    },
    "2932": {
      "op": "AND"
    },
    "2933": {
      "op": "DUP2"
    },
    "2934": {
      "op": "EQ"
    },
    "2935": {
      "op": "PUSH2",
      "value": "0xB7F"
    },
    "2938": {
      "op": "JUMPI"
    },
    "2939": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2941": {
      "op": "DUP1"
    },
    "2942": {
      "op": "REVERT"
    },
    "2943": {
      "op": "JUMPDEST"
    },
    "2944": {
      "op": "POP"
    },
    "2945": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "22723d7ace686406d263ce08d4be3ca588ff2bdb",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC777/IERC777.sol\";\nimport \"../token/ERC777/IERC777Sender.sol\";\nimport \"../token/ERC777/IERC777Recipient.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/introspection/IERC1820Registry.sol\";\nimport \"../utils/introspection/ERC1820Implementer.sol\";\n\ncontract ERC777SenderRecipientMock is Context, IERC777Sender, IERC777Recipient, ERC1820Implementer {\n    event TokensToSendCalled(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData,\n        address token,\n        uint256 fromBalance,\n        uint256 toBalance\n    );\n\n    event TokensReceivedCalled(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData,\n        address token,\n        uint256 fromBalance,\n        uint256 toBalance\n    );\n\n    // Emitted in ERC777Mock. Here for easier decoding\n    event BeforeTokenTransfer();\n\n    bool private _shouldRevertSend;\n    bool private _shouldRevertReceive;\n\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH = keccak256(\"ERC777TokensSender\");\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override {\n        if (_shouldRevertSend) {\n            revert();\n        }\n\n        IERC777 token = IERC777(_msgSender());\n\n        uint256 fromBalance = token.balanceOf(from);\n        // when called due to burn, to will be the zero address, which will have a balance of 0\n        uint256 toBalance = token.balanceOf(to);\n\n        emit TokensToSendCalled(\n            operator,\n            from,\n            to,\n            amount,\n            userData,\n            operatorData,\n            address(token),\n            fromBalance,\n            toBalance\n        );\n    }\n\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override {\n        if (_shouldRevertReceive) {\n            revert();\n        }\n\n        IERC777 token = IERC777(_msgSender());\n\n        uint256 fromBalance = token.balanceOf(from);\n        // when called due to burn, to will be the zero address, which will have a balance of 0\n        uint256 toBalance = token.balanceOf(to);\n\n        emit TokensReceivedCalled(\n            operator,\n            from,\n            to,\n            amount,\n            userData,\n            operatorData,\n            address(token),\n            fromBalance,\n            toBalance\n        );\n    }\n\n    function senderFor(address account) public {\n        _registerInterfaceForAddress(_TOKENS_SENDER_INTERFACE_HASH, account);\n\n        address self = address(this);\n        if (account == self) {\n            registerSender(self);\n        }\n    }\n\n    function registerSender(address sender) public {\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_SENDER_INTERFACE_HASH, sender);\n    }\n\n    function recipientFor(address account) public {\n        _registerInterfaceForAddress(_TOKENS_RECIPIENT_INTERFACE_HASH, account);\n\n        address self = address(this);\n        if (account == self) {\n            registerRecipient(self);\n        }\n    }\n\n    function registerRecipient(address recipient) public {\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_RECIPIENT_INTERFACE_HASH, recipient);\n    }\n\n    function setShouldRevertSend(bool shouldRevert) public {\n        _shouldRevertSend = shouldRevert;\n    }\n\n    function setShouldRevertReceive(bool shouldRevert) public {\n        _shouldRevertReceive = shouldRevert;\n    }\n\n    function send(IERC777 token, address to, uint256 amount, bytes memory data) public {\n        // This is 777's send function, not the Solidity send function\n        token.send(to, amount, data); // solhint-disable-line check-send-result\n    }\n\n    function burn(IERC777 token, uint256 amount, bytes memory data) public {\n        token.burn(amount, data);\n    }\n}\n",
  "sourceMap": "329:4059:49:-:0;;;1113:96;;;-1:-1:-1;;;;;;1113:96:49;;;;;329:4059;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin-contracts/contracts/mocks/ERC777SenderRecipientMock.sol",
  "type": "contract"
}