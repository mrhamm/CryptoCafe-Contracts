{
  "abi": [
    {
      "inputs": [],
      "name": "fail",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeNested",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_x",
          "type": "uint256"
        }
      ],
      "name": "initializeWithX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializerRan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_x",
          "type": "uint256"
        }
      ],
      "name": "nonInitializable",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "x",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "53": "contracts/openzeppelin-contracts/contracts/mocks/InitializableMock.sol",
    "77": "contracts/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-contracts/contracts/mocks/InitializableMock.sol",
    "exportedSymbols": {
      "Address": [
        14906
      ],
      "Initializable": [
        7875
      ],
      "InitializableMock": [
        5361
      ]
    },
    "id": 5362,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5302,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:53"
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol",
        "file": "../proxy/utils/Initializable.sol",
        "id": 5303,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5362,
        "sourceUnit": 7876,
        "src": "58:42:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5305,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7875,
              "src": "236:13:53"
            },
            "id": 5306,
            "nodeType": "InheritanceSpecifier",
            "src": "236:13:53"
          }
        ],
        "contractDependencies": [
          7875
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 5304,
          "nodeType": "StructuredDocumentation",
          "src": "102:103:53",
          "text": " @title InitializableMock\n @dev This contract is a mock to test initializable functionality"
        },
        "fullyImplemented": true,
        "id": 5361,
        "linearizedBaseContracts": [
          5361,
          7875
        ],
        "name": "InitializableMock",
        "nameLocation": "215:17:53",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "c3b8ef2a",
            "id": 5308,
            "mutability": "mutable",
            "name": "initializerRan",
            "nameLocation": "267:14:53",
            "nodeType": "VariableDeclaration",
            "scope": 5361,
            "src": "255:26:53",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 5307,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "255:4:53",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "0c55699c",
            "id": 5310,
            "mutability": "mutable",
            "name": "x",
            "nameLocation": "300:1:53",
            "nodeType": "VariableDeclaration",
            "scope": 5361,
            "src": "285:16:53",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 5309,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "285:7:53",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 5319,
              "nodeType": "Block",
              "src": "347:32:53",
              "statements": [
                {
                  "expression": {
                    "id": 5317,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 5315,
                      "name": "initializerRan",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5308,
                      "src": "353:14:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 5316,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "370:4:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "353:21:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5318,
                  "nodeType": "ExpressionStatement",
                  "src": "353:21:53"
                }
              ]
            },
            "functionSelector": "8129fc1c",
            "id": 5320,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 5313,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 5312,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7874,
                  "src": "335:11:53"
                },
                "nodeType": "ModifierInvocation",
                "src": "335:11:53"
              }
            ],
            "name": "initialize",
            "nameLocation": "315:10:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5311,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "325:2:53"
            },
            "returnParameters": {
              "id": 5314,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "347:0:53"
            },
            "scope": 5361,
            "src": "306:73:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5328,
              "nodeType": "Block",
              "src": "430:23:53",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 5325,
                      "name": "initialize",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5320,
                      "src": "436:10:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 5326,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "436:12:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5327,
                  "nodeType": "ExpressionStatement",
                  "src": "436:12:53"
                }
              ]
            },
            "functionSelector": "cb3a528d",
            "id": 5329,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 5323,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 5322,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7874,
                  "src": "418:11:53"
                },
                "nodeType": "ModifierInvocation",
                "src": "418:11:53"
              }
            ],
            "name": "initializeNested",
            "nameLocation": "392:16:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5321,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "408:2:53"
            },
            "returnParameters": {
              "id": 5324,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "430:0:53"
            },
            "scope": 5361,
            "src": "383:70:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5340,
              "nodeType": "Block",
              "src": "521:17:53",
              "statements": [
                {
                  "expression": {
                    "id": 5338,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 5336,
                      "name": "x",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5310,
                      "src": "527:1:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 5337,
                      "name": "_x",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5331,
                      "src": "531:2:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "527:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 5339,
                  "nodeType": "ExpressionStatement",
                  "src": "527:6:53"
                }
              ]
            },
            "functionSelector": "0018eaa8",
            "id": 5341,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 5334,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 5333,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7874,
                  "src": "509:11:53"
                },
                "nodeType": "ModifierInvocation",
                "src": "509:11:53"
              }
            ],
            "name": "initializeWithX",
            "nameLocation": "466:15:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5332,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5331,
                  "mutability": "mutable",
                  "name": "_x",
                  "nameLocation": "490:2:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 5341,
                  "src": "482:10:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5330,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "482:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "481:12:53"
            },
            "returnParameters": {
              "id": 5335,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "521:0:53"
            },
            "scope": 5361,
            "src": "457:81:53",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5350,
              "nodeType": "Block",
              "src": "595:17:53",
              "statements": [
                {
                  "expression": {
                    "id": 5348,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 5346,
                      "name": "x",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5310,
                      "src": "601:1:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 5347,
                      "name": "_x",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5343,
                      "src": "605:2:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "601:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 5349,
                  "nodeType": "ExpressionStatement",
                  "src": "601:6:53"
                }
              ]
            },
            "functionSelector": "e955c9ec",
            "id": 5351,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nonInitializable",
            "nameLocation": "551:16:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5344,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5343,
                  "mutability": "mutable",
                  "name": "_x",
                  "nameLocation": "576:2:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 5351,
                  "src": "568:10:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5342,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "568:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "567:12:53"
            },
            "returnParameters": {
              "id": 5345,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "595:0:53"
            },
            "scope": 5361,
            "src": "542:70:53",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5359,
              "nodeType": "Block",
              "src": "644:61:53",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "66616c7365",
                        "id": 5355,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "658:5:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      },
                      {
                        "hexValue": "496e697469616c697a61626c654d6f636b20666f72636564206661696c757265",
                        "id": 5356,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "665:34:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_70458f305ab12a5814a8a6125666b5faf9428e7481e52fe1e943f8addb4009b7",
                          "typeString": "literal_string \"InitializableMock forced failure\""
                        },
                        "value": "InitializableMock forced failure"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_70458f305ab12a5814a8a6125666b5faf9428e7481e52fe1e943f8addb4009b7",
                          "typeString": "literal_string \"InitializableMock forced failure\""
                        }
                      ],
                      "id": 5354,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "650:7:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 5357,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "650:50:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5358,
                  "nodeType": "ExpressionStatement",
                  "src": "650:50:53"
                }
              ]
            },
            "functionSelector": "a9cc4718",
            "id": 5360,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fail",
            "nameLocation": "625:4:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5352,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "629:2:53"
            },
            "returnParameters": {
              "id": 5353,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "644:0:53"
            },
            "scope": 5361,
            "src": "616:89:53",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 5362,
        "src": "206:502:53"
      }
    ],
    "src": "33:676:53"
  },
  "bytecode": "608060405234801561001057600080fd5b50610383806100206000396000f3fe60806040526004361061006f5760003560e01c8063a9cc47181161004e578063a9cc4718146100c7578063c3b8ef2a146100dc578063cb3a528d1461010c578063e955c9ec146101215761006f565b806218eaa8146100745780630c55699c146100895780638129fc1c146100b2575b600080fd5b6100876100823660046102e7565b610134565b005b34801561009557600080fd5b5061009f60015481565b6040519081526020015b60405180910390f35b3480156100be57600080fd5b506100876101af565b3480156100d357600080fd5b5061008761022c565b3480156100e857600080fd5b506000546100fc9062010000900460ff1681565b60405190151581526020016100a9565b34801561011857600080fd5b50610087610274565b61008761012f3660046102e7565b600155565b600054610100900460ff168061014d575060005460ff16155b6101725760405162461bcd60e51b8152600401610169906102ff565b60405180910390fd5b600054610100900460ff16158015610194576000805461ffff19166101011790555b600182905580156101ab576000805461ff00191690555b5050565b600054610100900460ff16806101c8575060005460ff16155b6101e45760405162461bcd60e51b8152600401610169906102ff565b600054610100900460ff16158015610206576000805461ffff19166101011790555b6000805462ff00001916620100001790558015610229576000805461ff00191690555b50565b60405162461bcd60e51b815260206004820181905260248201527f496e697469616c697a61626c654d6f636b20666f72636564206661696c7572656044820152606401610169565b600054610100900460ff168061028d575060005460ff16155b6102a95760405162461bcd60e51b8152600401610169906102ff565b600054610100900460ff161580156102cb576000805461ffff19166101011790555b6102d36101af565b8015610229576000805461ff001916905550565b6000602082840312156102f8578081fd5b5035919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220918c4cf7f337742b8ccc31bebde1ea12a3324bd48ccb9a9c639cc800a4b5b17164736f6c63430008030033",
  "bytecodeSha1": "e223d6a783ced02b57cebf3c3c2ed31fa53425e1",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.3+commit.8d00100c"
  },
  "contractName": "InitializableMock",
  "coverageMap": {
    "branches": {
      "53": {},
      "77": {
        "InitializableMock.initializeNested": {
          "5": [
            1495,
            1508,
            true
          ],
          "6": [
            1513,
            1525,
            true
          ]
        }
      }
    },
    "statements": {
      "53": {
        "InitializableMock.fail": {
          "3": [
            650,
            700
          ]
        },
        "InitializableMock.initialize": {
          "2": [
            353,
            374
          ]
        },
        "InitializableMock.initializeNested": {
          "4": [
            436,
            448
          ]
        },
        "InitializableMock.initializeWithX": {
          "1": [
            527,
            533
          ]
        },
        "InitializableMock.nonInitializable": {
          "0": [
            601,
            607
          ]
        }
      },
      "77": {}
    }
  },
  "dependencies": [
    "Initializable"
  ],
  "deployedBytecode": "60806040526004361061006f5760003560e01c8063a9cc47181161004e578063a9cc4718146100c7578063c3b8ef2a146100dc578063cb3a528d1461010c578063e955c9ec146101215761006f565b806218eaa8146100745780630c55699c146100895780638129fc1c146100b2575b600080fd5b6100876100823660046102e7565b610134565b005b34801561009557600080fd5b5061009f60015481565b6040519081526020015b60405180910390f35b3480156100be57600080fd5b506100876101af565b3480156100d357600080fd5b5061008761022c565b3480156100e857600080fd5b506000546100fc9062010000900460ff1681565b60405190151581526020016100a9565b34801561011857600080fd5b50610087610274565b61008761012f3660046102e7565b600155565b600054610100900460ff168061014d575060005460ff16155b6101725760405162461bcd60e51b8152600401610169906102ff565b60405180910390fd5b600054610100900460ff16158015610194576000805461ffff19166101011790555b600182905580156101ab576000805461ff00191690555b5050565b600054610100900460ff16806101c8575060005460ff16155b6101e45760405162461bcd60e51b8152600401610169906102ff565b600054610100900460ff16158015610206576000805461ffff19166101011790555b6000805462ff00001916620100001790558015610229576000805461ff00191690555b50565b60405162461bcd60e51b815260206004820181905260248201527f496e697469616c697a61626c654d6f636b20666f72636564206661696c7572656044820152606401610169565b600054610100900460ff168061028d575060005460ff16155b6102a95760405162461bcd60e51b8152600401610169906102ff565b600054610100900460ff161580156102cb576000805461ffff19166101011790555b6102d36101af565b8015610229576000805461ff001916905550565b6000602082840312156102f8578081fd5b5035919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220918c4cf7f337742b8ccc31bebde1ea12a3324bd48ccb9a9c639cc800a4b5b17164736f6c63430008030033",
  "deployedSourceMap": "206:502:53:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;457:81;;;;;;:::i;:::-;;:::i;:::-;;285:16;;;;;;;;;;;;;;;;;;;1323:25:144;;;1311:2;1296:18;285:16:53;;;;;;;;306:73;;;;;;;;;;;;;:::i;616:89::-;;;;;;;;;;;;;:::i;255:26::-;;;;;;;;;;-1:-1:-1;255:26:53;;;;;;;;;;;;;;374:14:144;;367:22;349:41;;337:2;322:18;255:26:53;304:92:144;383:70:53;;;;;;;;;;;;;:::i;542:::-;;;;;;:::i;:::-;601:1;:6;542:70;457:81;1495:13:77;;;;;;;;:30;;-1:-1:-1;1513:12:77;;;;1512:13;1495:30;1487:89;;;;-1:-1:-1;;;1487:89:77;;;;;;;:::i;:::-;;;;;;;;;1587:19;1610:13;;;;;;1609:14;1633:98;;;;1667:13;:20;;-1:-1:-1;;1701:19:77;;;;;1633:98;527:1:53::1;:6:::0;;;1753:66:77;;;;1803:5;1787:21;;-1:-1:-1;;1787:21:77;;;1753:66;457:81:53;;:::o;306:73::-;1495:13:77;;;;;;;;:30;;-1:-1:-1;1513:12:77;;;;1512:13;1495:30;1487:89;;;;-1:-1:-1;;;1487:89:77;;;;;;;:::i;:::-;1587:19;1610:13;;;;;;1609:14;1633:98;;;;1667:13;:20;;-1:-1:-1;;1701:19:77;;;;;1633:98;353:14:53::1;:21:::0;;-1:-1:-1;;353:21:53::1;::::0;::::1;::::0;;1753:66:77;;;;1803:5;1787:21;;-1:-1:-1;;1787:21:77;;;1753:66;306:73:53;:::o;616:89::-;650:50;;-1:-1:-1;;;650:50:53;;603:2:144;650:50:53;;;585:21:144;;;622:18;;;615:30;681:34;661:18;;;654:62;733:18;;650:50:53;575:182:144;383:70:53;1495:13:77;;;;;;;;:30;;-1:-1:-1;1513:12:77;;;;1512:13;1495:30;1487:89;;;;-1:-1:-1;;;1487:89:77;;;;;;;:::i;:::-;1587:19;1610:13;;;;;;1609:14;1633:98;;;;1667:13;:20;;-1:-1:-1;;1701:19:77;;;;;1633:98;436:12:53::1;:10;:12::i;:::-;1757:14:77::0;1753:66;;;1803:5;1787:21;;-1:-1:-1;;1787:21:77;;;383:70:53;:::o;14:190:144:-;;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;-1:-1:-1;175:23:144;;84:120;-1:-1:-1;84:120:144:o;762:410::-;964:2;946:21;;;1003:2;983:18;;;976:30;1042:34;1037:2;1022:18;;1015:62;-1:-1:-1;;;1108:2:144;1093:18;;1086:44;1162:3;1147:19;;936:236::o",
  "language": "Solidity",
  "natspec": {
    "details": "This contract is a mock to test initializable functionality",
    "kind": "dev",
    "methods": {},
    "title": "InitializableMock",
    "version": 1
  },
  "offset": [
    206,
    708
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x6F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA9CC4718 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xA9CC4718 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0xC3B8EF2A EQ PUSH2 0xDC JUMPI DUP1 PUSH4 0xCB3A528D EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0xE955C9EC EQ PUSH2 0x121 JUMPI PUSH2 0x6F JUMP JUMPDEST DUP1 PUSH3 0x18EAA8 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0xC55699C EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0xB2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x87 PUSH2 0x82 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E7 JUMP JUMPDEST PUSH2 0x134 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9F PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x87 PUSH2 0x1AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x87 PUSH2 0x22C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0xFC SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x87 PUSH2 0x274 JUMP JUMPDEST PUSH2 0x87 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x2E7 JUMP JUMPDEST PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x14D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x172 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x169 SWAP1 PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x194 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0x101 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1C8 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x169 SWAP1 PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0x101 OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH3 0xFF0000 NOT AND PUSH3 0x10000 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C654D6F636B20666F72636564206661696C757265 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x169 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x28D JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x2A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x169 SWAP1 PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0x101 OR SWAP1 SSTORE JUMPDEST PUSH2 0x2D3 PUSH2 0x1AF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F8 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 DUP13 0x4C 0xF7 RETURN CALLDATACOPY PUSH21 0x2B8CCC31BEBDE1EA12A3324BD48CCB9A9C639CC800 LOG4 0xB5 0xB1 PUSH18 0x64736F6C6343000803003300000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        206,
        708
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "MSTORE",
      "path": "53"
    },
    "5": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "CALLDATASIZE",
      "path": "53"
    },
    "8": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "LT",
      "path": "53"
    },
    "9": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x6F"
    },
    "12": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "13": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "CALLDATALOAD",
      "path": "53"
    },
    "16": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "SHR",
      "path": "53"
    },
    "19": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "DUP1",
      "path": "53"
    },
    "20": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH4",
      "path": "53",
      "value": "0xA9CC4718"
    },
    "25": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "GT",
      "path": "53"
    },
    "26": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x4E"
    },
    "29": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "30": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "DUP1",
      "path": "53"
    },
    "31": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH4",
      "path": "53",
      "value": "0xA9CC4718"
    },
    "36": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "EQ",
      "path": "53"
    },
    "37": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0xC7"
    },
    "40": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "41": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "DUP1",
      "path": "53"
    },
    "42": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH4",
      "path": "53",
      "value": "0xC3B8EF2A"
    },
    "47": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "EQ",
      "path": "53"
    },
    "48": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0xDC"
    },
    "51": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "52": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "DUP1",
      "path": "53"
    },
    "53": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH4",
      "path": "53",
      "value": "0xCB3A528D"
    },
    "58": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "EQ",
      "path": "53"
    },
    "59": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x10C"
    },
    "62": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "63": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "DUP1",
      "path": "53"
    },
    "64": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH4",
      "path": "53",
      "value": "0xE955C9EC"
    },
    "69": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "EQ",
      "path": "53"
    },
    "70": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x121"
    },
    "73": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "74": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x6F"
    },
    "77": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMP",
      "path": "53"
    },
    "78": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "79": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "DUP1",
      "path": "53"
    },
    "80": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH3",
      "path": "53",
      "value": "0x18EAA8"
    },
    "84": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "EQ",
      "path": "53"
    },
    "85": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x74"
    },
    "88": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "89": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "DUP1",
      "path": "53"
    },
    "90": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH4",
      "path": "53",
      "value": "0xC55699C"
    },
    "95": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "EQ",
      "path": "53"
    },
    "96": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x89"
    },
    "99": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "100": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "DUP1",
      "path": "53"
    },
    "101": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH4",
      "path": "53",
      "value": "0x8129FC1C"
    },
    "106": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "EQ",
      "path": "53"
    },
    "107": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0xB2"
    },
    "110": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "111": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "112": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x0"
    },
    "114": {
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "DUP1",
      "path": "53"
    },
    "115": {
      "first_revert": true,
      "fn": null,
      "offset": [
        206,
        708
      ],
      "op": "REVERT",
      "path": "53"
    },
    "116": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "117": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x87"
    },
    "120": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x82"
    },
    "123": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "CALLDATASIZE",
      "path": "53"
    },
    "124": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x4"
    },
    "126": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x2E7"
    },
    "129": {
      "fn": "InitializableMock.initializeWithX",
      "jump": "i",
      "offset": [
        457,
        538
      ],
      "op": "JUMP",
      "path": "53"
    },
    "130": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "131": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x134"
    },
    "134": {
      "fn": "InitializableMock.initializeWithX",
      "jump": "i",
      "offset": [
        457,
        538
      ],
      "op": "JUMP",
      "path": "53"
    },
    "135": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "136": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "STOP",
      "path": "53"
    },
    "137": {
      "offset": [
        285,
        301
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "138": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "CALLVALUE",
      "path": "53"
    },
    "139": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "DUP1",
      "path": "53"
    },
    "140": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "ISZERO",
      "path": "53"
    },
    "141": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x95"
    },
    "144": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "145": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x0"
    },
    "147": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "DUP1",
      "path": "53"
    },
    "148": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "REVERT",
      "path": "53"
    },
    "149": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "150": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "POP",
      "path": "53"
    },
    "151": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x9F"
    },
    "154": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x1"
    },
    "156": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "SLOAD",
      "path": "53"
    },
    "157": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "DUP2",
      "path": "53"
    },
    "158": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "JUMP",
      "path": "53"
    },
    "159": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "160": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x40"
    },
    "162": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "MLOAD",
      "path": "53"
    },
    "163": {
      "op": "SWAP1"
    },
    "164": {
      "op": "DUP2"
    },
    "165": {
      "op": "MSTORE"
    },
    "166": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "168": {
      "op": "ADD"
    },
    "169": {
      "offset": [
        285,
        301
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "170": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x40"
    },
    "172": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "MLOAD",
      "path": "53"
    },
    "173": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "DUP1",
      "path": "53"
    },
    "174": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "SWAP2",
      "path": "53"
    },
    "175": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "SUB",
      "path": "53"
    },
    "176": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "SWAP1",
      "path": "53"
    },
    "177": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        285,
        301
      ],
      "op": "RETURN",
      "path": "53"
    },
    "178": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "179": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "CALLVALUE",
      "path": "53"
    },
    "180": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "DUP1",
      "path": "53"
    },
    "181": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "ISZERO",
      "path": "53"
    },
    "182": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0xBE"
    },
    "185": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "186": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x0"
    },
    "188": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "DUP1",
      "path": "53"
    },
    "189": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "REVERT",
      "path": "53"
    },
    "190": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "191": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "POP",
      "path": "53"
    },
    "192": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x87"
    },
    "195": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x1AF"
    },
    "198": {
      "fn": "InitializableMock.initialize",
      "jump": "i",
      "offset": [
        306,
        379
      ],
      "op": "JUMP",
      "path": "53"
    },
    "199": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "200": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "CALLVALUE",
      "path": "53"
    },
    "201": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "DUP1",
      "path": "53"
    },
    "202": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "ISZERO",
      "path": "53"
    },
    "203": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0xD3"
    },
    "206": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "207": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x0"
    },
    "209": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "DUP1",
      "path": "53"
    },
    "210": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "REVERT",
      "path": "53"
    },
    "211": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "212": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "POP",
      "path": "53"
    },
    "213": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x87"
    },
    "216": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x22C"
    },
    "219": {
      "fn": "InitializableMock.fail",
      "jump": "i",
      "offset": [
        616,
        705
      ],
      "op": "JUMP",
      "path": "53"
    },
    "220": {
      "offset": [
        255,
        281
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "221": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "CALLVALUE",
      "path": "53"
    },
    "222": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "DUP1",
      "path": "53"
    },
    "223": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "ISZERO",
      "path": "53"
    },
    "224": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0xE8"
    },
    "227": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "228": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x0"
    },
    "230": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "DUP1",
      "path": "53"
    },
    "231": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "REVERT",
      "path": "53"
    },
    "232": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "233": {
      "op": "POP"
    },
    "234": {
      "offset": [
        255,
        281
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x0"
    },
    "236": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "SLOAD",
      "path": "53"
    },
    "237": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0xFC"
    },
    "240": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "SWAP1",
      "path": "53"
    },
    "241": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "PUSH3",
      "path": "53",
      "value": "0x10000"
    },
    "245": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "SWAP1",
      "path": "53"
    },
    "246": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "DIV",
      "path": "53"
    },
    "247": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0xFF"
    },
    "249": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "AND",
      "path": "53"
    },
    "250": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "DUP2",
      "path": "53"
    },
    "251": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "JUMP",
      "path": "53"
    },
    "252": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "253": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x40"
    },
    "255": {
      "fn": "InitializableMock.fail",
      "offset": [
        255,
        281
      ],
      "op": "MLOAD",
      "path": "53"
    },
    "256": {
      "op": "SWAP1"
    },
    "257": {
      "op": "ISZERO"
    },
    "258": {
      "op": "ISZERO"
    },
    "259": {
      "op": "DUP2"
    },
    "260": {
      "op": "MSTORE"
    },
    "261": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "263": {
      "op": "ADD"
    },
    "264": {
      "offset": [
        255,
        281
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0xA9"
    },
    "267": {
      "op": "JUMP"
    },
    "268": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "269": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "CALLVALUE",
      "path": "53"
    },
    "270": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "DUP1",
      "path": "53"
    },
    "271": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "ISZERO",
      "path": "53"
    },
    "272": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x118"
    },
    "275": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "JUMPI",
      "path": "53"
    },
    "276": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x0"
    },
    "278": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "DUP1",
      "path": "53"
    },
    "279": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "REVERT",
      "path": "53"
    },
    "280": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "281": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "POP",
      "path": "53"
    },
    "282": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x87"
    },
    "285": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x274"
    },
    "288": {
      "fn": "InitializableMock.initializeNested",
      "jump": "i",
      "offset": [
        383,
        453
      ],
      "op": "JUMP",
      "path": "53"
    },
    "289": {
      "fn": "InitializableMock.nonInitializable",
      "offset": [
        542,
        612
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "290": {
      "fn": "InitializableMock.nonInitializable",
      "offset": [
        542,
        612
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x87"
    },
    "293": {
      "fn": "InitializableMock.nonInitializable",
      "offset": [
        542,
        612
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x12F"
    },
    "296": {
      "fn": "InitializableMock.nonInitializable",
      "offset": [
        542,
        612
      ],
      "op": "CALLDATASIZE",
      "path": "53"
    },
    "297": {
      "fn": "InitializableMock.nonInitializable",
      "offset": [
        542,
        612
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x4"
    },
    "299": {
      "fn": "InitializableMock.nonInitializable",
      "offset": [
        542,
        612
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x2E7"
    },
    "302": {
      "fn": "InitializableMock.nonInitializable",
      "jump": "i",
      "offset": [
        542,
        612
      ],
      "op": "JUMP",
      "path": "53"
    },
    "303": {
      "fn": "InitializableMock.nonInitializable",
      "offset": [
        542,
        612
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "304": {
      "fn": "InitializableMock.nonInitializable",
      "offset": [
        601,
        602
      ],
      "op": "PUSH1",
      "path": "53",
      "statement": 0,
      "value": "0x1"
    },
    "306": {
      "fn": "InitializableMock.nonInitializable",
      "offset": [
        601,
        607
      ],
      "op": "SSTORE",
      "path": "53"
    },
    "307": {
      "fn": "InitializableMock.nonInitializable",
      "offset": [
        542,
        612
      ],
      "op": "JUMP",
      "path": "53"
    },
    "308": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "309": {
      "offset": [
        1495,
        1508
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "311": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1495,
        1508
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "312": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1495,
        1508
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x100"
    },
    "315": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1495,
        1508
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "316": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1495,
        1508
      ],
      "op": "DIV",
      "path": "77"
    },
    "317": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1495,
        1508
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0xFF"
    },
    "319": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1495,
        1508
      ],
      "op": "AND",
      "path": "77"
    },
    "320": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1495,
        1508
      ],
      "op": "DUP1",
      "path": "77"
    },
    "321": {
      "offset": [
        1495,
        1525
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x14D"
    },
    "324": {
      "offset": [
        1495,
        1525
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "325": {
      "op": "POP"
    },
    "326": {
      "offset": [
        1513,
        1525
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "328": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1513,
        1525
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "329": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1513,
        1525
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0xFF"
    },
    "331": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1513,
        1525
      ],
      "op": "AND",
      "path": "77"
    },
    "332": {
      "offset": [
        1512,
        1525
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "333": {
      "offset": [
        1495,
        1525
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "334": {
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x172"
    },
    "337": {
      "offset": [
        1487,
        1576
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "338": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x40"
    },
    "340": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "MLOAD",
      "path": "77"
    },
    "341": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "345": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "347": {
      "op": "SHL"
    },
    "348": {
      "offset": [
        1487,
        1576
      ],
      "op": "DUP2",
      "path": "77"
    },
    "349": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "MSTORE",
      "path": "77"
    },
    "350": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x4"
    },
    "352": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "ADD",
      "path": "77"
    },
    "353": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x169"
    },
    "356": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "357": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x2FF"
    },
    "360": {
      "fn": "InitializableMock.initializeWithX",
      "jump": "i",
      "offset": [
        1487,
        1576
      ],
      "op": "JUMP",
      "path": "77"
    },
    "361": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "362": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x40"
    },
    "364": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "MLOAD",
      "path": "77"
    },
    "365": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "DUP1",
      "path": "77"
    },
    "366": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "SWAP2",
      "path": "77"
    },
    "367": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "SUB",
      "path": "77"
    },
    "368": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "369": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "77"
    },
    "370": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1487,
        1576
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "371": {
      "offset": [
        1587,
        1606
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "373": {
      "offset": [
        1610,
        1623
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "374": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1610,
        1623
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x100"
    },
    "377": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1610,
        1623
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "378": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1610,
        1623
      ],
      "op": "DIV",
      "path": "77"
    },
    "379": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1610,
        1623
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0xFF"
    },
    "381": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1610,
        1623
      ],
      "op": "AND",
      "path": "77"
    },
    "382": {
      "offset": [
        1609,
        1623
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "383": {
      "offset": [
        1633,
        1731
      ],
      "op": "DUP1",
      "path": "77"
    },
    "384": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1633,
        1731
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "385": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1633,
        1731
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x194"
    },
    "388": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1633,
        1731
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "389": {
      "offset": [
        1667,
        1680
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "391": {
      "offset": [
        1667,
        1687
      ],
      "op": "DUP1",
      "path": "77"
    },
    "392": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1667,
        1687
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "393": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "396": {
      "op": "NOT"
    },
    "397": {
      "offset": [
        1701,
        1720
      ],
      "op": "AND",
      "path": "77"
    },
    "398": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1701,
        1720
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x101"
    },
    "401": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1701,
        1720
      ],
      "op": "OR",
      "path": "77"
    },
    "402": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1701,
        1720
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "403": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1701,
        1720
      ],
      "op": "SSTORE",
      "path": "77"
    },
    "404": {
      "offset": [
        1633,
        1731
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "405": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        527,
        528
      ],
      "op": "PUSH1",
      "path": "53",
      "statement": 1,
      "value": "0x1"
    },
    "407": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        527,
        533
      ],
      "op": "DUP3",
      "path": "53"
    },
    "408": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        527,
        533
      ],
      "op": "SWAP1",
      "path": "53"
    },
    "409": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        527,
        533
      ],
      "op": "SSTORE",
      "path": "53"
    },
    "410": {
      "offset": [
        1753,
        1819
      ],
      "op": "DUP1",
      "path": "77"
    },
    "411": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1753,
        1819
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "412": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1753,
        1819
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x1AB"
    },
    "415": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1753,
        1819
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "416": {
      "offset": [
        1803,
        1808
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "418": {
      "offset": [
        1787,
        1808
      ],
      "op": "DUP1",
      "path": "77"
    },
    "419": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1787,
        1808
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "420": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "423": {
      "op": "NOT"
    },
    "424": {
      "offset": [
        1787,
        1808
      ],
      "op": "AND",
      "path": "77"
    },
    "425": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1787,
        1808
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "426": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        1787,
        1808
      ],
      "op": "SSTORE",
      "path": "77"
    },
    "427": {
      "offset": [
        1753,
        1819
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "428": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "POP",
      "path": "53"
    },
    "429": {
      "fn": "InitializableMock.initializeWithX",
      "offset": [
        457,
        538
      ],
      "op": "POP",
      "path": "53"
    },
    "430": {
      "fn": "InitializableMock.initializeWithX",
      "jump": "o",
      "offset": [
        457,
        538
      ],
      "op": "JUMP",
      "path": "53"
    },
    "431": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "432": {
      "offset": [
        1495,
        1508
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "434": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1495,
        1508
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "435": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1495,
        1508
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x100"
    },
    "438": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1495,
        1508
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "439": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1495,
        1508
      ],
      "op": "DIV",
      "path": "77"
    },
    "440": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1495,
        1508
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0xFF"
    },
    "442": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1495,
        1508
      ],
      "op": "AND",
      "path": "77"
    },
    "443": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1495,
        1508
      ],
      "op": "DUP1",
      "path": "77"
    },
    "444": {
      "offset": [
        1495,
        1525
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x1C8"
    },
    "447": {
      "offset": [
        1495,
        1525
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "448": {
      "op": "POP"
    },
    "449": {
      "offset": [
        1513,
        1525
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "451": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1513,
        1525
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "452": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1513,
        1525
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0xFF"
    },
    "454": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1513,
        1525
      ],
      "op": "AND",
      "path": "77"
    },
    "455": {
      "offset": [
        1512,
        1525
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "456": {
      "offset": [
        1495,
        1525
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "457": {
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x1E4"
    },
    "460": {
      "offset": [
        1487,
        1576
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "461": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x40"
    },
    "463": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1487,
        1576
      ],
      "op": "MLOAD",
      "path": "77"
    },
    "464": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "468": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "470": {
      "op": "SHL"
    },
    "471": {
      "offset": [
        1487,
        1576
      ],
      "op": "DUP2",
      "path": "77"
    },
    "472": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1487,
        1576
      ],
      "op": "MSTORE",
      "path": "77"
    },
    "473": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x4"
    },
    "475": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1487,
        1576
      ],
      "op": "ADD",
      "path": "77"
    },
    "476": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x169"
    },
    "479": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1487,
        1576
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "480": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x2FF"
    },
    "483": {
      "fn": "InitializableMock.initialize",
      "jump": "i",
      "offset": [
        1487,
        1576
      ],
      "op": "JUMP",
      "path": "77"
    },
    "484": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1487,
        1576
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "485": {
      "offset": [
        1587,
        1606
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "487": {
      "offset": [
        1610,
        1623
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "488": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1610,
        1623
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x100"
    },
    "491": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1610,
        1623
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "492": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1610,
        1623
      ],
      "op": "DIV",
      "path": "77"
    },
    "493": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1610,
        1623
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0xFF"
    },
    "495": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1610,
        1623
      ],
      "op": "AND",
      "path": "77"
    },
    "496": {
      "offset": [
        1609,
        1623
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "497": {
      "offset": [
        1633,
        1731
      ],
      "op": "DUP1",
      "path": "77"
    },
    "498": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1633,
        1731
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "499": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1633,
        1731
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x206"
    },
    "502": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1633,
        1731
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "503": {
      "offset": [
        1667,
        1680
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "505": {
      "offset": [
        1667,
        1687
      ],
      "op": "DUP1",
      "path": "77"
    },
    "506": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1667,
        1687
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "507": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "510": {
      "op": "NOT"
    },
    "511": {
      "offset": [
        1701,
        1720
      ],
      "op": "AND",
      "path": "77"
    },
    "512": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1701,
        1720
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x101"
    },
    "515": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1701,
        1720
      ],
      "op": "OR",
      "path": "77"
    },
    "516": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1701,
        1720
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "517": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1701,
        1720
      ],
      "op": "SSTORE",
      "path": "77"
    },
    "518": {
      "offset": [
        1633,
        1731
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "519": {
      "fn": "InitializableMock.initialize",
      "offset": [
        353,
        367
      ],
      "op": "PUSH1",
      "path": "53",
      "statement": 2,
      "value": "0x0"
    },
    "521": {
      "fn": "InitializableMock.initialize",
      "offset": [
        353,
        374
      ],
      "op": "DUP1",
      "path": "53"
    },
    "522": {
      "fn": "InitializableMock.initialize",
      "offset": [
        353,
        374
      ],
      "op": "SLOAD",
      "path": "53"
    },
    "523": {
      "op": "PUSH3",
      "value": "0xFF0000"
    },
    "527": {
      "op": "NOT"
    },
    "528": {
      "fn": "InitializableMock.initialize",
      "offset": [
        353,
        374
      ],
      "op": "AND",
      "path": "53"
    },
    "529": {
      "fn": "InitializableMock.initialize",
      "offset": [
        353,
        374
      ],
      "op": "PUSH3",
      "path": "53",
      "value": "0x10000"
    },
    "533": {
      "fn": "InitializableMock.initialize",
      "offset": [
        353,
        374
      ],
      "op": "OR",
      "path": "53"
    },
    "534": {
      "fn": "InitializableMock.initialize",
      "offset": [
        353,
        374
      ],
      "op": "SWAP1",
      "path": "53"
    },
    "535": {
      "fn": "InitializableMock.initialize",
      "offset": [
        353,
        374
      ],
      "op": "SSTORE",
      "path": "53"
    },
    "536": {
      "offset": [
        1753,
        1819
      ],
      "op": "DUP1",
      "path": "77"
    },
    "537": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1753,
        1819
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "538": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1753,
        1819
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x229"
    },
    "541": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1753,
        1819
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "542": {
      "offset": [
        1803,
        1808
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "544": {
      "offset": [
        1787,
        1808
      ],
      "op": "DUP1",
      "path": "77"
    },
    "545": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1787,
        1808
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "546": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "549": {
      "op": "NOT"
    },
    "550": {
      "offset": [
        1787,
        1808
      ],
      "op": "AND",
      "path": "77"
    },
    "551": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1787,
        1808
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "552": {
      "fn": "InitializableMock.initialize",
      "offset": [
        1787,
        1808
      ],
      "op": "SSTORE",
      "path": "77"
    },
    "553": {
      "offset": [
        1753,
        1819
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "554": {
      "fn": "InitializableMock.initialize",
      "offset": [
        306,
        379
      ],
      "op": "POP",
      "path": "53"
    },
    "555": {
      "fn": "InitializableMock.initialize",
      "jump": "o",
      "offset": [
        306,
        379
      ],
      "op": "JUMP",
      "path": "53"
    },
    "556": {
      "fn": "InitializableMock.fail",
      "offset": [
        616,
        705
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "557": {
      "fn": "InitializableMock.fail",
      "offset": [
        650,
        700
      ],
      "op": "PUSH1",
      "path": "53",
      "statement": 3,
      "value": "0x40"
    },
    "559": {
      "fn": "InitializableMock.fail",
      "offset": [
        650,
        700
      ],
      "op": "MLOAD",
      "path": "53"
    },
    "560": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "564": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "566": {
      "op": "SHL"
    },
    "567": {
      "fn": "InitializableMock.fail",
      "offset": [
        650,
        700
      ],
      "op": "DUP2",
      "path": "53"
    },
    "568": {
      "fn": "InitializableMock.fail",
      "offset": [
        650,
        700
      ],
      "op": "MSTORE",
      "path": "53"
    },
    "569": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "571": {
      "fn": "InitializableMock.fail",
      "offset": [
        650,
        700
      ],
      "op": "PUSH1",
      "path": "53",
      "value": "0x4"
    },
    "573": {
      "fn": "InitializableMock.fail",
      "offset": [
        650,
        700
      ],
      "op": "DUP3",
      "path": "53"
    },
    "574": {
      "fn": "InitializableMock.fail",
      "offset": [
        650,
        700
      ],
      "op": "ADD",
      "path": "53"
    },
    "575": {
      "op": "DUP2"
    },
    "576": {
      "op": "SWAP1"
    },
    "577": {
      "op": "MSTORE"
    },
    "578": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "580": {
      "op": "DUP3"
    },
    "581": {
      "op": "ADD"
    },
    "582": {
      "op": "MSTORE"
    },
    "583": {
      "op": "PUSH32",
      "value": "0x496E697469616C697A61626C654D6F636B20666F72636564206661696C757265"
    },
    "616": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "618": {
      "op": "DUP3"
    },
    "619": {
      "op": "ADD"
    },
    "620": {
      "op": "MSTORE"
    },
    "621": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "623": {
      "op": "ADD"
    },
    "624": {
      "fn": "InitializableMock.fail",
      "offset": [
        650,
        700
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x169"
    },
    "627": {
      "op": "JUMP"
    },
    "628": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "629": {
      "offset": [
        1495,
        1508
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "631": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1495,
        1508
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "632": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1495,
        1508
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x100"
    },
    "635": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1495,
        1508
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "636": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1495,
        1508
      ],
      "op": "DIV",
      "path": "77"
    },
    "637": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1495,
        1508
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0xFF"
    },
    "639": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1495,
        1508
      ],
      "op": "AND",
      "path": "77"
    },
    "640": {
      "branch": 5,
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1495,
        1508
      ],
      "op": "DUP1",
      "path": "77"
    },
    "641": {
      "offset": [
        1495,
        1525
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x28D"
    },
    "644": {
      "branch": 5,
      "offset": [
        1495,
        1525
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "645": {
      "op": "POP"
    },
    "646": {
      "offset": [
        1513,
        1525
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "648": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1513,
        1525
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "649": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1513,
        1525
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0xFF"
    },
    "651": {
      "branch": 6,
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1513,
        1525
      ],
      "op": "AND",
      "path": "77"
    },
    "652": {
      "offset": [
        1512,
        1525
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "653": {
      "offset": [
        1495,
        1525
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "654": {
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x2A9"
    },
    "657": {
      "branch": 6,
      "offset": [
        1487,
        1576
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "658": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x40"
    },
    "660": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1487,
        1576
      ],
      "op": "MLOAD",
      "path": "77"
    },
    "661": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "665": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "667": {
      "op": "SHL"
    },
    "668": {
      "offset": [
        1487,
        1576
      ],
      "op": "DUP2",
      "path": "77"
    },
    "669": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1487,
        1576
      ],
      "op": "MSTORE",
      "path": "77"
    },
    "670": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x4"
    },
    "672": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1487,
        1576
      ],
      "op": "ADD",
      "path": "77"
    },
    "673": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x169"
    },
    "676": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1487,
        1576
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "677": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1487,
        1576
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x2FF"
    },
    "680": {
      "fn": "InitializableMock.initializeNested",
      "jump": "i",
      "offset": [
        1487,
        1576
      ],
      "op": "JUMP",
      "path": "77"
    },
    "681": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1487,
        1576
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "682": {
      "offset": [
        1587,
        1606
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "684": {
      "offset": [
        1610,
        1623
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "685": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1610,
        1623
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x100"
    },
    "688": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1610,
        1623
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "689": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1610,
        1623
      ],
      "op": "DIV",
      "path": "77"
    },
    "690": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1610,
        1623
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0xFF"
    },
    "692": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1610,
        1623
      ],
      "op": "AND",
      "path": "77"
    },
    "693": {
      "offset": [
        1609,
        1623
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "694": {
      "offset": [
        1633,
        1731
      ],
      "op": "DUP1",
      "path": "77"
    },
    "695": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1633,
        1731
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "696": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1633,
        1731
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x2CB"
    },
    "699": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1633,
        1731
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "700": {
      "offset": [
        1667,
        1680
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "702": {
      "offset": [
        1667,
        1687
      ],
      "op": "DUP1",
      "path": "77"
    },
    "703": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1667,
        1687
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "704": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "707": {
      "op": "NOT"
    },
    "708": {
      "offset": [
        1701,
        1720
      ],
      "op": "AND",
      "path": "77"
    },
    "709": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1701,
        1720
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x101"
    },
    "712": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1701,
        1720
      ],
      "op": "OR",
      "path": "77"
    },
    "713": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1701,
        1720
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "714": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1701,
        1720
      ],
      "op": "SSTORE",
      "path": "77"
    },
    "715": {
      "offset": [
        1633,
        1731
      ],
      "op": "JUMPDEST",
      "path": "77"
    },
    "716": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        436,
        448
      ],
      "op": "PUSH2",
      "path": "53",
      "statement": 4,
      "value": "0x2D3"
    },
    "719": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        436,
        446
      ],
      "op": "PUSH2",
      "path": "53",
      "value": "0x1AF"
    },
    "722": {
      "fn": "InitializableMock.initializeNested",
      "jump": "i",
      "offset": [
        436,
        448
      ],
      "op": "JUMP",
      "path": "53"
    },
    "723": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        436,
        448
      ],
      "op": "JUMPDEST",
      "path": "53"
    },
    "724": {
      "offset": [
        1757,
        1771
      ],
      "op": "DUP1",
      "path": "77"
    },
    "725": {
      "offset": [
        1753,
        1819
      ],
      "op": "ISZERO",
      "path": "77"
    },
    "726": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1753,
        1819
      ],
      "op": "PUSH2",
      "path": "77",
      "value": "0x229"
    },
    "729": {
      "offset": [
        1753,
        1819
      ],
      "op": "JUMPI",
      "path": "77"
    },
    "730": {
      "offset": [
        1803,
        1808
      ],
      "op": "PUSH1",
      "path": "77",
      "value": "0x0"
    },
    "732": {
      "offset": [
        1787,
        1808
      ],
      "op": "DUP1",
      "path": "77"
    },
    "733": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1787,
        1808
      ],
      "op": "SLOAD",
      "path": "77"
    },
    "734": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "737": {
      "op": "NOT"
    },
    "738": {
      "offset": [
        1787,
        1808
      ],
      "op": "AND",
      "path": "77"
    },
    "739": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1787,
        1808
      ],
      "op": "SWAP1",
      "path": "77"
    },
    "740": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        1787,
        1808
      ],
      "op": "SSTORE",
      "path": "77"
    },
    "741": {
      "fn": "InitializableMock.initializeNested",
      "offset": [
        383,
        453
      ],
      "op": "POP",
      "path": "53"
    },
    "742": {
      "fn": "InitializableMock.initializeNested",
      "jump": "o",
      "offset": [
        383,
        453
      ],
      "op": "JUMP",
      "path": "53"
    },
    "743": {
      "op": "JUMPDEST"
    },
    "744": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "746": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "748": {
      "op": "DUP3"
    },
    "749": {
      "op": "DUP5"
    },
    "750": {
      "op": "SUB"
    },
    "751": {
      "op": "SLT"
    },
    "752": {
      "op": "ISZERO"
    },
    "753": {
      "op": "PUSH2",
      "value": "0x2F8"
    },
    "756": {
      "op": "JUMPI"
    },
    "757": {
      "op": "DUP1"
    },
    "758": {
      "op": "DUP2"
    },
    "759": {
      "op": "REVERT"
    },
    "760": {
      "op": "JUMPDEST"
    },
    "761": {
      "op": "POP"
    },
    "762": {
      "op": "CALLDATALOAD"
    },
    "763": {
      "op": "SWAP2"
    },
    "764": {
      "op": "SWAP1"
    },
    "765": {
      "op": "POP"
    },
    "766": {
      "jump": "o",
      "op": "JUMP"
    },
    "767": {
      "op": "JUMPDEST"
    },
    "768": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "770": {
      "op": "DUP1"
    },
    "771": {
      "op": "DUP3"
    },
    "772": {
      "op": "MSTORE"
    },
    "773": {
      "op": "PUSH1",
      "value": "0x2E"
    },
    "775": {
      "op": "SWAP1"
    },
    "776": {
      "op": "DUP3"
    },
    "777": {
      "op": "ADD"
    },
    "778": {
      "op": "MSTORE"
    },
    "779": {
      "op": "PUSH32",
      "value": "0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
    },
    "812": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "814": {
      "op": "DUP3"
    },
    "815": {
      "op": "ADD"
    },
    "816": {
      "op": "MSTORE"
    },
    "817": {
      "op": "PUSH14",
      "value": "0x191E481A5B9A5D1A585B1A5E9959"
    },
    "832": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "834": {
      "op": "SHL"
    },
    "835": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "837": {
      "op": "DUP3"
    },
    "838": {
      "op": "ADD"
    },
    "839": {
      "op": "MSTORE"
    },
    "840": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "842": {
      "op": "ADD"
    },
    "843": {
      "op": "SWAP1"
    },
    "844": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "fee21e61504b961c1b1d2011357ffa6a13688d1b",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @title InitializableMock\n * @dev This contract is a mock to test initializable functionality\n */\ncontract InitializableMock is Initializable {\n\n  bool public initializerRan;\n  uint256 public x;\n\n  function initialize() public initializer {\n    initializerRan = true;\n  }\n\n  function initializeNested() public initializer {\n    initialize();\n  }\n\n  function initializeWithX(uint256 _x) public payable initializer {\n    x = _x;\n  }\n\n  function nonInitializable(uint256 _x) public payable {\n    x = _x;\n  }\n\n  function fail() public pure {\n    require(false, \"InitializableMock forced failure\");\n  }\n\n}\n",
  "sourceMap": "206:502:53:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin-contracts/contracts/mocks/InitializableMock.sol",
  "type": "contract"
}