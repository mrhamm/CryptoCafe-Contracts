{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "NewInstance",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "initdata",
          "type": "bytes"
        }
      ],
      "name": "clone",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "initdata",
          "type": "bytes"
        }
      ],
      "name": "cloneDeterministic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "predictDeterministicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "predicted",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "119": "contracts/openzeppelin-contracts/contracts/utils/Address.sol",
    "15": "contracts/openzeppelin-contracts/contracts/mocks/ClonesMock.sol",
    "69": "contracts/openzeppelin-contracts/contracts/proxy/Clones.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-contracts/contracts/mocks/ClonesMock.sol",
    "exportedSymbols": {
      "Address": [
        14906
      ],
      "Clones": [
        7124
      ],
      "ClonesMock": [
        2410
      ]
    },
    "id": 2411,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2323,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:15"
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/proxy/Clones.sol",
        "file": "../proxy/Clones.sol",
        "id": 2324,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2411,
        "sourceUnit": 7125,
        "src": "58:29:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/utils/Address.sol",
        "file": "../utils/Address.sol",
        "id": 2325,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2411,
        "sourceUnit": 14907,
        "src": "88:30:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 2410,
        "linearizedBaseContracts": [
          2410
        ],
        "name": "ClonesMock",
        "nameLocation": "129:10:15",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 2328,
            "libraryName": {
              "id": 2326,
              "name": "Address",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 14906,
              "src": "152:7:15"
            },
            "nodeType": "UsingForDirective",
            "src": "146:26:15",
            "typeName": {
              "id": 2327,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "164:7:15",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            }
          },
          {
            "id": 2331,
            "libraryName": {
              "id": 2329,
              "name": "Clones",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7124,
              "src": "183:6:15"
            },
            "nodeType": "UsingForDirective",
            "src": "177:25:15",
            "typeName": {
              "id": 2330,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "194:7:15",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            }
          },
          {
            "anonymous": false,
            "id": 2335,
            "name": "NewInstance",
            "nameLocation": "214:11:15",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 2334,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2333,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "instance",
                  "nameLocation": "234:8:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2335,
                  "src": "226:16:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2332,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "226:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "225:18:15"
            },
            "src": "208:36:15"
          },
          {
            "body": {
              "id": 2349,
              "nodeType": "Block",
              "src": "329:63:15",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 2343,
                            "name": "implementation",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2337,
                            "src": "352:14:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 2344,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "clone",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 7067,
                          "src": "352:20:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_address_$bound_to$_t_address_$",
                            "typeString": "function (address) returns (address)"
                          }
                        },
                        "id": 2345,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "352:22:15",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2346,
                        "name": "initdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2339,
                        "src": "376:8:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 2342,
                      "name": "_initAndEmit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2409,
                      "src": "339:12:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory)"
                      }
                    },
                    "id": 2347,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "339:46:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2348,
                  "nodeType": "ExpressionStatement",
                  "src": "339:46:15"
                }
              ]
            },
            "functionSelector": "0fbe133c",
            "id": 2350,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "clone",
            "nameLocation": "259:5:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2340,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2337,
                  "mutability": "mutable",
                  "name": "implementation",
                  "nameLocation": "273:14:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2350,
                  "src": "265:22:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2336,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "265:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2339,
                  "mutability": "mutable",
                  "name": "initdata",
                  "nameLocation": "304:8:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2350,
                  "src": "289:23:15",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 2338,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "289:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "264:49:15"
            },
            "returnParameters": {
              "id": 2341,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "329:0:15"
            },
            "scope": 2410,
            "src": "250:142:15",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2367,
              "nodeType": "Block",
              "src": "504:80:15",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 2362,
                            "name": "salt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2354,
                            "src": "561:4:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 2360,
                            "name": "implementation",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2352,
                            "src": "527:14:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 2361,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "cloneDeterministic",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 7089,
                          "src": "527:33:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes32_$returns$_t_address_$bound_to$_t_address_$",
                            "typeString": "function (address,bytes32) returns (address)"
                          }
                        },
                        "id": 2363,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "527:39:15",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2364,
                        "name": "initdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2356,
                        "src": "568:8:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 2359,
                      "name": "_initAndEmit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2409,
                      "src": "514:12:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory)"
                      }
                    },
                    "id": 2365,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "514:63:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2366,
                  "nodeType": "ExpressionStatement",
                  "src": "514:63:15"
                }
              ]
            },
            "functionSelector": "6e9ebc81",
            "id": 2368,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "cloneDeterministic",
            "nameLocation": "407:18:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2357,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2352,
                  "mutability": "mutable",
                  "name": "implementation",
                  "nameLocation": "434:14:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2368,
                  "src": "426:22:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2351,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "426:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2354,
                  "mutability": "mutable",
                  "name": "salt",
                  "nameLocation": "458:4:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2368,
                  "src": "450:12:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 2353,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "450:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2356,
                  "mutability": "mutable",
                  "name": "initdata",
                  "nameLocation": "479:8:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2368,
                  "src": "464:23:15",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 2355,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "464:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "425:63:15"
            },
            "returnParameters": {
              "id": 2358,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "504:0:15"
            },
            "scope": 2410,
            "src": "398:186:15",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2382,
              "nodeType": "Block",
              "src": "705:72:15",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2379,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2372,
                        "src": "765:4:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 2377,
                        "name": "implementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2370,
                        "src": "722:14:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 2378,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "predictDeterministicAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7123,
                      "src": "722:42:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes32_$returns$_t_address_$bound_to$_t_address_$",
                        "typeString": "function (address,bytes32) view returns (address)"
                      }
                    },
                    "id": 2380,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "722:48:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 2376,
                  "id": 2381,
                  "nodeType": "Return",
                  "src": "715:55:15"
                }
              ]
            },
            "functionSelector": "360d0fad",
            "id": 2383,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "predictDeterministicAddress",
            "nameLocation": "599:27:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2373,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2370,
                  "mutability": "mutable",
                  "name": "implementation",
                  "nameLocation": "635:14:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2383,
                  "src": "627:22:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2369,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "627:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2372,
                  "mutability": "mutable",
                  "name": "salt",
                  "nameLocation": "659:4:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2383,
                  "src": "651:12:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 2371,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "651:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "626:38:15"
            },
            "returnParameters": {
              "id": 2376,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2375,
                  "mutability": "mutable",
                  "name": "predicted",
                  "nameLocation": "694:9:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2383,
                  "src": "686:17:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2374,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "686:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "685:19:15"
            },
            "scope": 2410,
            "src": "590:187:15",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2408,
              "nodeType": "Block",
              "src": "854:153:15",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2393,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2390,
                        "name": "initdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2387,
                        "src": "868:8:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 2391,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "868:15:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 2392,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "886:1:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "868:19:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2403,
                  "nodeType": "IfStatement",
                  "src": "864:101:15",
                  "trueBody": {
                    "id": 2402,
                    "nodeType": "Block",
                    "src": "889:76:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2397,
                              "name": "initdata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2387,
                              "src": "934:8:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "expression": {
                                "id": 2398,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "944:3:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2399,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "944:9:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2394,
                              "name": "instance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2385,
                              "src": "903:8:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 2396,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "functionCallWithValue",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 14721,
                            "src": "903:30:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
                              "typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
                            }
                          },
                          "id": 2400,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "903:51:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 2401,
                        "nodeType": "ExpressionStatement",
                        "src": "903:51:15"
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 2405,
                        "name": "instance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2385,
                        "src": "991:8:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2404,
                      "name": "NewInstance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2335,
                      "src": "979:11:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 2406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "979:21:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2407,
                  "nodeType": "EmitStatement",
                  "src": "974:26:15"
                }
              ]
            },
            "id": 2409,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_initAndEmit",
            "nameLocation": "792:12:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2388,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2385,
                  "mutability": "mutable",
                  "name": "instance",
                  "nameLocation": "813:8:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2409,
                  "src": "805:16:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2384,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "805:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2387,
                  "mutability": "mutable",
                  "name": "initdata",
                  "nameLocation": "836:8:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 2409,
                  "src": "823:21:15",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 2386,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "823:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "804:41:15"
            },
            "returnParameters": {
              "id": 2389,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "854:0:15"
            },
            "scope": 2410,
            "src": "783:224:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "scope": 2411,
        "src": "120:889:15"
      }
    ],
    "src": "33:977:15"
  },
  "bytecode": "608060405234801561001057600080fd5b506106cd806100206000396000f3fe6080604052600436106100345760003560e01c80630fbe133c14610039578063360d0fad1461004e5780636e9ebc811461008a575b600080fd5b61004c6100473660046105a2565b61009d565b005b34801561005a57600080fd5b5061006e610069366004610521565b6100f3565b6040516001600160a01b03909116815260200160405180910390f35b61004c61009836600461054a565b610111565b6100ee6100b2846001600160a01b031661012d565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101cf92505050565b505050565b60006101086001600160a01b0384168361022c565b90505b92915050565b6101276100b26001600160a01b03861685610292565b50505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166101ca5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064015b60405180910390fd5b919050565b8051156101ec576101ea6001600160a01b0383168234610332565b505b6040516001600160a01b03831681527f39a773f10839d86923d91d5ce7d6642f2f63a95d850495abb1f162e38aa04ea59060200160405180910390a15050565b6000610108838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661010b5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016101c1565b606061035884848460405180606001604052806029815260200161066f60299139610362565b90505b9392505050565b6060824710156103c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101c1565b843b6104115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101c1565b600080866001600160a01b0316858760405161042d91906105f3565b60006040518083038185875af1925050503d806000811461046a576040519150601f19603f3d011682016040523d82523d6000602084013e61046f565b606091505b509150915061047f82828661048a565b979650505050505050565b6060831561049957508161035b565b8251156104a95782518084602001fd5b8160405162461bcd60e51b81526004016101c1919061060f565b80356001600160a01b03811681146101ca57600080fd5b60008083601f8401126104eb578182fd5b50813567ffffffffffffffff811115610502578182fd5b60208301915083602082850101111561051a57600080fd5b9250929050565b60008060408385031215610533578182fd5b61053c836104c3565b946020939093013593505050565b6000806000806060858703121561055f578182fd5b610568856104c3565b935060208501359250604085013567ffffffffffffffff81111561058a578283fd5b610596878288016104da565b95989497509550505050565b6000806000604084860312156105b6578283fd5b6105bf846104c3565b9250602084013567ffffffffffffffff8111156105da578283fd5b6105e6868287016104da565b9497909650939450505050565b60008251610605818460208701610642565b9190910192915050565b600060208252825180602084015261062e816040850160208701610642565b601f01601f19169190910160400192915050565b60005b8381101561065d578181015183820152602001610645565b83811115610127575050600091015256fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220c0605a2b3e0ebc48d05a695e50efdde3cf9209805d359bd3bddddae418ee1e8564736f6c63430008030033",
  "bytecodeSha1": "128dd0e2df614660105c49f40f2ee1e1f12e976f",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.3+commit.8d00100c"
  },
  "contractName": "ClonesMock",
  "coverageMap": {
    "branches": {
      "119": {
        "Address._verifyCallResult": {
          "16": [
            7226,
            7233,
            false
          ],
          "17": [
            7367,
            7388,
            false
          ]
        },
        "Address.functionCallWithValue": {
          "15": [
            4759,
            4789,
            true
          ]
        }
      },
      "15": {
        "ClonesMock._initAndEmit": {
          "14": [
            868,
            887,
            false
          ]
        }
      },
      "69": {
        "Clones.clone": {
          "18": [
            1421,
            1443,
            true
          ]
        },
        "Clones.cloneDeterministic": {
          "19": [
            2401,
            2423,
            true
          ]
        }
      }
    },
    "statements": {
      "119": {
        "Address._verifyCallResult": {
          "12": [
            7249,
            7266
          ],
          "13": [
            7757,
            7777
          ]
        },
        "Address.functionCallWithValue": {
          "8": [
            4251,
            4345
          ],
          "9": [
            4751,
            4832
          ],
          "10": [
            4842,
            4902
          ],
          "11": [
            5057,
            5116
          ]
        }
      },
      "15": {
        "ClonesMock._initAndEmit": {
          "4": [
            903,
            954
          ],
          "5": [
            974,
            1000
          ]
        },
        "ClonesMock.clone": {
          "0": [
            339,
            385
          ]
        },
        "ClonesMock.cloneDeterministic": {
          "2": [
            514,
            577
          ]
        },
        "ClonesMock.predictDeterministicAddress": {
          "1": [
            715,
            770
          ]
        }
      },
      "69": {
        "Clones.clone": {
          "3": [
            1413,
            1470
          ]
        },
        "Clones.cloneDeterministic": {
          "7": [
            2393,
            2451
          ]
        },
        "Clones.predictDeterministicAddress": {
          "6": [
            3535,
            3606
          ]
        }
      }
    }
  },
  "dependencies": [
    "Address",
    "Clones"
  ],
  "deployedBytecode": "6080604052600436106100345760003560e01c80630fbe133c14610039578063360d0fad1461004e5780636e9ebc811461008a575b600080fd5b61004c6100473660046105a2565b61009d565b005b34801561005a57600080fd5b5061006e610069366004610521565b6100f3565b6040516001600160a01b03909116815260200160405180910390f35b61004c61009836600461054a565b610111565b6100ee6100b2846001600160a01b031661012d565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101cf92505050565b505050565b60006101086001600160a01b0384168361022c565b90505b92915050565b6101276100b26001600160a01b03861685610292565b50505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166101ca5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064015b60405180910390fd5b919050565b8051156101ec576101ea6001600160a01b0383168234610332565b505b6040516001600160a01b03831681527f39a773f10839d86923d91d5ce7d6642f2f63a95d850495abb1f162e38aa04ea59060200160405180910390a15050565b6000610108838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661010b5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016101c1565b606061035884848460405180606001604052806029815260200161066f60299139610362565b90505b9392505050565b6060824710156103c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101c1565b843b6104115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101c1565b600080866001600160a01b0316858760405161042d91906105f3565b60006040518083038185875af1925050503d806000811461046a576040519150601f19603f3d011682016040523d82523d6000602084013e61046f565b606091505b509150915061047f82828661048a565b979650505050505050565b6060831561049957508161035b565b8251156104a95782518084602001fd5b8160405162461bcd60e51b81526004016101c1919061060f565b80356001600160a01b03811681146101ca57600080fd5b60008083601f8401126104eb578182fd5b50813567ffffffffffffffff811115610502578182fd5b60208301915083602082850101111561051a57600080fd5b9250929050565b60008060408385031215610533578182fd5b61053c836104c3565b946020939093013593505050565b6000806000806060858703121561055f578182fd5b610568856104c3565b935060208501359250604085013567ffffffffffffffff81111561058a578283fd5b610596878288016104da565b95989497509550505050565b6000806000604084860312156105b6578283fd5b6105bf846104c3565b9250602084013567ffffffffffffffff8111156105da578283fd5b6105e6868287016104da565b9497909650939450505050565b60008251610605818460208701610642565b9190910192915050565b600060208252825180602084015261062e816040850160208701610642565b601f01601f19169190910160400192915050565b60005b8381101561065d578181015183820152602001610645565b83811115610127575050600091015256fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220c0605a2b3e0ebc48d05a695e50efdde3cf9209805d359bd3bddddae418ee1e8564736f6c63430008030033",
  "deployedSourceMap": "120:889:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;250:142;;;;;;:::i;:::-;;:::i;:::-;;590:187;;;;;;;;;;-1:-1:-1;590:187:15;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2368:32:144;;;2350:51;;2338:2;2323:18;590:187:15;;;;;;;398:186;;;;;;:::i;:::-;;:::i;250:142::-;339:46;352:22;:14;-1:-1:-1;;;;;352:20:15;;:22::i;:::-;376:8;;339:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;339:12:15;;-1:-1:-1;;;339:46:15:i;:::-;250:142;;;:::o;590:187::-;686:17;722:48;-1:-1:-1;;;;;722:42:15;;765:4;722:42;:48::i;:::-;715:55;;590:187;;;;;:::o;398:186::-;514:63;527:39;-1:-1:-1;;;;;527:33:15;;561:4;527:33;:39::i;514:63::-;398:186;;;;:::o;906:571:69:-;963:16;1087:4;1081:11;-1:-1:-1;;;1112:3:69;1105:79;1230:14;1224:4;1220:25;1213:4;1208:3;1204:14;1197:49;-1:-1:-1;;;1275:4:69;1270:3;1266:14;1259:90;1389:4;1384:3;1381:1;1374:20;1362:32;-1:-1:-1;;;;;;;1421:22:69;;1413:57;;;;-1:-1:-1;;;1413:57:69;;3761:2:144;1413:57:69;;;3743:21:144;3800:2;3780:18;;;3773:30;-1:-1:-1;;;3819:18:144;;;3812:52;3881:18;;1413:57:69;;;;;;;;;906:571;;;:::o;783:224:15:-;868:15;;:19;864:101;;903:51;-1:-1:-1;;;;;903:30:15;;934:8;944:9;903:30;:51::i;:::-;;864:101;979:21;;-1:-1:-1;;;;;2368:32:144;;2350:51;;979:21:15;;2338:2:144;2323:18;979:21:15;;;;;;;783:224;;:::o;3408:205:69:-;3506:17;3542:64;3570:14;3586:4;3600;2809;2803:11;-1:-1:-1;;;2827:79:69;;2946:4;2942:25;;;2935:4;2926:14;;2919:49;-1:-1:-1;;;2997:4:69;2988:14;;2981:90;3107:19;;3100:4;3091:14;;3084:43;3156:4;3147:14;;3140:28;3219:4;3204:20;;;3197:4;3188:14;;3181:44;3277:4;3261:14;;3251:31;;2778:514;1852:606;1936:16;2060:4;2054:11;-1:-1:-1;;;2085:3:69;2078:79;2203:14;2197:4;2193:25;2186:4;2181:3;2177:14;2170:49;-1:-1:-1;;;2248:4:69;2243:3;2239:14;2232:90;2369:4;2363;2358:3;2355:1;2347:27;2335:39;-1:-1:-1;;;;;;;2401:22:69;;2393:58;;;;-1:-1:-1;;;2393:58:69;;3002:2:144;2393:58:69;;;2984:21:144;3041:2;3021:18;;;3014:30;3080:25;3060:18;;;3053:53;3123:18;;2393:58:69;2974:173:144;4128:224:119;4227:12;4258:87;4280:6;4288:4;4294:5;4258:87;;;;;;;;;;;;;;;;;:21;:87::i;:::-;4251:94;;4128:224;;;;;;:::o;4600:523::-;4727:12;4784:5;4759:21;:30;;4751:81;;;;-1:-1:-1;;;4751:81:119;;3354:2:144;4751:81:119;;;3336:21:144;3393:2;3373:18;;;3366:30;3432:34;3412:18;;;3405:62;-1:-1:-1;;;3483:18:144;;;3476:36;3529:19;;4751:81:119;3326:228:144;4751:81:119;1078:20;;4842:60;;;;-1:-1:-1;;;4842:60:119;;4112:2:144;4842:60:119;;;4094:21:144;4151:2;4131:18;;;4124:30;4190:31;4170:18;;;4163:59;4239:18;;4842:60:119;4084:179:144;4842:60:119;4973:12;4987:23;5014:6;-1:-1:-1;;;;;5014:11:119;5034:5;5042:4;5014:33;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4972:75;;;;5064:52;5082:7;5091:10;5103:12;5064:17;:52::i;:::-;5057:59;4600:523;-1:-1:-1;;;;;;;4600:523:119:o;7083:725::-;7198:12;7226:7;7222:580;;;-1:-1:-1;7256:10:119;7249:17;;7222:580;7367:17;;:21;7363:429;;7625:10;7619:17;7685:15;7672:10;7668:2;7664:19;7657:44;7574:145;7764:12;7757:20;;-1:-1:-1;;;7757:20:119;;;;;;;;:::i;14:173:144:-;82:20;;-1:-1:-1;;;;;131:31:144;;121:42;;111:2;;177:1;174;167:12;192:375;;;307:3;300:4;292:6;288:17;284:27;274:2;;332:8;322;315:26;274:2;-1:-1:-1;362:20:144;;405:18;394:30;;391:2;;;444:8;434;427:26;391:2;488:4;480:6;476:17;464:29;;540:3;533:4;524:6;516;512:19;508:30;505:39;502:2;;;557:1;554;547:12;502:2;264:303;;;;;:::o;572:264::-;;;701:2;689:9;680:7;676:23;672:32;669:2;;;722:6;714;707:22;669:2;750:29;769:9;750:29;:::i;:::-;740:39;826:2;811:18;;;;798:32;;-1:-1:-1;;;659:177:144:o;841:571::-;;;;;1006:2;994:9;985:7;981:23;977:32;974:2;;;1027:6;1019;1012:22;974:2;1055:29;1074:9;1055:29;:::i;:::-;1045:39;;1131:2;1120:9;1116:18;1103:32;1093:42;;1186:2;1175:9;1171:18;1158:32;1213:18;1205:6;1202:30;1199:2;;;1250:6;1242;1235:22;1199:2;1294:58;1344:7;1335:6;1324:9;1320:22;1294:58;:::i;:::-;964:448;;;;-1:-1:-1;1371:8:144;-1:-1:-1;;;;964:448:144:o;1417:503::-;;;;1565:2;1553:9;1544:7;1540:23;1536:32;1533:2;;;1586:6;1578;1571:22;1533:2;1614:29;1633:9;1614:29;:::i;:::-;1604:39;;1694:2;1683:9;1679:18;1666:32;1721:18;1713:6;1710:30;1707:2;;;1758:6;1750;1743:22;1707:2;1802:58;1852:7;1843:6;1832:9;1828:22;1802:58;:::i;:::-;1523:397;;1879:8;;-1:-1:-1;1776:84:144;;-1:-1:-1;;;;1523:397:144:o;1925:274::-;;2092:6;2086:13;2108:53;2154:6;2149:3;2142:4;2134:6;2130:17;2108:53;:::i;:::-;2177:16;;;;;2062:137;-1:-1:-1;;2062:137:144:o;2412:383::-;;2561:2;2550:9;2543:21;2593:6;2587:13;2636:6;2631:2;2620:9;2616:18;2609:34;2652:66;2711:6;2706:2;2695:9;2691:18;2686:2;2678:6;2674:15;2652:66;:::i;:::-;2779:2;2758:15;-1:-1:-1;;2754:29:144;2739:45;;;;2786:2;2735:54;;2533:262;-1:-1:-1;;2533:262:144:o;4268:258::-;4340:1;4350:113;4364:6;4361:1;4358:13;4350:113;;;4440:11;;;4434:18;4421:11;;;4414:39;4386:2;4379:10;4350:113;;;4481:6;4478:1;4475:13;4472:2;;;-1:-1:-1;;4516:1:144;4498:16;;4491:27;4321:205::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    120,
    1009
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xFBE133C EQ PUSH2 0x39 JUMPI DUP1 PUSH4 0x360D0FAD EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0x6E9EBC81 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C PUSH2 0x47 CALLDATASIZE PUSH1 0x4 PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x9D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x521 JUMP JUMPDEST PUSH2 0xF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C PUSH2 0x98 CALLDATASIZE PUSH1 0x4 PUSH2 0x54A JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH2 0xEE PUSH2 0xB2 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12D JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1CF SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x108 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 PUSH2 0x22C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x127 PUSH2 0xB2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP6 PUSH2 0x292 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH20 0x3D602D80600A3D3981F3363D3D373D3D3D363D73 PUSH1 0x60 SHL DUP2 MSTORE DUP3 PUSH1 0x60 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 PUSH1 0x88 SHL PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x37 DUP2 PUSH1 0x0 CREATE SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x115490CC4C4D8DCE8818DC99585D194819985A5B1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1EC JUMPI PUSH2 0x1EA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP3 CALLVALUE PUSH2 0x332 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH32 0x39A773F10839D86923D91D5CE7D6642F2F63A95D850495ABB1F162E38AA04EA5 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x108 DUP4 DUP4 ADDRESS PUSH1 0x40 MLOAD PUSH20 0x3D602D80600A3D3981F3363D3D373D3D3D363D73 PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x60 SWAP4 DUP5 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH16 0x5AF43D82803E903D91602B57FD5BF3FF PUSH1 0x80 SHL PUSH1 0x28 DUP3 ADD MSTORE SWAP3 SHL PUSH1 0x38 DUP4 ADD MSTORE PUSH1 0x4C DUP3 ADD MSTORE PUSH1 0x37 DUP1 DUP3 KECCAK256 PUSH1 0x6C DUP4 ADD MSTORE PUSH1 0x55 SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH20 0x3D602D80600A3D3981F3363D3D373D3D3D363D73 PUSH1 0x60 SHL DUP2 MSTORE DUP4 PUSH1 0x60 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 PUSH1 0x88 SHL PUSH1 0x28 DUP3 ADD MSTORE DUP3 PUSH1 0x37 DUP3 PUSH1 0x0 CREATE2 SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313136373A2063726561746532206661696C6564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x358 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x66F PUSH1 0x29 SWAP2 CODECOPY PUSH2 0x362 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1C1 JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x411 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x42D SWAP2 SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x46A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x46F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x47F DUP3 DUP3 DUP7 PUSH2 0x48A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x499 JUMPI POP DUP2 PUSH2 0x35B JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x4A9 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x60F JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4EB JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x502 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x51A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x533 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x53C DUP4 PUSH2 0x4C3 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x55F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x568 DUP6 PUSH2 0x4C3 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x58A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x596 DUP8 DUP3 DUP9 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5B6 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x5BF DUP5 PUSH2 0x4C3 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5DA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x5E6 DUP7 DUP3 DUP8 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x605 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x642 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x62E DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x642 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x65D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x645 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x127 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2063616C6C KECCAK256 PUSH24 0x6974682076616C7565206661696C6564A264697066735822 SLT KECCAK256 0xC0 PUSH1 0x5A 0x2B RETURNDATACOPY 0xE 0xBC 0x48 0xD0 GAS PUSH10 0x5E50EFDDE3CF9209805D CALLDATALOAD SWAP12 0xD3 0xBD 0xDD 0xDA 0xE4 XOR 0xEE 0x1E DUP6 PUSH5 0x736F6C6343 STOP ADDMOD SUB STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        120,
        1009
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "5": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "8": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "LT",
      "path": "15"
    },
    "9": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x34"
    },
    "12": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "13": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "CALLDATALOAD",
      "path": "15"
    },
    "16": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "SHR",
      "path": "15"
    },
    "19": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "DUP1",
      "path": "15"
    },
    "20": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH4",
      "path": "15",
      "value": "0xFBE133C"
    },
    "25": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "EQ",
      "path": "15"
    },
    "26": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x39"
    },
    "29": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "30": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "DUP1",
      "path": "15"
    },
    "31": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH4",
      "path": "15",
      "value": "0x360D0FAD"
    },
    "36": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "EQ",
      "path": "15"
    },
    "37": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x4E"
    },
    "40": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "41": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "DUP1",
      "path": "15"
    },
    "42": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH4",
      "path": "15",
      "value": "0x6E9EBC81"
    },
    "47": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "EQ",
      "path": "15"
    },
    "48": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x8A"
    },
    "51": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "52": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "53": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "55": {
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "DUP1",
      "path": "15"
    },
    "56": {
      "first_revert": true,
      "fn": null,
      "offset": [
        120,
        1009
      ],
      "op": "REVERT",
      "path": "15"
    },
    "57": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "58": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x4C"
    },
    "61": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x47"
    },
    "64": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "65": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "67": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x5A2"
    },
    "70": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        250,
        392
      ],
      "op": "JUMP",
      "path": "15"
    },
    "71": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "72": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x9D"
    },
    "75": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        250,
        392
      ],
      "op": "JUMP",
      "path": "15"
    },
    "76": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "77": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "STOP",
      "path": "15"
    },
    "78": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "79": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "CALLVALUE",
      "path": "15"
    },
    "80": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "DUP1",
      "path": "15"
    },
    "81": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "ISZERO",
      "path": "15"
    },
    "82": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x5A"
    },
    "85": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "86": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "88": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "DUP1",
      "path": "15"
    },
    "89": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "REVERT",
      "path": "15"
    },
    "90": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "91": {
      "op": "POP"
    },
    "92": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x6E"
    },
    "95": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x69"
    },
    "98": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "99": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "101": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x521"
    },
    "104": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "i",
      "offset": [
        590,
        777
      ],
      "op": "JUMP",
      "path": "15"
    },
    "105": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "106": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0xF3"
    },
    "109": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "i",
      "offset": [
        590,
        777
      ],
      "op": "JUMP",
      "path": "15"
    },
    "110": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "111": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "113": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "114": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "118": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "120": {
      "op": "SHL"
    },
    "121": {
      "op": "SUB"
    },
    "122": {
      "op": "SWAP1"
    },
    "123": {
      "op": "SWAP2"
    },
    "124": {
      "op": "AND"
    },
    "125": {
      "op": "DUP2"
    },
    "126": {
      "op": "MSTORE"
    },
    "127": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "129": {
      "op": "ADD"
    },
    "130": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "132": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "133": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "DUP1",
      "path": "15"
    },
    "134": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "135": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "SUB",
      "path": "15"
    },
    "136": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "137": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "RETURN",
      "path": "15"
    },
    "138": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "139": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x4C"
    },
    "142": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x98"
    },
    "145": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "CALLDATASIZE",
      "path": "15"
    },
    "146": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "148": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x54A"
    },
    "151": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "i",
      "offset": [
        398,
        584
      ],
      "op": "JUMP",
      "path": "15"
    },
    "152": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "153": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x111"
    },
    "156": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "i",
      "offset": [
        398,
        584
      ],
      "op": "JUMP",
      "path": "15"
    },
    "157": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "158": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH2",
      "path": "15",
      "statement": 0,
      "value": "0xEE"
    },
    "161": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        374
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0xB2"
    },
    "164": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        366
      ],
      "op": "DUP5",
      "path": "15"
    },
    "165": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "167": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "169": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "171": {
      "op": "SHL"
    },
    "172": {
      "op": "SUB"
    },
    "173": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        372
      ],
      "op": "AND",
      "path": "15"
    },
    "174": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        372
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x12D"
    },
    "177": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        352,
        374
      ],
      "op": "JUMP",
      "path": "15"
    },
    "178": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        374
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "179": {
      "fn": "ClonesMock.clone",
      "offset": [
        376,
        384
      ],
      "op": "DUP4",
      "path": "15"
    },
    "180": {
      "fn": "ClonesMock.clone",
      "offset": [
        376,
        384
      ],
      "op": "DUP4",
      "path": "15"
    },
    "181": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP1",
      "path": "15"
    },
    "182": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP1",
      "path": "15"
    },
    "183": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1F"
    },
    "185": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "ADD",
      "path": "15"
    },
    "186": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "188": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP1",
      "path": "15"
    },
    "189": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "190": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DIV",
      "path": "15"
    },
    "191": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "MUL",
      "path": "15"
    },
    "192": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "194": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "ADD",
      "path": "15"
    },
    "195": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "197": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "198": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "199": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP2",
      "path": "15"
    },
    "200": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "ADD",
      "path": "15"
    },
    "201": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "203": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "204": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP1",
      "path": "15"
    },
    "205": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP4",
      "path": "15"
    },
    "206": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP3",
      "path": "15"
    },
    "207": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "208": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "209": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP2",
      "path": "15"
    },
    "210": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP2",
      "path": "15"
    },
    "211": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "212": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "214": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "ADD",
      "path": "15"
    },
    "215": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP4",
      "path": "15"
    },
    "216": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP4",
      "path": "15"
    },
    "217": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP1",
      "path": "15"
    },
    "218": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP3",
      "path": "15"
    },
    "219": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP5",
      "path": "15"
    },
    "220": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "CALLDATACOPY",
      "path": "15"
    },
    "221": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "223": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP3",
      "path": "15"
    },
    "224": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "ADD",
      "path": "15"
    },
    "225": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "226": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "227": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "228": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "229": {
      "op": "POP"
    },
    "230": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        351
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1CF"
    },
    "233": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        351
      ],
      "op": "SWAP3",
      "path": "15"
    },
    "234": {
      "op": "POP"
    },
    "235": {
      "op": "POP"
    },
    "236": {
      "op": "POP"
    },
    "237": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        339,
        385
      ],
      "op": "JUMP",
      "path": "15"
    },
    "238": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "239": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "POP",
      "path": "15"
    },
    "240": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "POP",
      "path": "15"
    },
    "241": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "POP",
      "path": "15"
    },
    "242": {
      "fn": "ClonesMock.clone",
      "jump": "o",
      "offset": [
        250,
        392
      ],
      "op": "JUMP",
      "path": "15"
    },
    "243": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "244": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        686,
        703
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "246": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        722,
        770
      ],
      "op": "PUSH2",
      "path": "15",
      "statement": 1,
      "value": "0x108"
    },
    "249": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "251": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "253": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "255": {
      "op": "SHL"
    },
    "256": {
      "op": "SUB"
    },
    "257": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        722,
        764
      ],
      "op": "DUP5",
      "path": "15"
    },
    "258": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        722,
        764
      ],
      "op": "AND",
      "path": "15"
    },
    "259": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        765,
        769
      ],
      "op": "DUP4",
      "path": "15"
    },
    "260": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        722,
        764
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x22C"
    },
    "263": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "i",
      "offset": [
        722,
        770
      ],
      "op": "JUMP",
      "path": "15"
    },
    "264": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        722,
        770
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "265": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        715,
        770
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "266": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        715,
        770
      ],
      "op": "POP",
      "path": "15"
    },
    "267": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "268": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "SWAP3",
      "path": "15"
    },
    "269": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "270": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "POP",
      "path": "15"
    },
    "271": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        590,
        777
      ],
      "op": "POP",
      "path": "15"
    },
    "272": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "o",
      "offset": [
        590,
        777
      ],
      "op": "JUMP",
      "path": "15"
    },
    "273": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "274": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        514,
        577
      ],
      "op": "PUSH2",
      "path": "15",
      "statement": 2,
      "value": "0x127"
    },
    "277": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        527,
        566
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0xB2"
    },
    "280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "282": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "284": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "286": {
      "op": "SHL"
    },
    "287": {
      "op": "SUB"
    },
    "288": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        527,
        560
      ],
      "op": "DUP7",
      "path": "15"
    },
    "289": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        527,
        560
      ],
      "op": "AND",
      "path": "15"
    },
    "290": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        561,
        565
      ],
      "op": "DUP6",
      "path": "15"
    },
    "291": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        527,
        560
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x292"
    },
    "294": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "i",
      "offset": [
        527,
        566
      ],
      "op": "JUMP",
      "path": "15"
    },
    "295": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        514,
        577
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "296": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "POP",
      "path": "15"
    },
    "297": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "POP",
      "path": "15"
    },
    "298": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "POP",
      "path": "15"
    },
    "299": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        584
      ],
      "op": "POP",
      "path": "15"
    },
    "300": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "o",
      "offset": [
        398,
        584
      ],
      "op": "JUMP",
      "path": "15"
    },
    "301": {
      "fn": "Clones.clone",
      "offset": [
        906,
        1477
      ],
      "op": "JUMPDEST",
      "path": "69"
    },
    "302": {
      "fn": "Clones.clone",
      "offset": [
        963,
        979
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x0"
    },
    "304": {
      "fn": "Clones.clone",
      "offset": [
        1087,
        1091
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x40"
    },
    "306": {
      "fn": "Clones.clone",
      "offset": [
        1081,
        1092
      ],
      "op": "MLOAD",
      "path": "69"
    },
    "307": {
      "op": "PUSH20",
      "value": "0x3D602D80600A3D3981F3363D3D373D3D3D363D73"
    },
    "328": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "330": {
      "op": "SHL"
    },
    "331": {
      "fn": "Clones.clone",
      "offset": [
        1112,
        1115
      ],
      "op": "DUP2",
      "path": "69"
    },
    "332": {
      "fn": "Clones.clone",
      "offset": [
        1105,
        1184
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "333": {
      "fn": "Clones.clone",
      "offset": [
        1230,
        1244
      ],
      "op": "DUP3",
      "path": "69"
    },
    "334": {
      "fn": "Clones.clone",
      "offset": [
        1224,
        1228
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x60"
    },
    "336": {
      "fn": "Clones.clone",
      "offset": [
        1220,
        1245
      ],
      "op": "SHL",
      "path": "69"
    },
    "337": {
      "fn": "Clones.clone",
      "offset": [
        1213,
        1217
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x14"
    },
    "339": {
      "fn": "Clones.clone",
      "offset": [
        1208,
        1211
      ],
      "op": "DUP3",
      "path": "69"
    },
    "340": {
      "fn": "Clones.clone",
      "offset": [
        1204,
        1218
      ],
      "op": "ADD",
      "path": "69"
    },
    "341": {
      "fn": "Clones.clone",
      "offset": [
        1197,
        1246
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "342": {
      "op": "PUSH15",
      "value": "0x5AF43D82803E903D91602B57FD5BF3"
    },
    "358": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "360": {
      "op": "SHL"
    },
    "361": {
      "fn": "Clones.clone",
      "offset": [
        1275,
        1279
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x28"
    },
    "363": {
      "fn": "Clones.clone",
      "offset": [
        1270,
        1273
      ],
      "op": "DUP3",
      "path": "69"
    },
    "364": {
      "fn": "Clones.clone",
      "offset": [
        1266,
        1280
      ],
      "op": "ADD",
      "path": "69"
    },
    "365": {
      "fn": "Clones.clone",
      "offset": [
        1259,
        1349
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "366": {
      "fn": "Clones.clone",
      "offset": [
        1389,
        1393
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x37"
    },
    "368": {
      "fn": "Clones.clone",
      "offset": [
        1384,
        1387
      ],
      "op": "DUP2",
      "path": "69"
    },
    "369": {
      "fn": "Clones.clone",
      "offset": [
        1381,
        1382
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x0"
    },
    "371": {
      "fn": "Clones.clone",
      "offset": [
        1374,
        1394
      ],
      "op": "CREATE",
      "path": "69"
    },
    "372": {
      "fn": "Clones.clone",
      "offset": [
        1362,
        1394
      ],
      "op": "SWAP2",
      "path": "69"
    },
    "373": {
      "op": "POP"
    },
    "374": {
      "op": "POP"
    },
    "375": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "377": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "379": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "381": {
      "op": "SHL"
    },
    "382": {
      "op": "SUB"
    },
    "383": {
      "fn": "Clones.clone",
      "offset": [
        1421,
        1443
      ],
      "op": "DUP2",
      "path": "69",
      "statement": 3
    },
    "384": {
      "branch": 18,
      "fn": "Clones.clone",
      "offset": [
        1421,
        1443
      ],
      "op": "AND",
      "path": "69"
    },
    "385": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "PUSH2",
      "path": "69",
      "value": "0x1CA"
    },
    "388": {
      "branch": 18,
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "JUMPI",
      "path": "69"
    },
    "389": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x40"
    },
    "391": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "MLOAD",
      "path": "69"
    },
    "392": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "396": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "398": {
      "op": "SHL"
    },
    "399": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "DUP2",
      "path": "69"
    },
    "400": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "401": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "403": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x4"
    },
    "405": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "DUP3",
      "path": "69"
    },
    "406": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "ADD",
      "path": "69"
    },
    "407": {
      "op": "MSTORE"
    },
    "408": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "410": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "412": {
      "op": "DUP3"
    },
    "413": {
      "op": "ADD"
    },
    "414": {
      "op": "MSTORE"
    },
    "415": {
      "op": "PUSH22",
      "value": "0x115490CC4C4D8DCE8818DC99585D194819985A5B1959"
    },
    "438": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "440": {
      "op": "SHL"
    },
    "441": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "443": {
      "op": "DUP3"
    },
    "444": {
      "op": "ADD"
    },
    "445": {
      "op": "MSTORE"
    },
    "446": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "448": {
      "op": "ADD"
    },
    "449": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "JUMPDEST",
      "path": "69"
    },
    "450": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x40"
    },
    "452": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "MLOAD",
      "path": "69"
    },
    "453": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "DUP1",
      "path": "69"
    },
    "454": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "SWAP2",
      "path": "69"
    },
    "455": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "SUB",
      "path": "69"
    },
    "456": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "SWAP1",
      "path": "69"
    },
    "457": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "69"
    },
    "458": {
      "fn": "Clones.clone",
      "offset": [
        1413,
        1470
      ],
      "op": "JUMPDEST",
      "path": "69"
    },
    "459": {
      "fn": "Clones.clone",
      "offset": [
        906,
        1477
      ],
      "op": "SWAP2",
      "path": "69"
    },
    "460": {
      "fn": "Clones.clone",
      "offset": [
        906,
        1477
      ],
      "op": "SWAP1",
      "path": "69"
    },
    "461": {
      "fn": "Clones.clone",
      "offset": [
        906,
        1477
      ],
      "op": "POP",
      "path": "69"
    },
    "462": {
      "fn": "Clones.clone",
      "jump": "o",
      "offset": [
        906,
        1477
      ],
      "op": "JUMP",
      "path": "69"
    },
    "463": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        783,
        1007
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "464": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        868,
        883
      ],
      "op": "DUP1",
      "path": "15"
    },
    "465": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        868,
        883
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "466": {
      "branch": 14,
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        868,
        887
      ],
      "op": "ISZERO",
      "path": "15"
    },
    "467": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        864,
        965
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1EC"
    },
    "470": {
      "branch": 14,
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        864,
        965
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "471": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        903,
        954
      ],
      "op": "PUSH2",
      "path": "15",
      "statement": 4,
      "value": "0x1EA"
    },
    "474": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "476": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "478": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "480": {
      "op": "SHL"
    },
    "481": {
      "op": "SUB"
    },
    "482": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        903,
        933
      ],
      "op": "DUP4",
      "path": "15"
    },
    "483": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        903,
        933
      ],
      "op": "AND",
      "path": "15"
    },
    "484": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        934,
        942
      ],
      "op": "DUP3",
      "path": "15"
    },
    "485": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        944,
        953
      ],
      "op": "CALLVALUE",
      "path": "15"
    },
    "486": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        903,
        933
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x332"
    },
    "489": {
      "fn": "ClonesMock._initAndEmit",
      "jump": "i",
      "offset": [
        903,
        954
      ],
      "op": "JUMP",
      "path": "15"
    },
    "490": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        903,
        954
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "491": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        903,
        954
      ],
      "op": "POP",
      "path": "15"
    },
    "492": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        864,
        965
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "493": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "PUSH1",
      "path": "15",
      "statement": 5,
      "value": "0x40"
    },
    "495": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "500": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "502": {
      "op": "SHL"
    },
    "503": {
      "op": "SUB"
    },
    "504": {
      "op": "DUP4"
    },
    "505": {
      "op": "AND"
    },
    "506": {
      "op": "DUP2"
    },
    "507": {
      "op": "MSTORE"
    },
    "508": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "PUSH32",
      "path": "15",
      "value": "0x39A773F10839D86923D91D5CE7D6642F2F63A95D850495ABB1F162E38AA04EA5"
    },
    "541": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "542": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "544": {
      "op": "ADD"
    },
    "545": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "547": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "548": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "DUP1",
      "path": "15"
    },
    "549": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "550": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "SUB",
      "path": "15"
    },
    "551": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "552": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        979,
        1000
      ],
      "op": "LOG1",
      "path": "15"
    },
    "553": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        783,
        1007
      ],
      "op": "POP",
      "path": "15"
    },
    "554": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        783,
        1007
      ],
      "op": "POP",
      "path": "15"
    },
    "555": {
      "fn": "ClonesMock._initAndEmit",
      "jump": "o",
      "offset": [
        783,
        1007
      ],
      "op": "JUMP",
      "path": "15"
    },
    "556": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3408,
        3613
      ],
      "op": "JUMPDEST",
      "path": "69"
    },
    "557": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3506,
        3523
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x0"
    },
    "559": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3542,
        3606
      ],
      "op": "PUSH2",
      "path": "69",
      "statement": 6,
      "value": "0x108"
    },
    "562": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3570,
        3584
      ],
      "op": "DUP4",
      "path": "69"
    },
    "563": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3586,
        3590
      ],
      "op": "DUP4",
      "path": "69"
    },
    "564": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3600,
        3604
      ],
      "op": "ADDRESS",
      "path": "69"
    },
    "565": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2809,
        2813
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x40"
    },
    "567": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2803,
        2814
      ],
      "op": "MLOAD",
      "path": "69"
    },
    "568": {
      "op": "PUSH20",
      "value": "0x3D602D80600A3D3981F3363D3D373D3D3D363D73"
    },
    "589": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "591": {
      "op": "SHL"
    },
    "592": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2827,
        2906
      ],
      "op": "DUP2",
      "path": "69"
    },
    "593": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2827,
        2906
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "594": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2946,
        2950
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x60"
    },
    "596": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2942,
        2967
      ],
      "op": "SWAP4",
      "path": "69"
    },
    "597": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2942,
        2967
      ],
      "op": "DUP5",
      "path": "69"
    },
    "598": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2942,
        2967
      ],
      "op": "SHL",
      "path": "69"
    },
    "599": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2935,
        2939
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x14"
    },
    "601": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2926,
        2940
      ],
      "op": "DUP3",
      "path": "69"
    },
    "602": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2926,
        2940
      ],
      "op": "ADD",
      "path": "69"
    },
    "603": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2919,
        2968
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "604": {
      "op": "PUSH16",
      "value": "0x5AF43D82803E903D91602B57FD5BF3FF"
    },
    "621": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "623": {
      "op": "SHL"
    },
    "624": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2997,
        3001
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x28"
    },
    "626": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2988,
        3002
      ],
      "op": "DUP3",
      "path": "69"
    },
    "627": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2988,
        3002
      ],
      "op": "ADD",
      "path": "69"
    },
    "628": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2981,
        3071
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "629": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3107,
        3126
      ],
      "op": "SWAP3",
      "path": "69"
    },
    "630": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3107,
        3126
      ],
      "op": "SHL",
      "path": "69"
    },
    "631": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3100,
        3104
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x38"
    },
    "633": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3091,
        3105
      ],
      "op": "DUP4",
      "path": "69"
    },
    "634": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3091,
        3105
      ],
      "op": "ADD",
      "path": "69"
    },
    "635": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3084,
        3127
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "636": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3156,
        3160
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x4C"
    },
    "638": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3147,
        3161
      ],
      "op": "DUP3",
      "path": "69"
    },
    "639": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3147,
        3161
      ],
      "op": "ADD",
      "path": "69"
    },
    "640": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3140,
        3168
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "641": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3219,
        3223
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x37"
    },
    "643": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3204,
        3224
      ],
      "op": "DUP1",
      "path": "69"
    },
    "644": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3204,
        3224
      ],
      "op": "DUP3",
      "path": "69"
    },
    "645": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3204,
        3224
      ],
      "op": "KECCAK256",
      "path": "69"
    },
    "646": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3197,
        3201
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x6C"
    },
    "648": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3188,
        3202
      ],
      "op": "DUP4",
      "path": "69"
    },
    "649": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3188,
        3202
      ],
      "op": "ADD",
      "path": "69"
    },
    "650": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3181,
        3225
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "651": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3277,
        3281
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x55"
    },
    "653": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3261,
        3275
      ],
      "op": "SWAP2",
      "path": "69"
    },
    "654": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3261,
        3275
      ],
      "op": "ADD",
      "path": "69"
    },
    "655": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3251,
        3282
      ],
      "op": "KECCAK256",
      "path": "69"
    },
    "656": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3251,
        3282
      ],
      "op": "SWAP1",
      "path": "69"
    },
    "657": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2778,
        3292
      ],
      "op": "JUMP",
      "path": "69"
    },
    "658": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        1852,
        2458
      ],
      "op": "JUMPDEST",
      "path": "69"
    },
    "659": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        1936,
        1952
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x0"
    },
    "661": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2060,
        2064
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x40"
    },
    "663": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2054,
        2065
      ],
      "op": "MLOAD",
      "path": "69"
    },
    "664": {
      "op": "PUSH20",
      "value": "0x3D602D80600A3D3981F3363D3D373D3D3D363D73"
    },
    "685": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "687": {
      "op": "SHL"
    },
    "688": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2085,
        2088
      ],
      "op": "DUP2",
      "path": "69"
    },
    "689": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2078,
        2157
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "690": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2203,
        2217
      ],
      "op": "DUP4",
      "path": "69"
    },
    "691": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2197,
        2201
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x60"
    },
    "693": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2193,
        2218
      ],
      "op": "SHL",
      "path": "69"
    },
    "694": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2186,
        2190
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x14"
    },
    "696": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2181,
        2184
      ],
      "op": "DUP3",
      "path": "69"
    },
    "697": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2177,
        2191
      ],
      "op": "ADD",
      "path": "69"
    },
    "698": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2170,
        2219
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "699": {
      "op": "PUSH15",
      "value": "0x5AF43D82803E903D91602B57FD5BF3"
    },
    "715": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "717": {
      "op": "SHL"
    },
    "718": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2248,
        2252
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x28"
    },
    "720": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2243,
        2246
      ],
      "op": "DUP3",
      "path": "69"
    },
    "721": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2239,
        2253
      ],
      "op": "ADD",
      "path": "69"
    },
    "722": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2232,
        2322
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "723": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2369,
        2373
      ],
      "op": "DUP3",
      "path": "69"
    },
    "724": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2363,
        2367
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x37"
    },
    "726": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2358,
        2361
      ],
      "op": "DUP3",
      "path": "69"
    },
    "727": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2355,
        2356
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x0"
    },
    "729": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2347,
        2374
      ],
      "op": "CREATE2",
      "path": "69"
    },
    "730": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2335,
        2374
      ],
      "op": "SWAP2",
      "path": "69"
    },
    "731": {
      "op": "POP"
    },
    "732": {
      "op": "POP"
    },
    "733": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "735": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "737": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "739": {
      "op": "SHL"
    },
    "740": {
      "op": "SUB"
    },
    "741": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2401,
        2423
      ],
      "op": "DUP2",
      "path": "69",
      "statement": 7
    },
    "742": {
      "branch": 19,
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2401,
        2423
      ],
      "op": "AND",
      "path": "69"
    },
    "743": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2393,
        2451
      ],
      "op": "PUSH2",
      "path": "69",
      "value": "0x10B"
    },
    "746": {
      "branch": 19,
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2393,
        2451
      ],
      "op": "JUMPI",
      "path": "69"
    },
    "747": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2393,
        2451
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x40"
    },
    "749": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2393,
        2451
      ],
      "op": "MLOAD",
      "path": "69"
    },
    "750": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "754": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "756": {
      "op": "SHL"
    },
    "757": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2393,
        2451
      ],
      "op": "DUP2",
      "path": "69"
    },
    "758": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2393,
        2451
      ],
      "op": "MSTORE",
      "path": "69"
    },
    "759": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "761": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2393,
        2451
      ],
      "op": "PUSH1",
      "path": "69",
      "value": "0x4"
    },
    "763": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2393,
        2451
      ],
      "op": "DUP3",
      "path": "69"
    },
    "764": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2393,
        2451
      ],
      "op": "ADD",
      "path": "69"
    },
    "765": {
      "op": "MSTORE"
    },
    "766": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "768": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "770": {
      "op": "DUP3"
    },
    "771": {
      "op": "ADD"
    },
    "772": {
      "op": "MSTORE"
    },
    "773": {
      "op": "PUSH32",
      "value": "0x455243313136373A2063726561746532206661696C6564000000000000000000"
    },
    "806": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "808": {
      "op": "DUP3"
    },
    "809": {
      "op": "ADD"
    },
    "810": {
      "op": "MSTORE"
    },
    "811": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "813": {
      "op": "ADD"
    },
    "814": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2393,
        2451
      ],
      "op": "PUSH2",
      "path": "69",
      "value": "0x1C1"
    },
    "817": {
      "op": "JUMP"
    },
    "818": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4128,
        4352
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "819": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4227,
        4239
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x60"
    },
    "821": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "PUSH2",
      "path": "119",
      "statement": 8,
      "value": "0x358"
    },
    "824": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4280,
        4286
      ],
      "op": "DUP5",
      "path": "119"
    },
    "825": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4288,
        4292
      ],
      "op": "DUP5",
      "path": "119"
    },
    "826": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4294,
        4299
      ],
      "op": "DUP5",
      "path": "119"
    },
    "827": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x40"
    },
    "829": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "MLOAD",
      "path": "119"
    },
    "830": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "DUP1",
      "path": "119"
    },
    "831": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x60"
    },
    "833": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "ADD",
      "path": "119"
    },
    "834": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x40"
    },
    "836": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "MSTORE",
      "path": "119"
    },
    "837": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "DUP1",
      "path": "119"
    },
    "838": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x29"
    },
    "840": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "DUP2",
      "path": "119"
    },
    "841": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "MSTORE",
      "path": "119"
    },
    "842": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x20"
    },
    "844": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "ADD",
      "path": "119"
    },
    "845": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x66F"
    },
    "848": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x29"
    },
    "850": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "SWAP2",
      "path": "119"
    },
    "851": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "CODECOPY",
      "path": "119"
    },
    "852": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4279
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x362"
    },
    "855": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        4258,
        4345
      ],
      "op": "JUMP",
      "path": "119"
    },
    "856": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4258,
        4345
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "857": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4251,
        4345
      ],
      "op": "SWAP1",
      "path": "119"
    },
    "858": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4251,
        4345
      ],
      "op": "POP",
      "path": "119"
    },
    "859": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4128,
        4352
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "860": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4128,
        4352
      ],
      "op": "SWAP4",
      "path": "119"
    },
    "861": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4128,
        4352
      ],
      "op": "SWAP3",
      "path": "119"
    },
    "862": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4128,
        4352
      ],
      "op": "POP",
      "path": "119"
    },
    "863": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4128,
        4352
      ],
      "op": "POP",
      "path": "119"
    },
    "864": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4128,
        4352
      ],
      "op": "POP",
      "path": "119"
    },
    "865": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4128,
        4352
      ],
      "op": "JUMP",
      "path": "119"
    },
    "866": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4600,
        5123
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "867": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4727,
        4739
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x60"
    },
    "869": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4784,
        4789
      ],
      "op": "DUP3",
      "path": "119",
      "statement": 9
    },
    "870": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4780
      ],
      "op": "SELFBALANCE",
      "path": "119"
    },
    "871": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4789
      ],
      "op": "LT",
      "path": "119"
    },
    "872": {
      "branch": 15,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4789
      ],
      "op": "ISZERO",
      "path": "119"
    },
    "873": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x3C3"
    },
    "876": {
      "branch": 15,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "JUMPI",
      "path": "119"
    },
    "877": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x40"
    },
    "879": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "MLOAD",
      "path": "119"
    },
    "880": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "884": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "886": {
      "op": "SHL"
    },
    "887": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "DUP2",
      "path": "119"
    },
    "888": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "MSTORE",
      "path": "119"
    },
    "889": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "891": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x4"
    },
    "893": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "DUP3",
      "path": "119"
    },
    "894": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "ADD",
      "path": "119"
    },
    "895": {
      "op": "MSTORE"
    },
    "896": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "898": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "900": {
      "op": "DUP3"
    },
    "901": {
      "op": "ADD"
    },
    "902": {
      "op": "MSTORE"
    },
    "903": {
      "op": "PUSH32",
      "value": "0x416464726573733A20696E73756666696369656E742062616C616E636520666F"
    },
    "936": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "938": {
      "op": "DUP3"
    },
    "939": {
      "op": "ADD"
    },
    "940": {
      "op": "MSTORE"
    },
    "941": {
      "op": "PUSH6",
      "value": "0x1C8818D85B1B"
    },
    "948": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "950": {
      "op": "SHL"
    },
    "951": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "953": {
      "op": "DUP3"
    },
    "954": {
      "op": "ADD"
    },
    "955": {
      "op": "MSTORE"
    },
    "956": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "958": {
      "op": "ADD"
    },
    "959": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x1C1"
    },
    "962": {
      "op": "JUMP"
    },
    "963": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "964": {
      "fn": "Address.isContract",
      "offset": [
        1078,
        1098
      ],
      "op": "DUP5",
      "path": "119"
    },
    "965": {
      "fn": "Address.isContract",
      "offset": [
        1078,
        1098
      ],
      "op": "EXTCODESIZE",
      "path": "119"
    },
    "966": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "PUSH2",
      "path": "119",
      "statement": 10,
      "value": "0x411"
    },
    "969": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "JUMPI",
      "path": "119"
    },
    "970": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x40"
    },
    "972": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "MLOAD",
      "path": "119"
    },
    "973": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "977": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "979": {
      "op": "SHL"
    },
    "980": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "DUP2",
      "path": "119"
    },
    "981": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "MSTORE",
      "path": "119"
    },
    "982": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "984": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x4"
    },
    "986": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "DUP3",
      "path": "119"
    },
    "987": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "ADD",
      "path": "119"
    },
    "988": {
      "op": "MSTORE"
    },
    "989": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "991": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "993": {
      "op": "DUP3"
    },
    "994": {
      "op": "ADD"
    },
    "995": {
      "op": "MSTORE"
    },
    "996": {
      "op": "PUSH32",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "1029": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1031": {
      "op": "DUP3"
    },
    "1032": {
      "op": "ADD"
    },
    "1033": {
      "op": "MSTORE"
    },
    "1034": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1036": {
      "op": "ADD"
    },
    "1037": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x1C1"
    },
    "1040": {
      "op": "JUMP"
    },
    "1041": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "1042": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4973,
        4985
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x0"
    },
    "1044": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4987,
        5010
      ],
      "op": "DUP1",
      "path": "119"
    },
    "1045": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5020
      ],
      "op": "DUP7",
      "path": "119"
    },
    "1046": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1048": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1050": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1052": {
      "op": "SHL"
    },
    "1053": {
      "op": "SUB"
    },
    "1054": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5025
      ],
      "op": "AND",
      "path": "119"
    },
    "1055": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5034,
        5039
      ],
      "op": "DUP6",
      "path": "119"
    },
    "1056": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5042,
        5046
      ],
      "op": "DUP8",
      "path": "119"
    },
    "1057": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x40"
    },
    "1059": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "MLOAD",
      "path": "119"
    },
    "1060": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x42D"
    },
    "1063": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SWAP2",
      "path": "119"
    },
    "1064": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SWAP1",
      "path": "119"
    },
    "1065": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x5F3"
    },
    "1068": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMP",
      "path": "119"
    },
    "1069": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "1070": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x0"
    },
    "1072": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x40"
    },
    "1074": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "MLOAD",
      "path": "119"
    },
    "1075": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP1",
      "path": "119"
    },
    "1076": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP4",
      "path": "119"
    },
    "1077": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SUB",
      "path": "119"
    },
    "1078": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP2",
      "path": "119"
    },
    "1079": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP6",
      "path": "119"
    },
    "1080": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP8",
      "path": "119"
    },
    "1081": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "GAS",
      "path": "119"
    },
    "1082": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "CALL",
      "path": "119"
    },
    "1083": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SWAP3",
      "path": "119"
    },
    "1084": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "119"
    },
    "1085": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "119"
    },
    "1086": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "119"
    },
    "1087": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "RETURNDATASIZE",
      "path": "119"
    },
    "1088": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP1",
      "path": "119"
    },
    "1089": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x0"
    },
    "1091": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP2",
      "path": "119"
    },
    "1092": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "EQ",
      "path": "119"
    },
    "1093": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x46A"
    },
    "1096": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMPI",
      "path": "119"
    },
    "1097": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x40"
    },
    "1099": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "MLOAD",
      "path": "119"
    },
    "1100": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SWAP2",
      "path": "119"
    },
    "1101": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "119"
    },
    "1102": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x1F"
    },
    "1104": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "NOT",
      "path": "119"
    },
    "1105": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x3F"
    },
    "1107": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "RETURNDATASIZE",
      "path": "119"
    },
    "1108": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "ADD",
      "path": "119"
    },
    "1109": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "AND",
      "path": "119"
    },
    "1110": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP3",
      "path": "119"
    },
    "1111": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "ADD",
      "path": "119"
    },
    "1112": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x40"
    },
    "1114": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "MSTORE",
      "path": "119"
    },
    "1115": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "RETURNDATASIZE",
      "path": "119"
    },
    "1116": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP3",
      "path": "119"
    },
    "1117": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "MSTORE",
      "path": "119"
    },
    "1118": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "RETURNDATASIZE",
      "path": "119"
    },
    "1119": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x0"
    },
    "1121": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x20"
    },
    "1123": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP5",
      "path": "119"
    },
    "1124": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "ADD",
      "path": "119"
    },
    "1125": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "RETURNDATACOPY",
      "path": "119"
    },
    "1126": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x46F"
    },
    "1129": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMP",
      "path": "119"
    },
    "1130": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "1131": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x60"
    },
    "1133": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SWAP2",
      "path": "119"
    },
    "1134": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "119"
    },
    "1135": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "1136": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "119"
    },
    "1137": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4972,
        5047
      ],
      "op": "SWAP2",
      "path": "119"
    },
    "1138": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4972,
        5047
      ],
      "op": "POP",
      "path": "119"
    },
    "1139": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4972,
        5047
      ],
      "op": "SWAP2",
      "path": "119"
    },
    "1140": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4972,
        5047
      ],
      "op": "POP",
      "path": "119"
    },
    "1141": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5064,
        5116
      ],
      "op": "PUSH2",
      "path": "119",
      "statement": 11,
      "value": "0x47F"
    },
    "1144": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5082,
        5089
      ],
      "op": "DUP3",
      "path": "119"
    },
    "1145": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5091,
        5101
      ],
      "op": "DUP3",
      "path": "119"
    },
    "1146": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5103,
        5115
      ],
      "op": "DUP7",
      "path": "119"
    },
    "1147": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5064,
        5081
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x48A"
    },
    "1150": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5064,
        5116
      ],
      "op": "JUMP",
      "path": "119"
    },
    "1151": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5064,
        5116
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "1152": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5057,
        5116
      ],
      "op": "SWAP8",
      "path": "119"
    },
    "1153": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4600,
        5123
      ],
      "op": "SWAP7",
      "path": "119"
    },
    "1154": {
      "op": "POP"
    },
    "1155": {
      "op": "POP"
    },
    "1156": {
      "op": "POP"
    },
    "1157": {
      "op": "POP"
    },
    "1158": {
      "op": "POP"
    },
    "1159": {
      "op": "POP"
    },
    "1160": {
      "op": "POP"
    },
    "1161": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4600,
        5123
      ],
      "op": "JUMP",
      "path": "119"
    },
    "1162": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7083,
        7808
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "1163": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7198,
        7210
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x60"
    },
    "1165": {
      "branch": 16,
      "fn": "Address._verifyCallResult",
      "offset": [
        7226,
        7233
      ],
      "op": "DUP4",
      "path": "119"
    },
    "1166": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7222,
        7802
      ],
      "op": "ISZERO",
      "path": "119"
    },
    "1167": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7222,
        7802
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x499"
    },
    "1170": {
      "branch": 16,
      "fn": "Address._verifyCallResult",
      "offset": [
        7222,
        7802
      ],
      "op": "JUMPI",
      "path": "119"
    },
    "1171": {
      "op": "POP"
    },
    "1172": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7256,
        7266
      ],
      "op": "DUP2",
      "path": "119",
      "statement": 12
    },
    "1173": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7249,
        7266
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x35B"
    },
    "1176": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7249,
        7266
      ],
      "op": "JUMP",
      "path": "119"
    },
    "1177": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7222,
        7802
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "1178": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7367,
        7384
      ],
      "op": "DUP3",
      "path": "119"
    },
    "1179": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7367,
        7384
      ],
      "op": "MLOAD",
      "path": "119"
    },
    "1180": {
      "branch": 17,
      "fn": "Address._verifyCallResult",
      "offset": [
        7367,
        7388
      ],
      "op": "ISZERO",
      "path": "119"
    },
    "1181": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7363,
        7792
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x4A9"
    },
    "1184": {
      "branch": 17,
      "fn": "Address._verifyCallResult",
      "offset": [
        7363,
        7792
      ],
      "op": "JUMPI",
      "path": "119"
    },
    "1185": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7625,
        7635
      ],
      "op": "DUP3",
      "path": "119"
    },
    "1186": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7619,
        7636
      ],
      "op": "MLOAD",
      "path": "119"
    },
    "1187": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7685,
        7700
      ],
      "op": "DUP1",
      "path": "119"
    },
    "1188": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7672,
        7682
      ],
      "op": "DUP5",
      "path": "119"
    },
    "1189": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7668,
        7670
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x20"
    },
    "1191": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7664,
        7683
      ],
      "op": "ADD",
      "path": "119"
    },
    "1192": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7657,
        7701
      ],
      "op": "REVERT",
      "path": "119"
    },
    "1193": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7574,
        7719
      ],
      "op": "JUMPDEST",
      "path": "119"
    },
    "1194": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7764,
        7776
      ],
      "op": "DUP2",
      "path": "119",
      "statement": 13
    },
    "1195": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x40"
    },
    "1197": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "MLOAD",
      "path": "119"
    },
    "1198": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1202": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1204": {
      "op": "SHL"
    },
    "1205": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "DUP2",
      "path": "119"
    },
    "1206": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "MSTORE",
      "path": "119"
    },
    "1207": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "PUSH1",
      "path": "119",
      "value": "0x4"
    },
    "1209": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "ADD",
      "path": "119"
    },
    "1210": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x1C1"
    },
    "1213": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "SWAP2",
      "path": "119"
    },
    "1214": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "SWAP1",
      "path": "119"
    },
    "1215": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "PUSH2",
      "path": "119",
      "value": "0x60F"
    },
    "1218": {
      "fn": "Address._verifyCallResult",
      "jump": "i",
      "offset": [
        7757,
        7777
      ],
      "op": "JUMP",
      "path": "119"
    },
    "1219": {
      "op": "JUMPDEST"
    },
    "1220": {
      "op": "DUP1"
    },
    "1221": {
      "op": "CALLDATALOAD"
    },
    "1222": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1224": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1226": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1228": {
      "op": "SHL"
    },
    "1229": {
      "op": "SUB"
    },
    "1230": {
      "op": "DUP2"
    },
    "1231": {
      "op": "AND"
    },
    "1232": {
      "op": "DUP2"
    },
    "1233": {
      "op": "EQ"
    },
    "1234": {
      "op": "PUSH2",
      "value": "0x1CA"
    },
    "1237": {
      "op": "JUMPI"
    },
    "1238": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1240": {
      "op": "DUP1"
    },
    "1241": {
      "op": "REVERT"
    },
    "1242": {
      "op": "JUMPDEST"
    },
    "1243": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1245": {
      "op": "DUP1"
    },
    "1246": {
      "op": "DUP4"
    },
    "1247": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1249": {
      "op": "DUP5"
    },
    "1250": {
      "op": "ADD"
    },
    "1251": {
      "op": "SLT"
    },
    "1252": {
      "op": "PUSH2",
      "value": "0x4EB"
    },
    "1255": {
      "op": "JUMPI"
    },
    "1256": {
      "op": "DUP2"
    },
    "1257": {
      "op": "DUP3"
    },
    "1258": {
      "op": "REVERT"
    },
    "1259": {
      "op": "JUMPDEST"
    },
    "1260": {
      "op": "POP"
    },
    "1261": {
      "op": "DUP2"
    },
    "1262": {
      "op": "CALLDATALOAD"
    },
    "1263": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1272": {
      "op": "DUP2"
    },
    "1273": {
      "op": "GT"
    },
    "1274": {
      "op": "ISZERO"
    },
    "1275": {
      "op": "PUSH2",
      "value": "0x502"
    },
    "1278": {
      "op": "JUMPI"
    },
    "1279": {
      "op": "DUP2"
    },
    "1280": {
      "op": "DUP3"
    },
    "1281": {
      "op": "REVERT"
    },
    "1282": {
      "op": "JUMPDEST"
    },
    "1283": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1285": {
      "op": "DUP4"
    },
    "1286": {
      "op": "ADD"
    },
    "1287": {
      "op": "SWAP2"
    },
    "1288": {
      "op": "POP"
    },
    "1289": {
      "op": "DUP4"
    },
    "1290": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1292": {
      "op": "DUP3"
    },
    "1293": {
      "op": "DUP6"
    },
    "1294": {
      "op": "ADD"
    },
    "1295": {
      "op": "ADD"
    },
    "1296": {
      "op": "GT"
    },
    "1297": {
      "op": "ISZERO"
    },
    "1298": {
      "op": "PUSH2",
      "value": "0x51A"
    },
    "1301": {
      "op": "JUMPI"
    },
    "1302": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1304": {
      "op": "DUP1"
    },
    "1305": {
      "op": "REVERT"
    },
    "1306": {
      "op": "JUMPDEST"
    },
    "1307": {
      "op": "SWAP3"
    },
    "1308": {
      "op": "POP"
    },
    "1309": {
      "op": "SWAP3"
    },
    "1310": {
      "op": "SWAP1"
    },
    "1311": {
      "op": "POP"
    },
    "1312": {
      "jump": "o",
      "op": "JUMP"
    },
    "1313": {
      "op": "JUMPDEST"
    },
    "1314": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1316": {
      "op": "DUP1"
    },
    "1317": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1319": {
      "op": "DUP4"
    },
    "1320": {
      "op": "DUP6"
    },
    "1321": {
      "op": "SUB"
    },
    "1322": {
      "op": "SLT"
    },
    "1323": {
      "op": "ISZERO"
    },
    "1324": {
      "op": "PUSH2",
      "value": "0x533"
    },
    "1327": {
      "op": "JUMPI"
    },
    "1328": {
      "op": "DUP2"
    },
    "1329": {
      "op": "DUP3"
    },
    "1330": {
      "op": "REVERT"
    },
    "1331": {
      "op": "JUMPDEST"
    },
    "1332": {
      "op": "PUSH2",
      "value": "0x53C"
    },
    "1335": {
      "op": "DUP4"
    },
    "1336": {
      "op": "PUSH2",
      "value": "0x4C3"
    },
    "1339": {
      "jump": "i",
      "op": "JUMP"
    },
    "1340": {
      "op": "JUMPDEST"
    },
    "1341": {
      "op": "SWAP5"
    },
    "1342": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1344": {
      "op": "SWAP4"
    },
    "1345": {
      "op": "SWAP1"
    },
    "1346": {
      "op": "SWAP4"
    },
    "1347": {
      "op": "ADD"
    },
    "1348": {
      "op": "CALLDATALOAD"
    },
    "1349": {
      "op": "SWAP4"
    },
    "1350": {
      "op": "POP"
    },
    "1351": {
      "op": "POP"
    },
    "1352": {
      "op": "POP"
    },
    "1353": {
      "jump": "o",
      "op": "JUMP"
    },
    "1354": {
      "op": "JUMPDEST"
    },
    "1355": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1357": {
      "op": "DUP1"
    },
    "1358": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1360": {
      "op": "DUP1"
    },
    "1361": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1363": {
      "op": "DUP6"
    },
    "1364": {
      "op": "DUP8"
    },
    "1365": {
      "op": "SUB"
    },
    "1366": {
      "op": "SLT"
    },
    "1367": {
      "op": "ISZERO"
    },
    "1368": {
      "op": "PUSH2",
      "value": "0x55F"
    },
    "1371": {
      "op": "JUMPI"
    },
    "1372": {
      "op": "DUP2"
    },
    "1373": {
      "op": "DUP3"
    },
    "1374": {
      "op": "REVERT"
    },
    "1375": {
      "op": "JUMPDEST"
    },
    "1376": {
      "op": "PUSH2",
      "value": "0x568"
    },
    "1379": {
      "op": "DUP6"
    },
    "1380": {
      "op": "PUSH2",
      "value": "0x4C3"
    },
    "1383": {
      "jump": "i",
      "op": "JUMP"
    },
    "1384": {
      "op": "JUMPDEST"
    },
    "1385": {
      "op": "SWAP4"
    },
    "1386": {
      "op": "POP"
    },
    "1387": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1389": {
      "op": "DUP6"
    },
    "1390": {
      "op": "ADD"
    },
    "1391": {
      "op": "CALLDATALOAD"
    },
    "1392": {
      "op": "SWAP3"
    },
    "1393": {
      "op": "POP"
    },
    "1394": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1396": {
      "op": "DUP6"
    },
    "1397": {
      "op": "ADD"
    },
    "1398": {
      "op": "CALLDATALOAD"
    },
    "1399": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1408": {
      "op": "DUP2"
    },
    "1409": {
      "op": "GT"
    },
    "1410": {
      "op": "ISZERO"
    },
    "1411": {
      "op": "PUSH2",
      "value": "0x58A"
    },
    "1414": {
      "op": "JUMPI"
    },
    "1415": {
      "op": "DUP3"
    },
    "1416": {
      "op": "DUP4"
    },
    "1417": {
      "op": "REVERT"
    },
    "1418": {
      "op": "JUMPDEST"
    },
    "1419": {
      "op": "PUSH2",
      "value": "0x596"
    },
    "1422": {
      "op": "DUP8"
    },
    "1423": {
      "op": "DUP3"
    },
    "1424": {
      "op": "DUP9"
    },
    "1425": {
      "op": "ADD"
    },
    "1426": {
      "op": "PUSH2",
      "value": "0x4DA"
    },
    "1429": {
      "jump": "i",
      "op": "JUMP"
    },
    "1430": {
      "op": "JUMPDEST"
    },
    "1431": {
      "op": "SWAP6"
    },
    "1432": {
      "op": "SWAP9"
    },
    "1433": {
      "op": "SWAP5"
    },
    "1434": {
      "op": "SWAP8"
    },
    "1435": {
      "op": "POP"
    },
    "1436": {
      "op": "SWAP6"
    },
    "1437": {
      "op": "POP"
    },
    "1438": {
      "op": "POP"
    },
    "1439": {
      "op": "POP"
    },
    "1440": {
      "op": "POP"
    },
    "1441": {
      "jump": "o",
      "op": "JUMP"
    },
    "1442": {
      "op": "JUMPDEST"
    },
    "1443": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1445": {
      "op": "DUP1"
    },
    "1446": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1448": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1450": {
      "op": "DUP5"
    },
    "1451": {
      "op": "DUP7"
    },
    "1452": {
      "op": "SUB"
    },
    "1453": {
      "op": "SLT"
    },
    "1454": {
      "op": "ISZERO"
    },
    "1455": {
      "op": "PUSH2",
      "value": "0x5B6"
    },
    "1458": {
      "op": "JUMPI"
    },
    "1459": {
      "op": "DUP3"
    },
    "1460": {
      "op": "DUP4"
    },
    "1461": {
      "op": "REVERT"
    },
    "1462": {
      "op": "JUMPDEST"
    },
    "1463": {
      "op": "PUSH2",
      "value": "0x5BF"
    },
    "1466": {
      "op": "DUP5"
    },
    "1467": {
      "op": "PUSH2",
      "value": "0x4C3"
    },
    "1470": {
      "jump": "i",
      "op": "JUMP"
    },
    "1471": {
      "op": "JUMPDEST"
    },
    "1472": {
      "op": "SWAP3"
    },
    "1473": {
      "op": "POP"
    },
    "1474": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1476": {
      "op": "DUP5"
    },
    "1477": {
      "op": "ADD"
    },
    "1478": {
      "op": "CALLDATALOAD"
    },
    "1479": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1488": {
      "op": "DUP2"
    },
    "1489": {
      "op": "GT"
    },
    "1490": {
      "op": "ISZERO"
    },
    "1491": {
      "op": "PUSH2",
      "value": "0x5DA"
    },
    "1494": {
      "op": "JUMPI"
    },
    "1495": {
      "op": "DUP3"
    },
    "1496": {
      "op": "DUP4"
    },
    "1497": {
      "op": "REVERT"
    },
    "1498": {
      "op": "JUMPDEST"
    },
    "1499": {
      "op": "PUSH2",
      "value": "0x5E6"
    },
    "1502": {
      "op": "DUP7"
    },
    "1503": {
      "op": "DUP3"
    },
    "1504": {
      "op": "DUP8"
    },
    "1505": {
      "op": "ADD"
    },
    "1506": {
      "op": "PUSH2",
      "value": "0x4DA"
    },
    "1509": {
      "jump": "i",
      "op": "JUMP"
    },
    "1510": {
      "op": "JUMPDEST"
    },
    "1511": {
      "op": "SWAP5"
    },
    "1512": {
      "op": "SWAP8"
    },
    "1513": {
      "op": "SWAP1"
    },
    "1514": {
      "op": "SWAP7"
    },
    "1515": {
      "op": "POP"
    },
    "1516": {
      "op": "SWAP4"
    },
    "1517": {
      "op": "SWAP5"
    },
    "1518": {
      "op": "POP"
    },
    "1519": {
      "op": "POP"
    },
    "1520": {
      "op": "POP"
    },
    "1521": {
      "op": "POP"
    },
    "1522": {
      "jump": "o",
      "op": "JUMP"
    },
    "1523": {
      "op": "JUMPDEST"
    },
    "1524": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1526": {
      "op": "DUP3"
    },
    "1527": {
      "op": "MLOAD"
    },
    "1528": {
      "op": "PUSH2",
      "value": "0x605"
    },
    "1531": {
      "op": "DUP2"
    },
    "1532": {
      "op": "DUP5"
    },
    "1533": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1535": {
      "op": "DUP8"
    },
    "1536": {
      "op": "ADD"
    },
    "1537": {
      "op": "PUSH2",
      "value": "0x642"
    },
    "1540": {
      "jump": "i",
      "op": "JUMP"
    },
    "1541": {
      "op": "JUMPDEST"
    },
    "1542": {
      "op": "SWAP2"
    },
    "1543": {
      "op": "SWAP1"
    },
    "1544": {
      "op": "SWAP2"
    },
    "1545": {
      "op": "ADD"
    },
    "1546": {
      "op": "SWAP3"
    },
    "1547": {
      "op": "SWAP2"
    },
    "1548": {
      "op": "POP"
    },
    "1549": {
      "op": "POP"
    },
    "1550": {
      "jump": "o",
      "op": "JUMP"
    },
    "1551": {
      "op": "JUMPDEST"
    },
    "1552": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1554": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1556": {
      "op": "DUP3"
    },
    "1557": {
      "op": "MSTORE"
    },
    "1558": {
      "op": "DUP3"
    },
    "1559": {
      "op": "MLOAD"
    },
    "1560": {
      "op": "DUP1"
    },
    "1561": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1563": {
      "op": "DUP5"
    },
    "1564": {
      "op": "ADD"
    },
    "1565": {
      "op": "MSTORE"
    },
    "1566": {
      "op": "PUSH2",
      "value": "0x62E"
    },
    "1569": {
      "op": "DUP2"
    },
    "1570": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1572": {
      "op": "DUP6"
    },
    "1573": {
      "op": "ADD"
    },
    "1574": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1576": {
      "op": "DUP8"
    },
    "1577": {
      "op": "ADD"
    },
    "1578": {
      "op": "PUSH2",
      "value": "0x642"
    },
    "1581": {
      "jump": "i",
      "op": "JUMP"
    },
    "1582": {
      "op": "JUMPDEST"
    },
    "1583": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1585": {
      "op": "ADD"
    },
    "1586": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1588": {
      "op": "NOT"
    },
    "1589": {
      "op": "AND"
    },
    "1590": {
      "op": "SWAP2"
    },
    "1591": {
      "op": "SWAP1"
    },
    "1592": {
      "op": "SWAP2"
    },
    "1593": {
      "op": "ADD"
    },
    "1594": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1596": {
      "op": "ADD"
    },
    "1597": {
      "op": "SWAP3"
    },
    "1598": {
      "op": "SWAP2"
    },
    "1599": {
      "op": "POP"
    },
    "1600": {
      "op": "POP"
    },
    "1601": {
      "jump": "o",
      "op": "JUMP"
    },
    "1602": {
      "op": "JUMPDEST"
    },
    "1603": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1605": {
      "op": "JUMPDEST"
    },
    "1606": {
      "op": "DUP4"
    },
    "1607": {
      "op": "DUP2"
    },
    "1608": {
      "op": "LT"
    },
    "1609": {
      "op": "ISZERO"
    },
    "1610": {
      "op": "PUSH2",
      "value": "0x65D"
    },
    "1613": {
      "op": "JUMPI"
    },
    "1614": {
      "op": "DUP2"
    },
    "1615": {
      "op": "DUP2"
    },
    "1616": {
      "op": "ADD"
    },
    "1617": {
      "op": "MLOAD"
    },
    "1618": {
      "op": "DUP4"
    },
    "1619": {
      "op": "DUP3"
    },
    "1620": {
      "op": "ADD"
    },
    "1621": {
      "op": "MSTORE"
    },
    "1622": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1624": {
      "op": "ADD"
    },
    "1625": {
      "op": "PUSH2",
      "value": "0x645"
    },
    "1628": {
      "op": "JUMP"
    },
    "1629": {
      "op": "JUMPDEST"
    },
    "1630": {
      "op": "DUP4"
    },
    "1631": {
      "op": "DUP2"
    },
    "1632": {
      "op": "GT"
    },
    "1633": {
      "op": "ISZERO"
    },
    "1634": {
      "op": "PUSH2",
      "value": "0x127"
    },
    "1637": {
      "op": "JUMPI"
    },
    "1638": {
      "op": "POP"
    },
    "1639": {
      "op": "POP"
    },
    "1640": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1642": {
      "op": "SWAP2"
    },
    "1643": {
      "op": "ADD"
    },
    "1644": {
      "op": "MSTORE"
    },
    "1645": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "b31eaceb4c5fd10ac2bff1a392895033469c759c",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Clones.sol\";\nimport \"../utils/Address.sol\";\n\ncontract ClonesMock {\n    using Address for address;\n    using Clones for address;\n\n    event NewInstance(address instance);\n\n    function clone(address implementation, bytes calldata initdata) public payable {\n        _initAndEmit(implementation.clone(), initdata);\n    }\n\n    function cloneDeterministic(address implementation, bytes32 salt, bytes calldata initdata) public payable {\n        _initAndEmit(implementation.cloneDeterministic(salt), initdata);\n    }\n\n    function predictDeterministicAddress(address implementation, bytes32 salt) public view returns (address predicted) {\n        return implementation.predictDeterministicAddress(salt);\n    }\n\n    function _initAndEmit(address instance, bytes memory initdata) private {\n        if (initdata.length > 0) {\n            instance.functionCallWithValue(initdata, msg.value);\n        }\n        emit NewInstance(instance);\n    }\n}\n",
  "sourceMap": "120:889:15:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin-contracts/contracts/mocks/ClonesMock.sol",
  "type": "contract"
}