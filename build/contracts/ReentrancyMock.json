{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "callback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ReentrancyAttack",
          "name": "attacker",
          "type": "address"
        }
      ],
      "name": "countAndCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "countLocalRecursive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "countThisRecursive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "121": "contracts/openzeppelin-contracts/contracts/utils/Context.sol",
    "60": "contracts/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol",
    "61": "contracts/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol",
    "80": "contracts/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol",
    "exportedSymbols": {
      "Context": [
        15014
      ],
      "ReentrancyAttack": [
        5687
      ],
      "ReentrancyGuard": [
        8070
      ],
      "ReentrancyMock": [
        5807
      ]
    },
    "id": 5808,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5689,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:61"
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "file": "../security/ReentrancyGuard.sol",
        "id": 5690,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5808,
        "sourceUnit": 8071,
        "src": "58:41:61",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol",
        "file": "./ReentrancyAttack.sol",
        "id": 5691,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5808,
        "sourceUnit": 5688,
        "src": "100:32:61",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5692,
              "name": "ReentrancyGuard",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8070,
              "src": "161:15:61"
            },
            "id": 5693,
            "nodeType": "InheritanceSpecifier",
            "src": "161:15:61"
          }
        ],
        "contractDependencies": [
          8070
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 5807,
        "linearizedBaseContracts": [
          5807,
          8070
        ],
        "name": "ReentrancyMock",
        "nameLocation": "143:14:61",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "61bc221a",
            "id": 5695,
            "mutability": "mutable",
            "name": "counter",
            "nameLocation": "198:7:61",
            "nodeType": "VariableDeclaration",
            "scope": 5807,
            "src": "183:22:61",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 5694,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "183:7:61",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 5702,
              "nodeType": "Block",
              "src": "227:28:61",
              "statements": [
                {
                  "expression": {
                    "id": 5700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 5698,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5695,
                      "src": "237:7:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 5699,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "247:1:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "237:11:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 5701,
                  "nodeType": "ExpressionStatement",
                  "src": "237:11:61"
                }
              ]
            },
            "id": 5703,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5696,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "224:2:61"
            },
            "returnParameters": {
              "id": 5697,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "227:0:61"
            },
            "scope": 5807,
            "src": "212:43:61",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5711,
              "nodeType": "Block",
              "src": "303:25:61",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 5708,
                      "name": "_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5806,
                      "src": "313:6:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 5709,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "313:8:61",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5710,
                  "nodeType": "ExpressionStatement",
                  "src": "313:8:61"
                }
              ]
            },
            "functionSelector": "083b2732",
            "id": 5712,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 5706,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 5705,
                  "name": "nonReentrant",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8069,
                  "src": "290:12:61"
                },
                "nodeType": "ModifierInvocation",
                "src": "290:12:61"
              }
            ],
            "name": "callback",
            "nameLocation": "270:8:61",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5704,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "278:2:61"
            },
            "returnParameters": {
              "id": 5707,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "303:0:61"
            },
            "scope": 5807,
            "src": "261:67:61",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5733,
              "nodeType": "Block",
              "src": "394:100:61",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 5721,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 5719,
                      "name": "n",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5714,
                      "src": "408:1:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 5720,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "412:1:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "408:5:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5732,
                  "nodeType": "IfStatement",
                  "src": "404:84:61",
                  "trueBody": {
                    "id": 5731,
                    "nodeType": "Block",
                    "src": "415:73:61",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 5722,
                            "name": "_count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5806,
                            "src": "429:6:61",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 5723,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "429:8:61",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 5724,
                        "nodeType": "ExpressionStatement",
                        "src": "429:8:61"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 5728,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 5726,
                                "name": "n",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5714,
                                "src": "471:1:61",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 5727,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "475:1:61",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "471:5:61",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 5725,
                            "name": "countLocalRecursive",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5734,
                            "src": "451:19:61",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 5729,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "451:26:61",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 5730,
                        "nodeType": "ExpressionStatement",
                        "src": "451:26:61"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "96ffa690",
            "id": 5734,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 5717,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 5716,
                  "name": "nonReentrant",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8069,
                  "src": "381:12:61"
                },
                "nodeType": "ModifierInvocation",
                "src": "381:12:61"
              }
            ],
            "name": "countLocalRecursive",
            "nameLocation": "343:19:61",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5715,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5714,
                  "mutability": "mutable",
                  "name": "n",
                  "nameLocation": "371:1:61",
                  "nodeType": "VariableDeclaration",
                  "scope": 5734,
                  "src": "363:9:61",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5713,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "363:7:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "362:11:61"
            },
            "returnParameters": {
              "id": 5718,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "394:0:61"
            },
            "scope": 5807,
            "src": "334:160:61",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5770,
              "nodeType": "Block",
              "src": "559:297:61",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 5743,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 5741,
                      "name": "n",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5736,
                      "src": "573:1:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 5742,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "577:1:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "573:5:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5769,
                  "nodeType": "IfStatement",
                  "src": "569:281:61",
                  "trueBody": {
                    "id": 5768,
                    "nodeType": "Block",
                    "src": "580:270:61",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 5744,
                            "name": "_count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5806,
                            "src": "594:6:61",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 5745,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "594:8:61",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 5746,
                        "nodeType": "ExpressionStatement",
                        "src": "594:8:61"
                      },
                      {
                        "assignments": [
                          5748,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 5748,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "685:7:61",
                            "nodeType": "VariableDeclaration",
                            "scope": 5768,
                            "src": "680:12:61",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 5747,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "680:4:61",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 5762,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "636f756e74546869735265637572736976652875696e7432353629",
                                  "id": 5756,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "740:29:61",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_8c5344fa6b010fdd5e2cff6c41f85eb27e8b457f2d042f418209d56095018878",
                                    "typeString": "literal_string \"countThisRecursive(uint256)\""
                                  },
                                  "value": "countThisRecursive(uint256)"
                                },
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 5759,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 5757,
                                    "name": "n",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5736,
                                    "src": "771:1:61",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "hexValue": "31",
                                    "id": 5758,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "775:1:61",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "771:5:61",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_8c5344fa6b010fdd5e2cff6c41f85eb27e8b457f2d042f418209d56095018878",
                                    "typeString": "literal_string \"countThisRecursive(uint256)\""
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 5754,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "716:3:61",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 5755,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSignature",
                                "nodeType": "MemberAccess",
                                "src": "716:23:61",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (string memory) pure returns (bytes memory)"
                                }
                              },
                              "id": 5760,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "716:61:61",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 5751,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "705:4:61",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ReentrancyMock_$5807",
                                    "typeString": "contract ReentrancyMock"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ReentrancyMock_$5807",
                                    "typeString": "contract ReentrancyMock"
                                  }
                                ],
                                "id": 5750,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "697:7:61",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 5749,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "697:7:61",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 5752,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "697:13:61",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 5753,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "697:18:61",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 5761,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "697:81:61",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "679:99:61"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 5764,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5748,
                              "src": "800:7:61",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5265656e7472616e63794d6f636b3a206661696c65642063616c6c",
                              "id": 5765,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "809:29:61",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6e7df6a41596369ff81d71c1a274a01b76010e7a5848023b008a2b13b15462a6",
                                "typeString": "literal_string \"ReentrancyMock: failed call\""
                              },
                              "value": "ReentrancyMock: failed call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6e7df6a41596369ff81d71c1a274a01b76010e7a5848023b008a2b13b15462a6",
                                "typeString": "literal_string \"ReentrancyMock: failed call\""
                              }
                            ],
                            "id": 5763,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "792:7:61",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 5766,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "792:47:61",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 5767,
                        "nodeType": "ExpressionStatement",
                        "src": "792:47:61"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "8c5344fa",
            "id": 5771,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 5739,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 5738,
                  "name": "nonReentrant",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8069,
                  "src": "546:12:61"
                },
                "nodeType": "ModifierInvocation",
                "src": "546:12:61"
              }
            ],
            "name": "countThisRecursive",
            "nameLocation": "509:18:61",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5737,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5736,
                  "mutability": "mutable",
                  "name": "n",
                  "nameLocation": "536:1:61",
                  "nodeType": "VariableDeclaration",
                  "scope": 5771,
                  "src": "528:9:61",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5735,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "528:7:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "527:11:61"
            },
            "returnParameters": {
              "id": 5740,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "559:0:61"
            },
            "scope": 5807,
            "src": "500:356:61",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5797,
              "nodeType": "Block",
              "src": "931:115:61",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 5779,
                      "name": "_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5806,
                      "src": "941:6:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 5780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "941:8:61",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5781,
                  "nodeType": "ExpressionStatement",
                  "src": "941:8:61"
                },
                {
                  "assignments": [
                    5783
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5783,
                      "mutability": "mutable",
                      "name": "func",
                      "nameLocation": "966:4:61",
                      "nodeType": "VariableDeclaration",
                      "scope": 5797,
                      "src": "959:11:61",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "typeName": {
                        "id": 5782,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "959:6:61",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5790,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "63616c6c6261636b2829",
                            "id": 5787,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "990:12:61",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402",
                              "typeString": "literal_string \"callback()\""
                            },
                            "value": "callback()"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402",
                              "typeString": "literal_string \"callback()\""
                            }
                          ],
                          "id": 5786,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -8,
                          "src": "980:9:61",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 5788,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "980:23:61",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 5785,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "973:6:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes4_$",
                        "typeString": "type(bytes4)"
                      },
                      "typeName": {
                        "id": 5784,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "973:6:61",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 5789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "973:31:61",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "959:45:61"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 5794,
                        "name": "func",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5783,
                        "src": "1034:4:61",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "expression": {
                        "id": 5791,
                        "name": "attacker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5774,
                        "src": "1014:8:61",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ReentrancyAttack_$5687",
                          "typeString": "contract ReentrancyAttack"
                        }
                      },
                      "id": 5793,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "callSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5686,
                      "src": "1014:19:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bytes4_$returns$__$",
                        "typeString": "function (bytes4) external"
                      }
                    },
                    "id": 5795,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1014:25:61",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5796,
                  "nodeType": "ExpressionStatement",
                  "src": "1014:25:61"
                }
              ]
            },
            "functionSelector": "b672ad8b",
            "id": 5798,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 5777,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 5776,
                  "name": "nonReentrant",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8069,
                  "src": "918:12:61"
                },
                "nodeType": "ModifierInvocation",
                "src": "918:12:61"
              }
            ],
            "name": "countAndCall",
            "nameLocation": "871:12:61",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5774,
                  "mutability": "mutable",
                  "name": "attacker",
                  "nameLocation": "901:8:61",
                  "nodeType": "VariableDeclaration",
                  "scope": 5798,
                  "src": "884:25:61",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ReentrancyAttack_$5687",
                    "typeString": "contract ReentrancyAttack"
                  },
                  "typeName": {
                    "id": 5773,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5772,
                      "name": "ReentrancyAttack",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5687,
                      "src": "884:16:61"
                    },
                    "referencedDeclaration": 5687,
                    "src": "884:16:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ReentrancyAttack_$5687",
                      "typeString": "contract ReentrancyAttack"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "883:27:61"
            },
            "returnParameters": {
              "id": 5778,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "931:0:61"
            },
            "scope": 5807,
            "src": "862:184:61",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5805,
              "nodeType": "Block",
              "src": "1078:29:61",
              "statements": [
                {
                  "expression": {
                    "id": 5803,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 5801,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5695,
                      "src": "1088:7:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 5802,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1099:1:61",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1088:12:61",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 5804,
                  "nodeType": "ExpressionStatement",
                  "src": "1088:12:61"
                }
              ]
            },
            "id": 5806,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_count",
            "nameLocation": "1061:6:61",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5799,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1067:2:61"
            },
            "returnParameters": {
              "id": 5800,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1078:0:61"
            },
            "scope": 5807,
            "src": "1052:55:61",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "scope": 5808,
        "src": "134:975:61"
      }
    ],
    "src": "33:1077:61"
  },
  "bytecode": "608060405234801561001057600080fd5b5060016000818155905561046b806100296000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063083b27321461005c57806361bc221a146100665780638c5344fa1461008157806396ffa69014610094578063b672ad8b146100a7575b600080fd5b6100646100ba565b005b61006f60015481565b60405190815260200160405180910390f35b61006461008f366004610368565b6100fa565b6100646100a2366004610368565b610222565b6100646100b536600461033a565b610266565b600260005414156100e65760405162461bcd60e51b81526004016100dd906103b9565b60405180910390fd5b60026000556100f3610321565b6001600055565b6002600054141561011d5760405162461bcd60e51b81526004016100dd906103b9565b6002600055801561021a57610130610321565b60003061013e600184610408565b60405160240161015091815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316634629a27d60e11b179052516101859190610380565b6000604051808303816000865af19150503d80600081146101c2576040519150601f19603f3d011682016040523d82523d6000602084013e6101c7565b606091505b50509050806102185760405162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c000000000060448201526064016100dd565b505b506001600055565b600260005414156102455760405162461bcd60e51b81526004016100dd906103b9565b6002600055801561021a57610258610321565b61021a6100a2600183610408565b600260005414156102895760405162461bcd60e51b81526004016100dd906103b9565b6002600055610296610321565b604051630a2df1ed60e01b815263041d939960e11b60048201527f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402906001600160a01b03831690630a2df1ed90602401600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b5050600160005550505050565b600180600082825461033391906103f0565b9091555050565b60006020828403121561034b578081fd5b81356001600160a01b0381168114610361578182fd5b9392505050565b600060208284031215610379578081fd5b5035919050565b60008251815b818110156103a05760208186018101518583015201610386565b818111156103ae5782828501525b509190910192915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082198211156104035761040361041f565b500190565b60008282101561041a5761041a61041f565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207478ec6e3d6f52099c5974aa8e442d1a0683fa5eed5524ee7f81c64b690ba0bc64736f6c63430008030033",
  "bytecodeSha1": "0ceb853623abd40d360ab94fcb4d4d1268318664",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.3+commit.8d00100c"
  },
  "contractName": "ReentrancyMock",
  "coverageMap": {
    "branches": {
      "121": {},
      "60": {},
      "61": {
        "ReentrancyMock.countLocalRecursive": {
          "10": [
            408,
            413,
            false
          ]
        },
        "ReentrancyMock.countThisRecursive": {
          "8": [
            573,
            578,
            false
          ],
          "9": [
            800,
            807,
            true
          ]
        }
      },
      "80": {
        "ReentrancyMock.countAndCall": {
          "11": [
            2260,
            2279,
            true
          ]
        }
      }
    },
    "statements": {
      "121": {},
      "60": {},
      "61": {
        "ReentrancyMock._count": {
          "7": [
            1088,
            1100
          ]
        },
        "ReentrancyMock.callback": {
          "0": [
            313,
            321
          ]
        },
        "ReentrancyMock.countAndCall": {
          "5": [
            941,
            949
          ],
          "6": [
            1014,
            1039
          ]
        },
        "ReentrancyMock.countLocalRecursive": {
          "3": [
            429,
            437
          ],
          "4": [
            451,
            477
          ]
        },
        "ReentrancyMock.countThisRecursive": {
          "1": [
            594,
            602
          ],
          "2": [
            792,
            839
          ]
        }
      },
      "80": {}
    }
  },
  "dependencies": [
    "Context",
    "ReentrancyAttack",
    "ReentrancyGuard"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c8063083b27321461005c57806361bc221a146100665780638c5344fa1461008157806396ffa69014610094578063b672ad8b146100a7575b600080fd5b6100646100ba565b005b61006f60015481565b60405190815260200160405180910390f35b61006461008f366004610368565b6100fa565b6100646100a2366004610368565b610222565b6100646100b536600461033a565b610266565b600260005414156100e65760405162461bcd60e51b81526004016100dd906103b9565b60405180910390fd5b60026000556100f3610321565b6001600055565b6002600054141561011d5760405162461bcd60e51b81526004016100dd906103b9565b6002600055801561021a57610130610321565b60003061013e600184610408565b60405160240161015091815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316634629a27d60e11b179052516101859190610380565b6000604051808303816000865af19150503d80600081146101c2576040519150601f19603f3d011682016040523d82523d6000602084013e6101c7565b606091505b50509050806102185760405162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c000000000060448201526064016100dd565b505b506001600055565b600260005414156102455760405162461bcd60e51b81526004016100dd906103b9565b6002600055801561021a57610258610321565b61021a6100a2600183610408565b600260005414156102895760405162461bcd60e51b81526004016100dd906103b9565b6002600055610296610321565b604051630a2df1ed60e01b815263041d939960e11b60048201527f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402906001600160a01b03831690630a2df1ed90602401600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b5050600160005550505050565b600180600082825461033391906103f0565b9091555050565b60006020828403121561034b578081fd5b81356001600160a01b0381168114610361578182fd5b9392505050565b600060208284031215610379578081fd5b5035919050565b60008251815b818110156103a05760208186018101518583015201610386565b818111156103ae5782828501525b509190910192915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082198211156104035761040361041f565b500190565b60008282101561041a5761041a61041f565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207478ec6e3d6f52099c5974aa8e442d1a0683fa5eed5524ee7f81c64b690ba0bc64736f6c63430008030033",
  "deployedSourceMap": "134:975:61:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;261:67;;;:::i;:::-;;183:22;;;;;;;;;2049:25:144;;;2037:2;2022:18;183:22:61;;;;;;;500:356;;;;;;:::i;:::-;;:::i;334:160::-;;;;;;:::i;:::-;;:::i;862:184::-;;;;;;:::i;:::-;;:::i;261:67::-;1680:1:80;2260:7;;:19;;2252:63;;;;-1:-1:-1;;;2252:63:80;;;;;;;:::i;:::-;;;;;;;;;1680:1;2390:7;:18;313:8:61::1;:6;:8::i;:::-;1637:1:80::0;2563:7;:22;261:67:61:o;500:356::-;1680:1:80;2260:7;;:19;;2252:63;;;;-1:-1:-1;;;2252:63:80;;;;;;;:::i;:::-;1680:1;2390:7;:18;573:5:61;;569:281:::1;;594:8;:6;:8::i;:::-;680:12;705:4;771:5;775:1;771::::0;:5:::1;:::i;:::-;716:61;;;;;;2049:25:144::0;;2037:2;2022:18;;2004:76;716:61:61::1;;::::0;;-1:-1:-1;;716:61:61;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;716:61:61::1;-1:-1:-1::0;;;716:61:61::1;::::0;;697:81;::::1;::::0;716:61;697:81:::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;679:99;;;800:7;792:47;;;::::0;-1:-1:-1;;;792:47:61;;1389:2:144;792:47:61::1;::::0;::::1;1371:21:144::0;1428:2;1408:18;;;1401:30;1467:29;1447:18;;;1440:57;1514:18;;792:47:61::1;1361:177:144::0;792:47:61::1;569:281;;-1:-1:-1::0;1637:1:80;2563:7;:22;500:356:61:o;334:160::-;1680:1:80;2260:7;;:19;;2252:63;;;;-1:-1:-1;;;2252:63:80;;;;;;;:::i;:::-;1680:1;2390:7;:18;408:5:61;;404:84:::1;;429:8;:6;:8::i;:::-;451:26;471:5;475:1;471::::0;:5:::1;:::i;862:184::-:0;1680:1:80;2260:7;;:19;;2252:63;;;;-1:-1:-1;;;2252:63:80;;;;;;;:::i;:::-;1680:1;2390:7;:18;941:8:61::1;:6;:8::i;:::-;1014:25;::::0;-1:-1:-1;;;1014:25:61;;-1:-1:-1;;;1014:25:61::1;::::0;::::1;1124:52:144::0;980:23:61::1;::::0;-1:-1:-1;;;;;1014:19:61;::::1;::::0;::::1;::::0;1097:18:144;;1014:25:61::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;1637:1:80;2563:7;:22;-1:-1:-1;;;;862:184:61:o;1052:55::-;1099:1;1088:7;;:12;;;;;;;:::i;:::-;;;;-1:-1:-1;;1052:55:61:o;14:331:144:-;;151:2;139:9;130:7;126:23;122:32;119:2;;;172:6;164;157:22;119:2;203:23;;-1:-1:-1;;;;;255:31:144;;245:42;;235:2;;306:6;298;291:22;235:2;334:5;109:236;-1:-1:-1;;;109:236:144:o;350:190::-;;462:2;450:9;441:7;437:23;433:32;430:2;;;483:6;475;468:22;430:2;-1:-1:-1;511:23:144;;420:120;-1:-1:-1;420:120:144:o;545:430::-;;712:6;706:13;737:3;749:129;763:6;760:1;757:13;749:129;;;861:4;845:14;;;841:25;;835:32;822:11;;;815:53;778:12;749:129;;;896:6;893:1;890:13;887:2;;;931:3;922:6;917:3;913:16;906:29;887:2;-1:-1:-1;953:16:144;;;;;682:293;-1:-1:-1;;682:293:144:o;1543:355::-;1745:2;1727:21;;;1784:2;1764:18;;;1757:30;1823:33;1818:2;1803:18;;1796:61;1889:2;1874:18;;1717:181::o;2085:128::-;;2156:1;2152:6;2149:1;2146:13;2143:2;;;2162:18;;:::i;:::-;-1:-1:-1;2198:9:144;;2133:80::o;2218:125::-;;2286:1;2283;2280:8;2277:2;;;2291:18;;:::i;:::-;-1:-1:-1;2328:9:144;;2267:76::o;2348:127::-;2409:10;2404:3;2400:20;2397:1;2390:31;2440:4;2437:1;2430:15;2464:4;2461:1;2454:15",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    134,
    1109
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x83B2732 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x61BC221A EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8C5344FA EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x96FFA690 EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0xB672AD8B EQ PUSH2 0xA7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0xBA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6F PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x64 PUSH2 0x8F CALLDATASIZE PUSH1 0x4 PUSH2 0x368 JUMP JUMPDEST PUSH2 0xFA JUMP JUMPDEST PUSH2 0x64 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x368 JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH2 0x64 PUSH2 0xB5 CALLDATASIZE PUSH1 0x4 PUSH2 0x33A JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0xF3 PUSH2 0x321 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x11D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE DUP1 ISZERO PUSH2 0x21A JUMPI PUSH2 0x130 PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH2 0x13E PUSH1 0x1 DUP5 PUSH2 0x408 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x150 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x4629A27D PUSH1 0xE1 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0x380 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x218 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E63794D6F636B3A206661696C65642063616C6C0000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xDD JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x245 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE DUP1 ISZERO PUSH2 0x21A JUMPI PUSH2 0x258 PUSH2 0x321 JUMP JUMPDEST PUSH2 0x21A PUSH2 0xA2 PUSH1 0x1 DUP4 PUSH2 0x408 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x289 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x296 PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA2DF1ED PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x41D9399 PUSH1 0xE1 SHL PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x83B2732F78169BFAAD6B407FA338CC97D697ED69D3915A18239CC111D51A402 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xA2DF1ED SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x314 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x333 SWAP2 SWAP1 PUSH2 0x3F0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x361 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x379 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x386 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x3AE JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x403 JUMPI PUSH2 0x403 PUSH2 0x41F JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x41A JUMPI PUSH2 0x41A PUSH2 0x41F JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0x78EC6E3D6F52099C5974AA8E442D1A0683FA5EED55 0x24 0xEE PUSH32 0x81C64B690BA0BC64736F6C634300080300330000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        134,
        1109
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "MSTORE",
      "path": "61"
    },
    "5": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "CALLVALUE",
      "path": "61"
    },
    "6": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "DUP1",
      "path": "61"
    },
    "7": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "ISZERO",
      "path": "61"
    },
    "8": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "12": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "DUP1",
      "path": "61"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "REVERT",
      "path": "61"
    },
    "16": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "17": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "POP",
      "path": "61"
    },
    "18": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "CALLDATASIZE",
      "path": "61"
    },
    "21": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "LT",
      "path": "61"
    },
    "22": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "26": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "CALLDATALOAD",
      "path": "61"
    },
    "29": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "SHR",
      "path": "61"
    },
    "32": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "DUP1",
      "path": "61"
    },
    "33": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH4",
      "path": "61",
      "value": "0x83B2732"
    },
    "38": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "EQ",
      "path": "61"
    },
    "39": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "43": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "DUP1",
      "path": "61"
    },
    "44": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH4",
      "path": "61",
      "value": "0x61BC221A"
    },
    "49": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "EQ",
      "path": "61"
    },
    "50": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x66"
    },
    "53": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "54": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "DUP1",
      "path": "61"
    },
    "55": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH4",
      "path": "61",
      "value": "0x8C5344FA"
    },
    "60": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "EQ",
      "path": "61"
    },
    "61": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x81"
    },
    "64": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "65": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "DUP1",
      "path": "61"
    },
    "66": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH4",
      "path": "61",
      "value": "0x96FFA690"
    },
    "71": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "EQ",
      "path": "61"
    },
    "72": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x94"
    },
    "75": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "76": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "DUP1",
      "path": "61"
    },
    "77": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH4",
      "path": "61",
      "value": "0xB672AD8B"
    },
    "82": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "EQ",
      "path": "61"
    },
    "83": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0xA7"
    },
    "86": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "87": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "88": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "DUP1",
      "path": "61"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        134,
        1109
      ],
      "op": "REVERT",
      "path": "61"
    },
    "92": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        261,
        328
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "93": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        261,
        328
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x64"
    },
    "96": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        261,
        328
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0xBA"
    },
    "99": {
      "fn": "ReentrancyMock.callback",
      "jump": "i",
      "offset": [
        261,
        328
      ],
      "op": "JUMP",
      "path": "61"
    },
    "100": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        261,
        328
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "101": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        261,
        328
      ],
      "op": "STOP",
      "path": "61"
    },
    "102": {
      "offset": [
        183,
        205
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "103": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x6F"
    },
    "106": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x1"
    },
    "108": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "SLOAD",
      "path": "61"
    },
    "109": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "DUP2",
      "path": "61"
    },
    "110": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "JUMP",
      "path": "61"
    },
    "111": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "112": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x40"
    },
    "114": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "115": {
      "op": "SWAP1"
    },
    "116": {
      "op": "DUP2"
    },
    "117": {
      "op": "MSTORE"
    },
    "118": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "120": {
      "op": "ADD"
    },
    "121": {
      "offset": [
        183,
        205
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x40"
    },
    "123": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "124": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "DUP1",
      "path": "61"
    },
    "125": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "SWAP2",
      "path": "61"
    },
    "126": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "SUB",
      "path": "61"
    },
    "127": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "SWAP1",
      "path": "61"
    },
    "128": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "RETURN",
      "path": "61"
    },
    "129": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        500,
        856
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "130": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        500,
        856
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x64"
    },
    "133": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        500,
        856
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x8F"
    },
    "136": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        500,
        856
      ],
      "op": "CALLDATASIZE",
      "path": "61"
    },
    "137": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        500,
        856
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x4"
    },
    "139": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        500,
        856
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x368"
    },
    "142": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        500,
        856
      ],
      "op": "JUMP",
      "path": "61"
    },
    "143": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        500,
        856
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "144": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        500,
        856
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0xFA"
    },
    "147": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        500,
        856
      ],
      "op": "JUMP",
      "path": "61"
    },
    "148": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        334,
        494
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "149": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        334,
        494
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x64"
    },
    "152": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        334,
        494
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0xA2"
    },
    "155": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        334,
        494
      ],
      "op": "CALLDATASIZE",
      "path": "61"
    },
    "156": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        334,
        494
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x4"
    },
    "158": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        334,
        494
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x368"
    },
    "161": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        334,
        494
      ],
      "op": "JUMP",
      "path": "61"
    },
    "162": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        334,
        494
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "163": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        334,
        494
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x222"
    },
    "166": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        334,
        494
      ],
      "op": "JUMP",
      "path": "61"
    },
    "167": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        862,
        1046
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "168": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        862,
        1046
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x64"
    },
    "171": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        862,
        1046
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0xB5"
    },
    "174": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        862,
        1046
      ],
      "op": "CALLDATASIZE",
      "path": "61"
    },
    "175": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        862,
        1046
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x4"
    },
    "177": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        862,
        1046
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x33A"
    },
    "180": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "i",
      "offset": [
        862,
        1046
      ],
      "op": "JUMP",
      "path": "61"
    },
    "181": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        862,
        1046
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "182": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        862,
        1046
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x266"
    },
    "185": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "i",
      "offset": [
        862,
        1046
      ],
      "op": "JUMP",
      "path": "61"
    },
    "186": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        261,
        328
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "187": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x2"
    },
    "189": {
      "offset": [
        2260,
        2267
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "191": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2260,
        2267
      ],
      "op": "SLOAD",
      "path": "80"
    },
    "192": {
      "offset": [
        2260,
        2279
      ],
      "op": "EQ",
      "path": "80"
    },
    "193": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2260,
        2279
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "194": {
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0xE6"
    },
    "197": {
      "offset": [
        2252,
        2315
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "198": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "200": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "201": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "205": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "207": {
      "op": "SHL"
    },
    "208": {
      "offset": [
        2252,
        2315
      ],
      "op": "DUP2",
      "path": "80"
    },
    "209": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "210": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x4"
    },
    "212": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "ADD",
      "path": "80"
    },
    "213": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0xDD"
    },
    "216": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "217": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x3B9"
    },
    "220": {
      "fn": "ReentrancyMock.callback",
      "jump": "i",
      "offset": [
        2252,
        2315
      ],
      "op": "JUMP",
      "path": "80"
    },
    "221": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "222": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "224": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "225": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "DUP1",
      "path": "80"
    },
    "226": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "SWAP2",
      "path": "80"
    },
    "227": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "SUB",
      "path": "80"
    },
    "228": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "229": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "80"
    },
    "230": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2252,
        2315
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "231": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x2"
    },
    "233": {
      "offset": [
        2390,
        2397
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "235": {
      "offset": [
        2390,
        2408
      ],
      "op": "SSTORE",
      "path": "80"
    },
    "236": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        313,
        321
      ],
      "op": "PUSH2",
      "path": "61",
      "statement": 0,
      "value": "0xF3"
    },
    "239": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        313,
        319
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x321"
    },
    "242": {
      "fn": "ReentrancyMock.callback",
      "jump": "i",
      "offset": [
        313,
        321
      ],
      "op": "JUMP",
      "path": "61"
    },
    "243": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        313,
        321
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "244": {
      "offset": [
        1637,
        1638
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x1"
    },
    "246": {
      "offset": [
        2563,
        2570
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "248": {
      "offset": [
        2563,
        2585
      ],
      "op": "SSTORE",
      "path": "80"
    },
    "249": {
      "fn": "ReentrancyMock.callback",
      "jump": "o",
      "offset": [
        261,
        328
      ],
      "op": "JUMP",
      "path": "61"
    },
    "250": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        500,
        856
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "251": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x2"
    },
    "253": {
      "offset": [
        2260,
        2267
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "255": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2260,
        2267
      ],
      "op": "SLOAD",
      "path": "80"
    },
    "256": {
      "offset": [
        2260,
        2279
      ],
      "op": "EQ",
      "path": "80"
    },
    "257": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2260,
        2279
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "258": {
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x11D"
    },
    "261": {
      "offset": [
        2252,
        2315
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "262": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "264": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "265": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "269": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "271": {
      "op": "SHL"
    },
    "272": {
      "offset": [
        2252,
        2315
      ],
      "op": "DUP2",
      "path": "80"
    },
    "273": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "274": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x4"
    },
    "276": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "ADD",
      "path": "80"
    },
    "277": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0xDD"
    },
    "280": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "281": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x3B9"
    },
    "284": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        2252,
        2315
      ],
      "op": "JUMP",
      "path": "80"
    },
    "285": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "286": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x2"
    },
    "288": {
      "offset": [
        2390,
        2397
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "290": {
      "offset": [
        2390,
        2408
      ],
      "op": "SSTORE",
      "path": "80"
    },
    "291": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        573,
        578
      ],
      "op": "DUP1",
      "path": "61"
    },
    "292": {
      "branch": 8,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        573,
        578
      ],
      "op": "ISZERO",
      "path": "61"
    },
    "293": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        569,
        850
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x21A"
    },
    "296": {
      "branch": 8,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        569,
        850
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "297": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        594,
        602
      ],
      "op": "PUSH2",
      "path": "61",
      "statement": 1,
      "value": "0x130"
    },
    "300": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        594,
        600
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x321"
    },
    "303": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        594,
        602
      ],
      "op": "JUMP",
      "path": "61"
    },
    "304": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        594,
        602
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "305": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        680,
        692
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "307": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        705,
        709
      ],
      "op": "ADDRESS",
      "path": "61"
    },
    "308": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        771,
        776
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x13E"
    },
    "311": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        775,
        776
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x1"
    },
    "313": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        771,
        772
      ],
      "op": "DUP5",
      "path": "61"
    },
    "314": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        771,
        776
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x408"
    },
    "317": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        771,
        776
      ],
      "op": "JUMP",
      "path": "61"
    },
    "318": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        771,
        776
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "319": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x40"
    },
    "321": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "322": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x24"
    },
    "324": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "ADD",
      "path": "61"
    },
    "325": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x150"
    },
    "328": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "SWAP2",
      "path": "61"
    },
    "329": {
      "op": "DUP2"
    },
    "330": {
      "op": "MSTORE"
    },
    "331": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "333": {
      "op": "ADD"
    },
    "334": {
      "op": "SWAP1"
    },
    "335": {
      "op": "JUMP"
    },
    "336": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "337": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x40"
    },
    "339": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "DUP1",
      "path": "61"
    },
    "340": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "341": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "343": {
      "op": "NOT"
    },
    "344": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "DUP2",
      "path": "61"
    },
    "345": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "DUP5",
      "path": "61"
    },
    "346": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "SUB",
      "path": "61"
    },
    "347": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "ADD",
      "path": "61"
    },
    "348": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "DUP2",
      "path": "61"
    },
    "349": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "MSTORE",
      "path": "61"
    },
    "350": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "SWAP2",
      "path": "61"
    },
    "351": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "DUP2",
      "path": "61"
    },
    "352": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "MSTORE",
      "path": "61"
    },
    "353": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x20"
    },
    "355": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "DUP3",
      "path": "61"
    },
    "356": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "ADD",
      "path": "61"
    },
    "357": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "DUP1",
      "path": "61"
    },
    "358": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "359": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "361": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "363": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "365": {
      "op": "SHL"
    },
    "366": {
      "op": "SUB"
    },
    "367": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "AND",
      "path": "61"
    },
    "368": {
      "op": "PUSH4",
      "value": "0x4629A27D"
    },
    "373": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "375": {
      "op": "SHL"
    },
    "376": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "OR",
      "path": "61"
    },
    "377": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "SWAP1",
      "path": "61"
    },
    "378": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "MSTORE",
      "path": "61"
    },
    "379": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "380": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x185"
    },
    "383": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "SWAP2",
      "path": "61"
    },
    "384": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        716,
        777
      ],
      "op": "SWAP1",
      "path": "61"
    },
    "385": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x380"
    },
    "388": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        697,
        778
      ],
      "op": "JUMP",
      "path": "61"
    },
    "389": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "390": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "392": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x40"
    },
    "394": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "395": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "DUP1",
      "path": "61"
    },
    "396": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "DUP4",
      "path": "61"
    },
    "397": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "SUB",
      "path": "61"
    },
    "398": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "DUP2",
      "path": "61"
    },
    "399": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "401": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "DUP7",
      "path": "61"
    },
    "402": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "GAS",
      "path": "61"
    },
    "403": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "CALL",
      "path": "61"
    },
    "404": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "SWAP2",
      "path": "61"
    },
    "405": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "POP",
      "path": "61"
    },
    "406": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "POP",
      "path": "61"
    },
    "407": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "RETURNDATASIZE",
      "path": "61"
    },
    "408": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "DUP1",
      "path": "61"
    },
    "409": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "411": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "DUP2",
      "path": "61"
    },
    "412": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "EQ",
      "path": "61"
    },
    "413": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x1C2"
    },
    "416": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "417": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x40"
    },
    "419": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "420": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "SWAP2",
      "path": "61"
    },
    "421": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "POP",
      "path": "61"
    },
    "422": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x1F"
    },
    "424": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "NOT",
      "path": "61"
    },
    "425": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x3F"
    },
    "427": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "RETURNDATASIZE",
      "path": "61"
    },
    "428": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "ADD",
      "path": "61"
    },
    "429": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "AND",
      "path": "61"
    },
    "430": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "DUP3",
      "path": "61"
    },
    "431": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "ADD",
      "path": "61"
    },
    "432": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x40"
    },
    "434": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "MSTORE",
      "path": "61"
    },
    "435": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "RETURNDATASIZE",
      "path": "61"
    },
    "436": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "DUP3",
      "path": "61"
    },
    "437": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "MSTORE",
      "path": "61"
    },
    "438": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "RETURNDATASIZE",
      "path": "61"
    },
    "439": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "441": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x20"
    },
    "443": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "DUP5",
      "path": "61"
    },
    "444": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "ADD",
      "path": "61"
    },
    "445": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "RETURNDATACOPY",
      "path": "61"
    },
    "446": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x1C7"
    },
    "449": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "JUMP",
      "path": "61"
    },
    "450": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "451": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x60"
    },
    "453": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "SWAP2",
      "path": "61"
    },
    "454": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "POP",
      "path": "61"
    },
    "455": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "456": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        697,
        778
      ],
      "op": "POP",
      "path": "61"
    },
    "457": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        679,
        778
      ],
      "op": "POP",
      "path": "61"
    },
    "458": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        679,
        778
      ],
      "op": "SWAP1",
      "path": "61"
    },
    "459": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        679,
        778
      ],
      "op": "POP",
      "path": "61"
    },
    "460": {
      "branch": 9,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        800,
        807
      ],
      "op": "DUP1",
      "path": "61",
      "statement": 2
    },
    "461": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x218"
    },
    "464": {
      "branch": 9,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "465": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x40"
    },
    "467": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "468": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "472": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "474": {
      "op": "SHL"
    },
    "475": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "DUP2",
      "path": "61"
    },
    "476": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "MSTORE",
      "path": "61"
    },
    "477": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "479": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x4"
    },
    "481": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "DUP3",
      "path": "61"
    },
    "482": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "ADD",
      "path": "61"
    },
    "483": {
      "op": "MSTORE"
    },
    "484": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "486": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "488": {
      "op": "DUP3"
    },
    "489": {
      "op": "ADD"
    },
    "490": {
      "op": "MSTORE"
    },
    "491": {
      "op": "PUSH32",
      "value": "0x5265656E7472616E63794D6F636B3A206661696C65642063616C6C0000000000"
    },
    "524": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "526": {
      "op": "DUP3"
    },
    "527": {
      "op": "ADD"
    },
    "528": {
      "op": "MSTORE"
    },
    "529": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "531": {
      "op": "ADD"
    },
    "532": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0xDD"
    },
    "535": {
      "op": "JUMP"
    },
    "536": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        792,
        839
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "537": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        569,
        850
      ],
      "op": "POP",
      "path": "61"
    },
    "538": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        569,
        850
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "539": {
      "op": "POP"
    },
    "540": {
      "offset": [
        1637,
        1638
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x1"
    },
    "542": {
      "offset": [
        2563,
        2570
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "544": {
      "offset": [
        2563,
        2585
      ],
      "op": "SSTORE",
      "path": "80"
    },
    "545": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "o",
      "offset": [
        500,
        856
      ],
      "op": "JUMP",
      "path": "61"
    },
    "546": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        334,
        494
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "547": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x2"
    },
    "549": {
      "offset": [
        2260,
        2267
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "551": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2260,
        2267
      ],
      "op": "SLOAD",
      "path": "80"
    },
    "552": {
      "offset": [
        2260,
        2279
      ],
      "op": "EQ",
      "path": "80"
    },
    "553": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2260,
        2279
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "554": {
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x245"
    },
    "557": {
      "offset": [
        2252,
        2315
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "558": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "560": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "561": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "565": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "567": {
      "op": "SHL"
    },
    "568": {
      "offset": [
        2252,
        2315
      ],
      "op": "DUP2",
      "path": "80"
    },
    "569": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "570": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x4"
    },
    "572": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "ADD",
      "path": "80"
    },
    "573": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0xDD"
    },
    "576": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "577": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x3B9"
    },
    "580": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        2252,
        2315
      ],
      "op": "JUMP",
      "path": "80"
    },
    "581": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2252,
        2315
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "582": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x2"
    },
    "584": {
      "offset": [
        2390,
        2397
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "586": {
      "offset": [
        2390,
        2408
      ],
      "op": "SSTORE",
      "path": "80"
    },
    "587": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        408,
        413
      ],
      "op": "DUP1",
      "path": "61"
    },
    "588": {
      "branch": 10,
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        408,
        413
      ],
      "op": "ISZERO",
      "path": "61"
    },
    "589": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        404,
        488
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x21A"
    },
    "592": {
      "branch": 10,
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        404,
        488
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "593": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        429,
        437
      ],
      "op": "PUSH2",
      "path": "61",
      "statement": 3,
      "value": "0x258"
    },
    "596": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        429,
        435
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x321"
    },
    "599": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        429,
        437
      ],
      "op": "JUMP",
      "path": "61"
    },
    "600": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        429,
        437
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "601": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        451,
        477
      ],
      "op": "PUSH2",
      "path": "61",
      "statement": 4,
      "value": "0x21A"
    },
    "604": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        471,
        476
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0xA2"
    },
    "607": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        475,
        476
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x1"
    },
    "609": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        471,
        472
      ],
      "op": "DUP4",
      "path": "61"
    },
    "610": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        471,
        476
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x408"
    },
    "613": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        471,
        476
      ],
      "op": "JUMP",
      "path": "61"
    },
    "614": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        862,
        1046
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "615": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x2"
    },
    "617": {
      "offset": [
        2260,
        2267
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "619": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2260,
        2267
      ],
      "op": "SLOAD",
      "path": "80"
    },
    "620": {
      "offset": [
        2260,
        2279
      ],
      "op": "EQ",
      "path": "80"
    },
    "621": {
      "branch": 11,
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2260,
        2279
      ],
      "op": "ISZERO",
      "path": "80"
    },
    "622": {
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x289"
    },
    "625": {
      "branch": 11,
      "offset": [
        2252,
        2315
      ],
      "op": "JUMPI",
      "path": "80"
    },
    "626": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x40"
    },
    "628": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2252,
        2315
      ],
      "op": "MLOAD",
      "path": "80"
    },
    "629": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "633": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "635": {
      "op": "SHL"
    },
    "636": {
      "offset": [
        2252,
        2315
      ],
      "op": "DUP2",
      "path": "80"
    },
    "637": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2252,
        2315
      ],
      "op": "MSTORE",
      "path": "80"
    },
    "638": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x4"
    },
    "640": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2252,
        2315
      ],
      "op": "ADD",
      "path": "80"
    },
    "641": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0xDD"
    },
    "644": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2252,
        2315
      ],
      "op": "SWAP1",
      "path": "80"
    },
    "645": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2252,
        2315
      ],
      "op": "PUSH2",
      "path": "80",
      "value": "0x3B9"
    },
    "648": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "i",
      "offset": [
        2252,
        2315
      ],
      "op": "JUMP",
      "path": "80"
    },
    "649": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2252,
        2315
      ],
      "op": "JUMPDEST",
      "path": "80"
    },
    "650": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x2"
    },
    "652": {
      "offset": [
        2390,
        2397
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "654": {
      "offset": [
        2390,
        2408
      ],
      "op": "SSTORE",
      "path": "80"
    },
    "655": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        941,
        949
      ],
      "op": "PUSH2",
      "path": "61",
      "statement": 5,
      "value": "0x296"
    },
    "658": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        941,
        947
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x321"
    },
    "661": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "i",
      "offset": [
        941,
        949
      ],
      "op": "JUMP",
      "path": "61"
    },
    "662": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        941,
        949
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "663": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "PUSH1",
      "path": "61",
      "statement": 6,
      "value": "0x40"
    },
    "665": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "666": {
      "op": "PUSH4",
      "value": "0xA2DF1ED"
    },
    "671": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "673": {
      "op": "SHL"
    },
    "674": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP2",
      "path": "61"
    },
    "675": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "MSTORE",
      "path": "61"
    },
    "676": {
      "op": "PUSH4",
      "value": "0x41D9399"
    },
    "681": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "683": {
      "op": "SHL"
    },
    "684": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x4"
    },
    "686": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP3",
      "path": "61"
    },
    "687": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "ADD",
      "path": "61"
    },
    "688": {
      "op": "MSTORE"
    },
    "689": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        980,
        1003
      ],
      "op": "PUSH32",
      "path": "61",
      "value": "0x83B2732F78169BFAAD6B407FA338CC97D697ED69D3915A18239CC111D51A402"
    },
    "722": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        980,
        1003
      ],
      "op": "SWAP1",
      "path": "61"
    },
    "723": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "725": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "727": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "729": {
      "op": "SHL"
    },
    "730": {
      "op": "SUB"
    },
    "731": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1033
      ],
      "op": "DUP4",
      "path": "61"
    },
    "732": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1033
      ],
      "op": "AND",
      "path": "61"
    },
    "733": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1033
      ],
      "op": "SWAP1",
      "path": "61"
    },
    "734": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1033
      ],
      "op": "PUSH4",
      "path": "61",
      "value": "0xA2DF1ED"
    },
    "739": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1033
      ],
      "op": "SWAP1",
      "path": "61"
    },
    "740": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "742": {
      "op": "ADD"
    },
    "743": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "745": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x40"
    },
    "747": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "MLOAD",
      "path": "61"
    },
    "748": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP1",
      "path": "61"
    },
    "749": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP4",
      "path": "61"
    },
    "750": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "SUB",
      "path": "61"
    },
    "751": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP2",
      "path": "61"
    },
    "752": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "754": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP8",
      "path": "61"
    },
    "755": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP1",
      "path": "61"
    },
    "756": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "EXTCODESIZE",
      "path": "61"
    },
    "757": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "ISZERO",
      "path": "61"
    },
    "758": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP1",
      "path": "61"
    },
    "759": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "ISZERO",
      "path": "61"
    },
    "760": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x300"
    },
    "763": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "764": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "766": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP1",
      "path": "61"
    },
    "767": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "REVERT",
      "path": "61"
    },
    "768": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "769": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "POP",
      "path": "61"
    },
    "770": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "GAS",
      "path": "61"
    },
    "771": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "CALL",
      "path": "61"
    },
    "772": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "ISZERO",
      "path": "61"
    },
    "773": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP1",
      "path": "61"
    },
    "774": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "ISZERO",
      "path": "61"
    },
    "775": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x314"
    },
    "778": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "JUMPI",
      "path": "61"
    },
    "779": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "RETURNDATASIZE",
      "path": "61"
    },
    "780": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "782": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "DUP1",
      "path": "61"
    },
    "783": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "RETURNDATACOPY",
      "path": "61"
    },
    "784": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "RETURNDATASIZE",
      "path": "61"
    },
    "785": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "787": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "REVERT",
      "path": "61"
    },
    "788": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        1014,
        1039
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "789": {
      "op": "POP"
    },
    "790": {
      "op": "POP"
    },
    "791": {
      "offset": [
        1637,
        1638
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x1"
    },
    "793": {
      "offset": [
        2563,
        2570
      ],
      "op": "PUSH1",
      "path": "80",
      "value": "0x0"
    },
    "795": {
      "offset": [
        2563,
        2585
      ],
      "op": "SSTORE",
      "path": "80"
    },
    "796": {
      "op": "POP"
    },
    "797": {
      "op": "POP"
    },
    "798": {
      "op": "POP"
    },
    "799": {
      "op": "POP"
    },
    "800": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "o",
      "offset": [
        862,
        1046
      ],
      "op": "JUMP",
      "path": "61"
    },
    "801": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1052,
        1107
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "802": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1099,
        1100
      ],
      "op": "PUSH1",
      "path": "61",
      "statement": 7,
      "value": "0x1"
    },
    "804": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1095
      ],
      "op": "DUP1",
      "path": "61"
    },
    "805": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1095
      ],
      "op": "PUSH1",
      "path": "61",
      "value": "0x0"
    },
    "807": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "DUP3",
      "path": "61"
    },
    "808": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "DUP3",
      "path": "61"
    },
    "809": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "SLOAD",
      "path": "61"
    },
    "810": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x333"
    },
    "813": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "SWAP2",
      "path": "61"
    },
    "814": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "SWAP1",
      "path": "61"
    },
    "815": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "PUSH2",
      "path": "61",
      "value": "0x3F0"
    },
    "818": {
      "fn": "ReentrancyMock._count",
      "jump": "i",
      "offset": [
        1088,
        1100
      ],
      "op": "JUMP",
      "path": "61"
    },
    "819": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "JUMPDEST",
      "path": "61"
    },
    "820": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "SWAP1",
      "path": "61"
    },
    "821": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "SWAP2",
      "path": "61"
    },
    "822": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1088,
        1100
      ],
      "op": "SSTORE",
      "path": "61"
    },
    "823": {
      "op": "POP"
    },
    "824": {
      "op": "POP"
    },
    "825": {
      "fn": "ReentrancyMock._count",
      "jump": "o",
      "offset": [
        1052,
        1107
      ],
      "op": "JUMP",
      "path": "61"
    },
    "826": {
      "op": "JUMPDEST"
    },
    "827": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "829": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "831": {
      "op": "DUP3"
    },
    "832": {
      "op": "DUP5"
    },
    "833": {
      "op": "SUB"
    },
    "834": {
      "op": "SLT"
    },
    "835": {
      "op": "ISZERO"
    },
    "836": {
      "op": "PUSH2",
      "value": "0x34B"
    },
    "839": {
      "op": "JUMPI"
    },
    "840": {
      "op": "DUP1"
    },
    "841": {
      "op": "DUP2"
    },
    "842": {
      "op": "REVERT"
    },
    "843": {
      "op": "JUMPDEST"
    },
    "844": {
      "op": "DUP2"
    },
    "845": {
      "op": "CALLDATALOAD"
    },
    "846": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "848": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "850": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "852": {
      "op": "SHL"
    },
    "853": {
      "op": "SUB"
    },
    "854": {
      "op": "DUP2"
    },
    "855": {
      "op": "AND"
    },
    "856": {
      "op": "DUP2"
    },
    "857": {
      "op": "EQ"
    },
    "858": {
      "op": "PUSH2",
      "value": "0x361"
    },
    "861": {
      "op": "JUMPI"
    },
    "862": {
      "op": "DUP2"
    },
    "863": {
      "op": "DUP3"
    },
    "864": {
      "op": "REVERT"
    },
    "865": {
      "op": "JUMPDEST"
    },
    "866": {
      "op": "SWAP4"
    },
    "867": {
      "op": "SWAP3"
    },
    "868": {
      "op": "POP"
    },
    "869": {
      "op": "POP"
    },
    "870": {
      "op": "POP"
    },
    "871": {
      "jump": "o",
      "op": "JUMP"
    },
    "872": {
      "op": "JUMPDEST"
    },
    "873": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "875": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "877": {
      "op": "DUP3"
    },
    "878": {
      "op": "DUP5"
    },
    "879": {
      "op": "SUB"
    },
    "880": {
      "op": "SLT"
    },
    "881": {
      "op": "ISZERO"
    },
    "882": {
      "op": "PUSH2",
      "value": "0x379"
    },
    "885": {
      "op": "JUMPI"
    },
    "886": {
      "op": "DUP1"
    },
    "887": {
      "op": "DUP2"
    },
    "888": {
      "op": "REVERT"
    },
    "889": {
      "op": "JUMPDEST"
    },
    "890": {
      "op": "POP"
    },
    "891": {
      "op": "CALLDATALOAD"
    },
    "892": {
      "op": "SWAP2"
    },
    "893": {
      "op": "SWAP1"
    },
    "894": {
      "op": "POP"
    },
    "895": {
      "jump": "o",
      "op": "JUMP"
    },
    "896": {
      "op": "JUMPDEST"
    },
    "897": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "899": {
      "op": "DUP3"
    },
    "900": {
      "op": "MLOAD"
    },
    "901": {
      "op": "DUP2"
    },
    "902": {
      "op": "JUMPDEST"
    },
    "903": {
      "op": "DUP2"
    },
    "904": {
      "op": "DUP2"
    },
    "905": {
      "op": "LT"
    },
    "906": {
      "op": "ISZERO"
    },
    "907": {
      "op": "PUSH2",
      "value": "0x3A0"
    },
    "910": {
      "op": "JUMPI"
    },
    "911": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "913": {
      "op": "DUP2"
    },
    "914": {
      "op": "DUP7"
    },
    "915": {
      "op": "ADD"
    },
    "916": {
      "op": "DUP2"
    },
    "917": {
      "op": "ADD"
    },
    "918": {
      "op": "MLOAD"
    },
    "919": {
      "op": "DUP6"
    },
    "920": {
      "op": "DUP4"
    },
    "921": {
      "op": "ADD"
    },
    "922": {
      "op": "MSTORE"
    },
    "923": {
      "op": "ADD"
    },
    "924": {
      "op": "PUSH2",
      "value": "0x386"
    },
    "927": {
      "op": "JUMP"
    },
    "928": {
      "op": "JUMPDEST"
    },
    "929": {
      "op": "DUP2"
    },
    "930": {
      "op": "DUP2"
    },
    "931": {
      "op": "GT"
    },
    "932": {
      "op": "ISZERO"
    },
    "933": {
      "op": "PUSH2",
      "value": "0x3AE"
    },
    "936": {
      "op": "JUMPI"
    },
    "937": {
      "op": "DUP3"
    },
    "938": {
      "op": "DUP3"
    },
    "939": {
      "op": "DUP6"
    },
    "940": {
      "op": "ADD"
    },
    "941": {
      "op": "MSTORE"
    },
    "942": {
      "op": "JUMPDEST"
    },
    "943": {
      "op": "POP"
    },
    "944": {
      "op": "SWAP2"
    },
    "945": {
      "op": "SWAP1"
    },
    "946": {
      "op": "SWAP2"
    },
    "947": {
      "op": "ADD"
    },
    "948": {
      "op": "SWAP3"
    },
    "949": {
      "op": "SWAP2"
    },
    "950": {
      "op": "POP"
    },
    "951": {
      "op": "POP"
    },
    "952": {
      "jump": "o",
      "op": "JUMP"
    },
    "953": {
      "op": "JUMPDEST"
    },
    "954": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "956": {
      "op": "DUP1"
    },
    "957": {
      "op": "DUP3"
    },
    "958": {
      "op": "MSTORE"
    },
    "959": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "961": {
      "op": "SWAP1"
    },
    "962": {
      "op": "DUP3"
    },
    "963": {
      "op": "ADD"
    },
    "964": {
      "op": "MSTORE"
    },
    "965": {
      "op": "PUSH32",
      "value": "0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
    },
    "998": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1000": {
      "op": "DUP3"
    },
    "1001": {
      "op": "ADD"
    },
    "1002": {
      "op": "MSTORE"
    },
    "1003": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1005": {
      "op": "ADD"
    },
    "1006": {
      "op": "SWAP1"
    },
    "1007": {
      "jump": "o",
      "op": "JUMP"
    },
    "1008": {
      "op": "JUMPDEST"
    },
    "1009": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1011": {
      "op": "DUP3"
    },
    "1012": {
      "op": "NOT"
    },
    "1013": {
      "op": "DUP3"
    },
    "1014": {
      "op": "GT"
    },
    "1015": {
      "op": "ISZERO"
    },
    "1016": {
      "op": "PUSH2",
      "value": "0x403"
    },
    "1019": {
      "op": "JUMPI"
    },
    "1020": {
      "op": "PUSH2",
      "value": "0x403"
    },
    "1023": {
      "op": "PUSH2",
      "value": "0x41F"
    },
    "1026": {
      "jump": "i",
      "op": "JUMP"
    },
    "1027": {
      "op": "JUMPDEST"
    },
    "1028": {
      "op": "POP"
    },
    "1029": {
      "op": "ADD"
    },
    "1030": {
      "op": "SWAP1"
    },
    "1031": {
      "jump": "o",
      "op": "JUMP"
    },
    "1032": {
      "op": "JUMPDEST"
    },
    "1033": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1035": {
      "op": "DUP3"
    },
    "1036": {
      "op": "DUP3"
    },
    "1037": {
      "op": "LT"
    },
    "1038": {
      "op": "ISZERO"
    },
    "1039": {
      "op": "PUSH2",
      "value": "0x41A"
    },
    "1042": {
      "op": "JUMPI"
    },
    "1043": {
      "op": "PUSH2",
      "value": "0x41A"
    },
    "1046": {
      "op": "PUSH2",
      "value": "0x41F"
    },
    "1049": {
      "jump": "i",
      "op": "JUMP"
    },
    "1050": {
      "op": "JUMPDEST"
    },
    "1051": {
      "op": "POP"
    },
    "1052": {
      "op": "SUB"
    },
    "1053": {
      "op": "SWAP1"
    },
    "1054": {
      "jump": "o",
      "op": "JUMP"
    },
    "1055": {
      "op": "JUMPDEST"
    },
    "1056": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1061": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1063": {
      "op": "SHL"
    },
    "1064": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1066": {
      "op": "MSTORE"
    },
    "1067": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1069": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1071": {
      "op": "MSTORE"
    },
    "1072": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1074": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1076": {
      "op": "REVERT"
    }
  },
  "sha1": "53702a94926f1043182589d399403c5e7b884a4b",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../security/ReentrancyGuard.sol\";\nimport \"./ReentrancyAttack.sol\";\n\ncontract ReentrancyMock is ReentrancyGuard {\n    uint256 public counter;\n\n    constructor () {\n        counter = 0;\n    }\n\n    function callback() external nonReentrant {\n        _count();\n    }\n\n    function countLocalRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            countLocalRecursive(n - 1);\n        }\n    }\n\n    function countThisRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success,) = address(this).call(abi.encodeWithSignature(\"countThisRecursive(uint256)\", n - 1));\n            require(success, \"ReentrancyMock: failed call\");\n        }\n    }\n\n    function countAndCall(ReentrancyAttack attacker) public nonReentrant {\n        _count();\n        bytes4 func = bytes4(keccak256(\"callback()\"));\n        attacker.callSender(func);\n    }\n\n    function _count() private {\n        counter += 1;\n    }\n}\n",
  "sourceMap": "134:975:61:-:0;;;212:43;;;;;;;;;-1:-1:-1;1637:1:80;1743:7;:22;;;237:11:61;;134:975;;;;;;",
  "sourcePath": "contracts/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol",
  "type": "contract"
}